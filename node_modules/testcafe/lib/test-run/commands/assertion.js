'use strict';

exports.__esModule = true;

var _type = require('./type');

var _type2 = _interopRequireDefault(_type);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _options = require('./options');

var _runtime = require('../../errors/runtime');

var _testRun = require('../../errors/test-run');

var _executeJsExpression = require('../execute-js-expression');

var _utils = require('./utils');

var _argument = require('./validations/argument');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Initializers
function initAssertionOptions(name, val) {
    return new _options.AssertionOptions(val, true);
}

//Initializers
function initAssertionParameter(name, val, { skipVisibilityCheck, testRun }) {
    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression.executeJsExpression)(val.value, testRun, { skipVisibilityCheck });

        return val;
    } catch (err) {
        var msg = err.constructor === _runtime.APIError ? err.rawMessage : err.message;

        throw new _testRun.AssertionExecutableArgumentError(name, val.value, msg);
    }
}

// Commands
class AssertionCommand extends _base2.default {
    constructor(obj, testRun) {
        super(obj, testRun, _type2.default.assertion);
    }

    _getAssignableProperties() {
        return [{ name: 'assertionType', type: _argument.nonEmptyStringArgument, required: true }, { name: 'actual', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected', init: initAssertionParameter, defaultValue: void 0 }, { name: 'expected2', init: initAssertionParameter, defaultValue: void 0 }, { name: 'message', type: _argument.stringArgument, defaultValue: null }, { name: 'options', type: _argument.actionOptions, init: initAssertionOptions, required: true }];
    }
}
exports.default = AssertionCommand;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9hc3NlcnRpb24uanMiXSwibmFtZXMiOlsiaW5pdEFzc2VydGlvbk9wdGlvbnMiLCJuYW1lIiwidmFsIiwiQXNzZXJ0aW9uT3B0aW9ucyIsImluaXRBc3NlcnRpb25QYXJhbWV0ZXIiLCJza2lwVmlzaWJpbGl0eUNoZWNrIiwidGVzdFJ1biIsInZhbHVlIiwiZXJyIiwibXNnIiwiY29uc3RydWN0b3IiLCJBUElFcnJvciIsInJhd01lc3NhZ2UiLCJtZXNzYWdlIiwiQXNzZXJ0aW9uRXhlY3V0YWJsZUFyZ3VtZW50RXJyb3IiLCJBc3NlcnRpb25Db21tYW5kIiwiQ29tbWFuZEJhc2UiLCJvYmoiLCJUWVBFIiwiYXNzZXJ0aW9uIiwiX2dldEFzc2lnbmFibGVQcm9wZXJ0aWVzIiwidHlwZSIsIm5vbkVtcHR5U3RyaW5nQXJndW1lbnQiLCJyZXF1aXJlZCIsImluaXQiLCJkZWZhdWx0VmFsdWUiLCJzdHJpbmdBcmd1bWVudCIsImFjdGlvbk9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7QUFFQTtBQUNBLFNBQVNBLG9CQUFULENBQStCQyxJQUEvQixFQUFxQ0MsR0FBckMsRUFBMEM7QUFDdEMsV0FBTyxJQUFJQyx5QkFBSixDQUFxQkQsR0FBckIsRUFBMEIsSUFBMUIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsU0FBU0Usc0JBQVQsQ0FBaUNILElBQWpDLEVBQXVDQyxHQUF2QyxFQUE0QyxFQUFFRyxtQkFBRixFQUF1QkMsT0FBdkIsRUFBNUMsRUFBOEU7QUFDMUUsUUFBSTtBQUNBLFlBQUksMkJBQWVKLEdBQWYsQ0FBSixFQUNJQSxNQUFNLDhDQUFvQkEsSUFBSUssS0FBeEIsRUFBK0JELE9BQS9CLEVBQXdDLEVBQUVELG1CQUFGLEVBQXhDLENBQU47O0FBRUosZUFBT0gsR0FBUDtBQUNILEtBTEQsQ0FNQSxPQUFPTSxHQUFQLEVBQVk7QUFDUixZQUFJQyxNQUFNRCxJQUFJRSxXQUFKLEtBQW9CQyxpQkFBcEIsR0FBK0JILElBQUlJLFVBQW5DLEdBQWdESixJQUFJSyxPQUE5RDs7QUFFQSxjQUFNLElBQUlDLHlDQUFKLENBQXFDYixJQUFyQyxFQUEyQ0MsSUFBSUssS0FBL0MsRUFBc0RFLEdBQXRELENBQU47QUFDSDtBQUNKOztBQUVEO0FBQ2UsTUFBTU0sZ0JBQU4sU0FBK0JDLGNBQS9CLENBQTJDO0FBQ3RETixnQkFBYU8sR0FBYixFQUFrQlgsT0FBbEIsRUFBMkI7QUFDdkIsY0FBTVcsR0FBTixFQUFXWCxPQUFYLEVBQW9CWSxlQUFLQyxTQUF6QjtBQUNIOztBQUVEQywrQkFBNEI7QUFDeEIsZUFBTyxDQUNILEVBQUVuQixNQUFNLGVBQVIsRUFBeUJvQixNQUFNQyxnQ0FBL0IsRUFBdURDLFVBQVUsSUFBakUsRUFERyxFQUVILEVBQUV0QixNQUFNLFFBQVIsRUFBa0J1QixNQUFNcEIsc0JBQXhCLEVBQWdEcUIsY0FBYyxLQUFLLENBQW5FLEVBRkcsRUFHSCxFQUFFeEIsTUFBTSxVQUFSLEVBQW9CdUIsTUFBTXBCLHNCQUExQixFQUFrRHFCLGNBQWMsS0FBSyxDQUFyRSxFQUhHLEVBSUgsRUFBRXhCLE1BQU0sV0FBUixFQUFxQnVCLE1BQU1wQixzQkFBM0IsRUFBbURxQixjQUFjLEtBQUssQ0FBdEUsRUFKRyxFQUtILEVBQUV4QixNQUFNLFNBQVIsRUFBbUJvQixNQUFNSyx3QkFBekIsRUFBeUNELGNBQWMsSUFBdkQsRUFMRyxFQU1ILEVBQUV4QixNQUFNLFNBQVIsRUFBbUJvQixNQUFNTSx1QkFBekIsRUFBd0NILE1BQU14QixvQkFBOUMsRUFBb0V1QixVQUFVLElBQTlFLEVBTkcsQ0FBUDtBQVFIO0FBZHFEO2tCQUFyQ1IsZ0IiLCJmaWxlIjoidGVzdC1ydW4vY29tbWFuZHMvYXNzZXJ0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCBDb21tYW5kQmFzZSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgQXNzZXJ0aW9uT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCB7IEFzc2VydGlvbkV4ZWN1dGFibGVBcmd1bWVudEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3Rlc3QtcnVuJztcbmltcG9ydCB7IGV4ZWN1dGVKc0V4cHJlc3Npb24gfSBmcm9tICcuLi9leGVjdXRlLWpzLWV4cHJlc3Npb24nO1xuaW1wb3J0IHsgaXNKU0V4cHJlc3Npb24gfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgc3RyaW5nQXJndW1lbnQsIGFjdGlvbk9wdGlvbnMsIG5vbkVtcHR5U3RyaW5nQXJndW1lbnQgfSBmcm9tICcuL3ZhbGlkYXRpb25zL2FyZ3VtZW50JztcblxuLy8gSW5pdGlhbGl6ZXJzXG5mdW5jdGlvbiBpbml0QXNzZXJ0aW9uT3B0aW9ucyAobmFtZSwgdmFsKSB7XG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb25PcHRpb25zKHZhbCwgdHJ1ZSk7XG59XG5cbi8vSW5pdGlhbGl6ZXJzXG5mdW5jdGlvbiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyIChuYW1lLCB2YWwsIHsgc2tpcFZpc2liaWxpdHlDaGVjaywgdGVzdFJ1biB9KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzSlNFeHByZXNzaW9uKHZhbCkpXG4gICAgICAgICAgICB2YWwgPSBleGVjdXRlSnNFeHByZXNzaW9uKHZhbC52YWx1ZSwgdGVzdFJ1biwgeyBza2lwVmlzaWJpbGl0eUNoZWNrIH0pO1xuXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdmFyIG1zZyA9IGVyci5jb25zdHJ1Y3RvciA9PT0gQVBJRXJyb3IgPyBlcnIucmF3TWVzc2FnZSA6IGVyci5tZXNzYWdlO1xuXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FeGVjdXRhYmxlQXJndW1lbnRFcnJvcihuYW1lLCB2YWwudmFsdWUsIG1zZyk7XG4gICAgfVxufVxuXG4vLyBDb21tYW5kc1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXNzZXJ0aW9uQ29tbWFuZCBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5hc3NlcnRpb24pO1xuICAgIH1cblxuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7IG5hbWU6ICdhc3NlcnRpb25UeXBlJywgdHlwZTogbm9uRW1wdHlTdHJpbmdBcmd1bWVudCwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FjdHVhbCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZCcsIGluaXQ6IGluaXRBc3NlcnRpb25QYXJhbWV0ZXIsIGRlZmF1bHRWYWx1ZTogdm9pZCAwIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdleHBlY3RlZDInLCBpbml0OiBpbml0QXNzZXJ0aW9uUGFyYW1ldGVyLCBkZWZhdWx0VmFsdWU6IHZvaWQgMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnbWVzc2FnZScsIHR5cGU6IHN0cmluZ0FyZ3VtZW50LCBkZWZhdWx0VmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ29wdGlvbnMnLCB0eXBlOiBhY3Rpb25PcHRpb25zLCBpbml0OiBpbml0QXNzZXJ0aW9uT3B0aW9ucywgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuICAgIH1cbn1cbiJdfQ==
