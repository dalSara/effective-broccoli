'use strict';

exports.__esModule = true;
exports.SelectorNodeTransform = exports.FunctionTransform = undefined;
exports.createReplicator = createReplicator;

var _lodash = require('lodash');

var _replicator = require('replicator');

var _replicator2 = _interopRequireDefault(_replicator);

var _builderSymbol = require('./builder-symbol');

var _builderSymbol2 = _interopRequireDefault(_builderSymbol);

var _compileClientFunction = require('../compiler/compile-client-function');

var _compileClientFunction2 = _interopRequireDefault(_compileClientFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createReplicator(transforms) {
    // NOTE: we will serialize replicator results
    // to JSON with a command or command result.
    // Therefore there is no need to do additional job here,
    // so we use identity functions for serialization.
    var replicator = new _replicator2.default({
        serialize: _lodash.identity,
        deserialize: _lodash.identity
    });

    return replicator.addTransforms(transforms);
}

// Replicator transforms
class FunctionTransform {
    constructor(callsiteNames) {
        this.type = 'Function';
        this.callsiteNames = callsiteNames;
    }

    shouldTransform(type) {
        return type === 'function';
    }

    toSerializable(fn) {
        var clientFnBuilder = fn[_builderSymbol2.default];

        if (clientFnBuilder) {
            return {
                fnCode: clientFnBuilder.compiledFnCode,
                dependencies: clientFnBuilder.getFunctionDependencies()
            };
        }

        return {
            fnCode: (0, _compileClientFunction2.default)(fn.toString(), null, this.callsiteNames.instantiation, this.callsiteNames.execution),
            dependencies: {}
        };
    }

    fromSerializable() {
        return void 0;
    }
}

exports.FunctionTransform = FunctionTransform;
class SelectorNodeTransform {
    constructor() {
        this.type = 'Node';
    }

    shouldTransform() {
        return false;
    }

    fromSerializable(nodeSnapshot) {
        return nodeSnapshot;
    }
}
exports.SelectorNodeTransform = SelectorNodeTransform;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQtZnVuY3Rpb25zL3JlcGxpY2F0b3IuanMiXSwibmFtZXMiOlsiY3JlYXRlUmVwbGljYXRvciIsInRyYW5zZm9ybXMiLCJyZXBsaWNhdG9yIiwiUmVwbGljYXRvciIsInNlcmlhbGl6ZSIsImlkZW50aXR5IiwiZGVzZXJpYWxpemUiLCJhZGRUcmFuc2Zvcm1zIiwiRnVuY3Rpb25UcmFuc2Zvcm0iLCJjb25zdHJ1Y3RvciIsImNhbGxzaXRlTmFtZXMiLCJ0eXBlIiwic2hvdWxkVHJhbnNmb3JtIiwidG9TZXJpYWxpemFibGUiLCJmbiIsImNsaWVudEZuQnVpbGRlciIsImZ1bmN0aW9uQnVpbGRlclN5bWJvbCIsImZuQ29kZSIsImNvbXBpbGVkRm5Db2RlIiwiZGVwZW5kZW5jaWVzIiwiZ2V0RnVuY3Rpb25EZXBlbmRlbmNpZXMiLCJ0b1N0cmluZyIsImluc3RhbnRpYXRpb24iLCJleGVjdXRpb24iLCJmcm9tU2VyaWFsaXphYmxlIiwiU2VsZWN0b3JOb2RlVHJhbnNmb3JtIiwibm9kZVNuYXBzaG90Il0sIm1hcHBpbmdzIjoiOzs7O1FBS2dCQSxnQixHQUFBQSxnQjs7QUFMaEI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFTyxTQUFTQSxnQkFBVCxDQUEyQkMsVUFBM0IsRUFBdUM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJQyxhQUFhLElBQUlDLG9CQUFKLENBQWU7QUFDNUJDLG1CQUFhQyxnQkFEZTtBQUU1QkMscUJBQWFEO0FBRmUsS0FBZixDQUFqQjs7QUFLQSxXQUFPSCxXQUFXSyxhQUFYLENBQXlCTixVQUF6QixDQUFQO0FBQ0g7O0FBRUQ7QUFDTyxNQUFNTyxpQkFBTixDQUF3QjtBQUMzQkMsZ0JBQWFDLGFBQWIsRUFBNEI7QUFDeEIsYUFBS0MsSUFBTCxHQUFxQixVQUFyQjtBQUNBLGFBQUtELGFBQUwsR0FBcUJBLGFBQXJCO0FBQ0g7O0FBRURFLG9CQUFpQkQsSUFBakIsRUFBdUI7QUFDbkIsZUFBT0EsU0FBUyxVQUFoQjtBQUNIOztBQUVERSxtQkFBZ0JDLEVBQWhCLEVBQW9CO0FBQ2hCLFlBQUlDLGtCQUFrQkQsR0FBR0UsdUJBQUgsQ0FBdEI7O0FBRUEsWUFBSUQsZUFBSixFQUFxQjtBQUNqQixtQkFBTztBQUNIRSx3QkFBY0YsZ0JBQWdCRyxjQUQzQjtBQUVIQyw4QkFBY0osZ0JBQWdCSyx1QkFBaEI7QUFGWCxhQUFQO0FBSUg7O0FBRUQsZUFBTztBQUNISCxvQkFBYyxxQ0FBc0JILEdBQUdPLFFBQUgsRUFBdEIsRUFBcUMsSUFBckMsRUFBMkMsS0FBS1gsYUFBTCxDQUFtQlksYUFBOUQsRUFBNkUsS0FBS1osYUFBTCxDQUFtQmEsU0FBaEcsQ0FEWDtBQUVISiwwQkFBYztBQUZYLFNBQVA7QUFJSDs7QUFFREssdUJBQW9CO0FBQ2hCLGVBQU8sS0FBSyxDQUFaO0FBQ0g7QUE1QjBCOztRQUFsQmhCLGlCLEdBQUFBLGlCO0FBK0JOLE1BQU1pQixxQkFBTixDQUE0QjtBQUMvQmhCLGtCQUFlO0FBQ1gsYUFBS0UsSUFBTCxHQUFZLE1BQVo7QUFDSDs7QUFFREMsc0JBQW1CO0FBQ2YsZUFBTyxLQUFQO0FBQ0g7O0FBRURZLHFCQUFrQkUsWUFBbEIsRUFBZ0M7QUFDNUIsZUFBT0EsWUFBUDtBQUNIO0FBWDhCO1FBQXRCRCxxQixHQUFBQSxxQiIsImZpbGUiOiJjbGllbnQtZnVuY3Rpb25zL3JlcGxpY2F0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUmVwbGljYXRvciBmcm9tICdyZXBsaWNhdG9yJztcbmltcG9ydCBmdW5jdGlvbkJ1aWxkZXJTeW1ib2wgZnJvbSAnLi9idWlsZGVyLXN5bWJvbCc7XG5pbXBvcnQgY29tcGlsZUNsaWVudEZ1bmN0aW9uIGZyb20gJy4uL2NvbXBpbGVyL2NvbXBpbGUtY2xpZW50LWZ1bmN0aW9uJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlcGxpY2F0b3IgKHRyYW5zZm9ybXMpIHtcbiAgICAvLyBOT1RFOiB3ZSB3aWxsIHNlcmlhbGl6ZSByZXBsaWNhdG9yIHJlc3VsdHNcbiAgICAvLyB0byBKU09OIHdpdGggYSBjb21tYW5kIG9yIGNvbW1hbmQgcmVzdWx0LlxuICAgIC8vIFRoZXJlZm9yZSB0aGVyZSBpcyBubyBuZWVkIHRvIGRvIGFkZGl0aW9uYWwgam9iIGhlcmUsXG4gICAgLy8gc28gd2UgdXNlIGlkZW50aXR5IGZ1bmN0aW9ucyBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICB2YXIgcmVwbGljYXRvciA9IG5ldyBSZXBsaWNhdG9yKHtcbiAgICAgICAgc2VyaWFsaXplOiAgIGlkZW50aXR5LFxuICAgICAgICBkZXNlcmlhbGl6ZTogaWRlbnRpdHlcbiAgICB9KTtcblxuICAgIHJldHVybiByZXBsaWNhdG9yLmFkZFRyYW5zZm9ybXModHJhbnNmb3Jtcyk7XG59XG5cbi8vIFJlcGxpY2F0b3IgdHJhbnNmb3Jtc1xuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uVHJhbnNmb3JtIHtcbiAgICBjb25zdHJ1Y3RvciAoY2FsbHNpdGVOYW1lcykge1xuICAgICAgICB0aGlzLnR5cGUgICAgICAgICAgPSAnRnVuY3Rpb24nO1xuICAgICAgICB0aGlzLmNhbGxzaXRlTmFtZXMgPSBjYWxsc2l0ZU5hbWVzO1xuICAgIH1cblxuICAgIHNob3VsZFRyYW5zZm9ybSAodHlwZSkge1xuICAgICAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICB0b1NlcmlhbGl6YWJsZSAoZm4pIHtcbiAgICAgICAgdmFyIGNsaWVudEZuQnVpbGRlciA9IGZuW2Z1bmN0aW9uQnVpbGRlclN5bWJvbF07XG5cbiAgICAgICAgaWYgKGNsaWVudEZuQnVpbGRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmbkNvZGU6ICAgICAgIGNsaWVudEZuQnVpbGRlci5jb21waWxlZEZuQ29kZSxcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmNpZXM6IGNsaWVudEZuQnVpbGRlci5nZXRGdW5jdGlvbkRlcGVuZGVuY2llcygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZuQ29kZTogICAgICAgY29tcGlsZUNsaWVudEZ1bmN0aW9uKGZuLnRvU3RyaW5nKCksIG51bGwsIHRoaXMuY2FsbHNpdGVOYW1lcy5pbnN0YW50aWF0aW9uLCB0aGlzLmNhbGxzaXRlTmFtZXMuZXhlY3V0aW9uKSxcbiAgICAgICAgICAgIGRlcGVuZGVuY2llczoge31cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmcm9tU2VyaWFsaXphYmxlICgpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3Rvck5vZGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gJ05vZGUnO1xuICAgIH1cblxuICAgIHNob3VsZFRyYW5zZm9ybSAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmcm9tU2VyaWFsaXphYmxlIChub2RlU25hcHNob3QpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVTbmFwc2hvdDtcbiAgICB9XG59XG4iXX0=
