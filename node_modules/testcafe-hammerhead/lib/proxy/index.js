'use strict';

exports.__esModule = true;

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _readFileRelative = require('read-file-relative');

var _http3 = require('../utils/http');

var _requestPipeline = require('../request-pipeline');

var _createShadowStylesheet = require('../shadow-ui/create-shadow-stylesheet');

var _createShadowStylesheet2 = _interopRequireDefault(_createShadowStylesheet);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Const
var SESSION_IS_NOT_OPENED_ERR = 'Session is not opened in proxy';

// Static
function parseAsJson(msg) {
    msg = msg.toString();

    try {
        return JSON.parse(msg);
    } catch (err) {
        return null;
    }
}

function createServerInfo(hostname, port, crossDomainPort, protocol) {
    return {
        hostname: hostname,
        port: port,
        crossDomainPort: crossDomainPort,
        protocol: protocol,
        domain: `${protocol}//${hostname}:${port}`
    };
}

// Proxy

var Proxy = function (_Router) {
    _inherits(Proxy, _Router);

    function Proxy(hostname, port1, port2, sslOptions, developmentMode) {
        _classCallCheck(this, Proxy);

        var _this = _possibleConstructorReturn(this, _Router.call(this));

        _this.openSessions = {};

        var protocol = sslOptions ? 'https:' : 'http:';

        _this.server1Info = createServerInfo(hostname, port1, port2, protocol);
        _this.server2Info = createServerInfo(hostname, port2, port1, protocol);

        if (sslOptions) {
            _this.server1 = _https2.default.createServer(sslOptions, function (req, res) {
                return _this._onRequest(req, res, _this.server1Info);
            });
            _this.server2 = _https2.default.createServer(sslOptions, function (req, res) {
                return _this._onRequest(req, res, _this.server2Info);
            });
        } else {
            _this.server1 = _http2.default.createServer(function (req, res) {
                return _this._onRequest(req, res, _this.server1Info);
            });
            _this.server2 = _http2.default.createServer(function (req, res) {
                return _this._onRequest(req, res, _this.server2Info);
            });
        }

        _this.server1.on('upgrade', function (req, socket, head) {
            return _this._onUpgradeRequest(req, socket, head, _this.server1Info);
        });
        _this.server2.on('upgrade', function (req, socket, head) {
            return _this._onUpgradeRequest(req, socket, head, _this.server2Info);
        });

        _this.server1.listen(port1);
        _this.server2.listen(port2);

        _this.sockets = [];

        // BUG: GH-89
        _this._startSocketsCollecting();
        _this._registerServiceRoutes(developmentMode);
        return _this;
    }

    Proxy.prototype._closeSockets = function _closeSockets() {
        this.sockets.forEach(function (socket) {
            return socket.destroy();
        });
    };

    Proxy.prototype._startSocketsCollecting = function _startSocketsCollecting() {
        var _this2 = this;

        var handler = function handler(socket) {
            _this2.sockets.push(socket);
            socket.on('close', function () {
                return _this2.sockets.splice(_this2.sockets.indexOf(socket), 1);
            });
        };

        this.server1.on('connection', handler);
        this.server2.on('connection', handler);
    };

    Proxy.prototype._registerServiceRoutes = function _registerServiceRoutes(developmentMode) {
        var _this3 = this;

        var hammerheadFileName = developmentMode ? 'hammerhead.js' : 'hammerhead.min.js';
        var hammerheadScriptContent = (0, _readFileRelative.readSync)(`../client/${hammerheadFileName}`);

        this.GET('/hammerhead.js', {
            contentType: 'application/x-javascript',
            content: hammerheadScriptContent
        });

        this.POST('/messaging', function (req, res, serverInfo) {
            return _this3._onServiceMessage(req, res, serverInfo);
        });
        this.POST('/cookie-sync', function (req, res, serverInfo) {
            return _this3._onCookieSync(req, res, serverInfo);
        });
        this.GET('/task.js', function (req, res, serverInfo) {
            return _this3._onTaskScriptRequest(req, res, serverInfo, false);
        });
        this.GET('/iframe-task.js', function (req, res, serverInfo) {
            return _this3._onTaskScriptRequest(req, res, serverInfo, true);
        });
    };

    Proxy.prototype._onServiceMessage = function () {
        var _ref = _asyncToGenerator(function* (req, res, serverInfo) {
            var body = yield (0, _http3.fetchBody)(req);
            var msg = parseAsJson(body);
            var session = msg && this.openSessions[msg.sessionId];

            if (session) {
                try {
                    var result = yield session.handleServiceMessage(msg, serverInfo);

                    (0, _http3.respondWithJSON)(res, result || '');
                } catch (err) {
                    (0, _http3.respond500)(res, err.toString());
                }
            } else (0, _http3.respond500)(res, SESSION_IS_NOT_OPENED_ERR);
        });

        function _onServiceMessage(_x, _x2, _x3) {
            return _ref.apply(this, arguments);
        }

        return _onServiceMessage;
    }();

    Proxy.prototype._onCookieSync = function () {
        var _ref2 = _asyncToGenerator(function* (req, res) {
            var body = yield (0, _http3.fetchBody)(req);
            var msg = parseAsJson(body);
            var session = msg && this.openSessions[msg.sessionId];

            if (session) {
                try {
                    session.setCookie(msg.queue);

                    (0, _http3.respond204)(res);
                } catch (err) {
                    (0, _http3.respond500)(res, err.toString());
                }
            } else (0, _http3.respond500)(res, SESSION_IS_NOT_OPENED_ERR);
        });

        function _onCookieSync(_x4, _x5) {
            return _ref2.apply(this, arguments);
        }

        return _onCookieSync;
    }();

    Proxy.prototype._onTaskScriptRequest = function _onTaskScriptRequest(req, res, serverInfo, isIframe) {
        var referer = req.headers['referer'];
        var refererDest = referer && urlUtils.parseProxyUrl(referer);
        var session = refererDest && this.openSessions[refererDest.sessionId];

        if (session) {
            res.setHeader('content-type', 'application/x-javascript');
            (0, _http3.preventCaching)(res);
            res.end(session.getTaskScript(referer, refererDest.destUrl, serverInfo, isIframe, true));
        } else (0, _http3.respond500)(res, SESSION_IS_NOT_OPENED_ERR);
    };

    Proxy.prototype._onRequest = function _onRequest(req, res, serverInfo) {
        // NOTE: Not a service request, execute the proxy pipeline.
        if (!this._route(req, res, serverInfo)) (0, _requestPipeline.run)(req, res, serverInfo, this.openSessions);
    };

    Proxy.prototype._onUpgradeRequest = function _onUpgradeRequest(req, socket, head, serverInfo) {
        if (head && head.length) socket.unshift(head);

        this._onRequest(req, socket, serverInfo);
    };

    Proxy.prototype._processStaticContent = function _processStaticContent(handler) {
        if (handler.isShadowUIStylesheet) handler.content = (0, _createShadowStylesheet2.default)(handler.content);
    };

    // API


    Proxy.prototype.close = function close() {
        this.server1.close();
        this.server2.close();
        this._closeSockets();
    };

    Proxy.prototype.openSession = function openSession(url, session, externalProxySettings) {
        session.proxy = this;
        this.openSessions[session.id] = session;

        if (externalProxySettings) session.setExternalProxySettings(externalProxySettings);

        url = urlUtils.prepareUrl(url);

        return urlUtils.getProxyUrl(url, {
            proxyHostname: this.server1Info.hostname,
            proxyPort: this.server1Info.port,
            proxyProtocol: this.server1Info.protocol,
            sessionId: session.id
        });
    };

    Proxy.prototype.closeSession = function closeSession(session) {
        session.proxy = null;
        delete this.openSessions[session.id];
    };

    return Proxy;
}(_router2.default);

exports.default = Proxy;
module.exports = exports['default'];