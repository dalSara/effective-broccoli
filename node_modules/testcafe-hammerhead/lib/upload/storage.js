'use strict';

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var readFile = (0, _promisify2.default)(_fs2.default.readFile);
var stat = (0, _promisify2.default)(_fs2.default.stat);
var writeFile = (0, _promisify2.default)(_fs2.default.writeFile);

var UploadStorage = function () {
    function UploadStorage(uploadsRoot) {
        _classCallCheck(this, UploadStorage);

        this.uploadsRoot = uploadsRoot;
    }

    UploadStorage._loadFile = function () {
        var _ref = _asyncToGenerator(function* (filePath) {
            var fileContent = yield readFile(filePath);
            var stats = yield stat(filePath);

            return {
                data: fileContent.toString('base64'),
                info: {
                    lastModifiedDate: stats.mtime,
                    name: _path2.default.basename(filePath),
                    type: _mime2.default.lookup(filePath)
                }
            };
        });

        function _loadFile(_x) {
            return _ref.apply(this, arguments);
        }

        return _loadFile;
    }();

    UploadStorage.prototype._runFileProcessingTask = function () {
        var _ref2 = _asyncToGenerator(function* (fileName, processor) {
            var resolvedPath = _path2.default.resolve(this.uploadsRoot, fileName);

            try {
                return yield processor(resolvedPath, fileName);
            } catch (e) {
                return {
                    err: e.toString(),
                    path: resolvedPath
                };
            }
        });

        function _runFileProcessingTask(_x2, _x3) {
            return _ref2.apply(this, arguments);
        }

        return _runFileProcessingTask;
    }();

    UploadStorage.prototype._processFiles = function () {
        var _ref3 = _asyncToGenerator(function* (fileNames, processor) {
            var _this = this;

            var processTasks = fileNames.map(function (fileName) {
                return _this._runFileProcessingTask(fileName, processor);
            });
            var result = yield Promise.all(processTasks);

            result = result.filter(function (value) {
                return !!value;
            });

            return result.length ? result : null;
        });

        function _processFiles(_x4, _x5) {
            return _ref3.apply(this, arguments);
        }

        return _processFiles;
    }();

    UploadStorage.prototype.store = function () {
        var _ref4 = _asyncToGenerator(function* (fileNames, data) {
            return yield this._processFiles(fileNames, function () {
                var _ref5 = _asyncToGenerator(function* (resolvedPath, fileName) {
                    var content = Buffer.from(data[fileNames.indexOf(fileName)], 'base64');

                    yield writeFile(resolvedPath, content);
                });

                return function (_x8, _x9) {
                    return _ref5.apply(this, arguments);
                };
            }());
        });

        function store(_x6, _x7) {
            return _ref4.apply(this, arguments);
        }

        return store;
    }();

    UploadStorage.prototype.get = function () {
        var _ref6 = _asyncToGenerator(function* (paths) {
            return yield this._processFiles(paths, function () {
                var _ref7 = _asyncToGenerator(function* (resolvedPath) {
                    return yield UploadStorage._loadFile(resolvedPath);
                });

                return function (_x11) {
                    return _ref7.apply(this, arguments);
                };
            }());
        });

        function get(_x10) {
            return _ref6.apply(this, arguments);
        }

        return get;
    }();

    return UploadStorage;
}();

exports.default = UploadStorage;
module.exports = exports['default'];