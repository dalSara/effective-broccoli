'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = function (configString) {
    if (!configCache[configString]) configCache[configString] = getNewConfig(configString);

    return configCache[configString];
};

var _argumentParsing = require('../../utils/argument-parsing');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AVAILABLE_MODES = ['userProfile', 'headless'];

var configCache = {};

function hasCustomProfile(userArgs) {
    return !!(userArgs.match(/-P\s/) || userArgs.match(/-profile\s/));
}

function parseModes(modesStr, userArgs) {
    var parsed = (0, _argumentParsing.splitEscaped)(modesStr, ':');
    var path = (0, _argumentParsing.getPathFromParsedModes)(parsed, AVAILABLE_MODES);
    var detectedModes = (0, _argumentParsing.getModes)(parsed, AVAILABLE_MODES);
    var optionsString = parsed.filter(item => !!item).join(':');
    var options = parsed.length ? (0, _argumentParsing.splitEscaped)(optionsString, ';') : [];

    return {
        path: path,
        userProfile: detectedModes.userProfile || hasCustomProfile(userArgs),
        headless: detectedModes.headless,
        marionettePort: (0, _argumentParsing.findMatch)(options, /^marionettePort=(.*)/),
        disableMultiprocessing: (0, _argumentParsing.isMatchTrue)(options, /^disableMultiprocessing=(.*)/)
    };
}

function getNewConfig(configString) {
    var _parseConfig = (0, _argumentParsing.parseConfig)(configString),
        userArgs = _parseConfig.userArgs,
        modesString = _parseConfig.modesString;

    var modes = parseModes(modesString, userArgs);

    return (0, _assign2.default)({ userArgs }, modes);
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2ZpcmVmb3gvY29uZmlnLmpzIl0sIm5hbWVzIjpbImNvbmZpZ1N0cmluZyIsImNvbmZpZ0NhY2hlIiwiZ2V0TmV3Q29uZmlnIiwiQVZBSUxBQkxFX01PREVTIiwiaGFzQ3VzdG9tUHJvZmlsZSIsInVzZXJBcmdzIiwibWF0Y2giLCJwYXJzZU1vZGVzIiwibW9kZXNTdHIiLCJwYXJzZWQiLCJwYXRoIiwiZGV0ZWN0ZWRNb2RlcyIsIm9wdGlvbnNTdHJpbmciLCJmaWx0ZXIiLCJpdGVtIiwiam9pbiIsIm9wdGlvbnMiLCJsZW5ndGgiLCJ1c2VyUHJvZmlsZSIsImhlYWRsZXNzIiwibWFyaW9uZXR0ZVBvcnQiLCJkaXNhYmxlTXVsdGlwcm9jZXNzaW5nIiwibW9kZXNTdHJpbmciLCJtb2RlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBbUNlLFVBQVVBLFlBQVYsRUFBd0I7QUFDbkMsUUFBSSxDQUFDQyxZQUFZRCxZQUFaLENBQUwsRUFDSUMsWUFBWUQsWUFBWixJQUE0QkUsYUFBYUYsWUFBYixDQUE1Qjs7QUFFSixXQUFPQyxZQUFZRCxZQUFaLENBQVA7QUFDSCxDOztBQXhDRDs7OztBQUdBLE1BQU1HLGtCQUFrQixDQUFDLGFBQUQsRUFBZ0IsVUFBaEIsQ0FBeEI7O0FBRUEsSUFBSUYsY0FBYyxFQUFsQjs7QUFFQSxTQUFTRyxnQkFBVCxDQUEyQkMsUUFBM0IsRUFBcUM7QUFDakMsV0FBTyxDQUFDLEVBQUVBLFNBQVNDLEtBQVQsQ0FBZSxNQUFmLEtBQTBCRCxTQUFTQyxLQUFULENBQWUsWUFBZixDQUE1QixDQUFSO0FBQ0g7O0FBRUQsU0FBU0MsVUFBVCxDQUFxQkMsUUFBckIsRUFBK0JILFFBQS9CLEVBQXlDO0FBQ3JDLFFBQUlJLFNBQWdCLG1DQUFhRCxRQUFiLEVBQXVCLEdBQXZCLENBQXBCO0FBQ0EsUUFBSUUsT0FBZ0IsNkNBQXVCRCxNQUF2QixFQUErQk4sZUFBL0IsQ0FBcEI7QUFDQSxRQUFJUSxnQkFBZ0IsK0JBQVNGLE1BQVQsRUFBaUJOLGVBQWpCLENBQXBCO0FBQ0EsUUFBSVMsZ0JBQWdCSCxPQUFPSSxNQUFQLENBQWNDLFFBQVEsQ0FBQyxDQUFDQSxJQUF4QixFQUE4QkMsSUFBOUIsQ0FBbUMsR0FBbkMsQ0FBcEI7QUFDQSxRQUFJQyxVQUFnQlAsT0FBT1EsTUFBUCxHQUFnQixtQ0FBYUwsYUFBYixFQUE0QixHQUE1QixDQUFoQixHQUFtRCxFQUF2RTs7QUFFQSxXQUFPO0FBQ0hGLGNBQXdCQSxJQURyQjtBQUVIUSxxQkFBd0JQLGNBQWNPLFdBQWQsSUFBNkJkLGlCQUFpQkMsUUFBakIsQ0FGbEQ7QUFHSGMsa0JBQXdCUixjQUFjUSxRQUhuQztBQUlIQyx3QkFBd0IsZ0NBQVVKLE9BQVYsRUFBbUIsc0JBQW5CLENBSnJCO0FBS0hLLGdDQUF3QixrQ0FBWUwsT0FBWixFQUFxQiw4QkFBckI7QUFMckIsS0FBUDtBQU9IOztBQUdELFNBQVNkLFlBQVQsQ0FBdUJGLFlBQXZCLEVBQXFDO0FBQUEsdUJBQ0Qsa0NBQVlBLFlBQVosQ0FEQztBQUFBLFFBQzNCSyxRQUQyQixnQkFDM0JBLFFBRDJCO0FBQUEsUUFDakJpQixXQURpQixnQkFDakJBLFdBRGlCOztBQUVqQyxRQUFJQyxRQUE0QmhCLFdBQVdlLFdBQVgsRUFBd0JqQixRQUF4QixDQUFoQzs7QUFFQSxXQUFPLHNCQUFjLEVBQUVBLFFBQUYsRUFBZCxFQUE0QmtCLEtBQTVCLENBQVA7QUFDSCIsImZpbGUiOiJicm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2ZpcmVmb3gvY29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmluZE1hdGNoLCBpc01hdGNoVHJ1ZSwgc3BsaXRFc2NhcGVkLCBwYXJzZUNvbmZpZywgZ2V0TW9kZXMsIGdldFBhdGhGcm9tUGFyc2VkTW9kZXMgfSBmcm9tICcuLi8uLi91dGlscy9hcmd1bWVudC1wYXJzaW5nJztcblxuXG5jb25zdCBBVkFJTEFCTEVfTU9ERVMgPSBbJ3VzZXJQcm9maWxlJywgJ2hlYWRsZXNzJ107XG5cbnZhciBjb25maWdDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBoYXNDdXN0b21Qcm9maWxlICh1c2VyQXJncykge1xuICAgIHJldHVybiAhISh1c2VyQXJncy5tYXRjaCgvLVBcXHMvKSB8fCB1c2VyQXJncy5tYXRjaCgvLXByb2ZpbGVcXHMvKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9kZXMgKG1vZGVzU3RyLCB1c2VyQXJncykge1xuICAgIHZhciBwYXJzZWQgICAgICAgID0gc3BsaXRFc2NhcGVkKG1vZGVzU3RyLCAnOicpO1xuICAgIHZhciBwYXRoICAgICAgICAgID0gZ2V0UGF0aEZyb21QYXJzZWRNb2RlcyhwYXJzZWQsIEFWQUlMQUJMRV9NT0RFUyk7XG4gICAgdmFyIGRldGVjdGVkTW9kZXMgPSBnZXRNb2RlcyhwYXJzZWQsIEFWQUlMQUJMRV9NT0RFUyk7XG4gICAgdmFyIG9wdGlvbnNTdHJpbmcgPSBwYXJzZWQuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKS5qb2luKCc6Jyk7XG4gICAgdmFyIG9wdGlvbnMgICAgICAgPSBwYXJzZWQubGVuZ3RoID8gc3BsaXRFc2NhcGVkKG9wdGlvbnNTdHJpbmcsICc7JykgOiBbXTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6ICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgIHVzZXJQcm9maWxlOiAgICAgICAgICAgIGRldGVjdGVkTW9kZXMudXNlclByb2ZpbGUgfHwgaGFzQ3VzdG9tUHJvZmlsZSh1c2VyQXJncyksXG4gICAgICAgIGhlYWRsZXNzOiAgICAgICAgICAgICAgIGRldGVjdGVkTW9kZXMuaGVhZGxlc3MsXG4gICAgICAgIG1hcmlvbmV0dGVQb3J0OiAgICAgICAgIGZpbmRNYXRjaChvcHRpb25zLCAvXm1hcmlvbmV0dGVQb3J0PSguKikvKSxcbiAgICAgICAgZGlzYWJsZU11bHRpcHJvY2Vzc2luZzogaXNNYXRjaFRydWUob3B0aW9ucywgL15kaXNhYmxlTXVsdGlwcm9jZXNzaW5nPSguKikvKVxuICAgIH07XG59XG5cblxuZnVuY3Rpb24gZ2V0TmV3Q29uZmlnIChjb25maWdTdHJpbmcpIHtcbiAgICB2YXIgeyB1c2VyQXJncywgbW9kZXNTdHJpbmcgfSA9IHBhcnNlQ29uZmlnKGNvbmZpZ1N0cmluZyk7XG4gICAgdmFyIG1vZGVzICAgICAgICAgICAgICAgICAgICAgPSBwYXJzZU1vZGVzKG1vZGVzU3RyaW5nLCB1c2VyQXJncyk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHVzZXJBcmdzIH0sIG1vZGVzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZ1N0cmluZykge1xuICAgIGlmICghY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSlcbiAgICAgICAgY29uZmlnQ2FjaGVbY29uZmlnU3RyaW5nXSA9IGdldE5ld0NvbmZpZyhjb25maWdTdHJpbmcpO1xuXG4gICAgcmV0dXJuIGNvbmZpZ0NhY2hlW2NvbmZpZ1N0cmluZ107XG59XG4iXX0=
