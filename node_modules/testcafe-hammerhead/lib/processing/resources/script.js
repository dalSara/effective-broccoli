'use strict';

exports.__esModule = true;

var _resourceProcessorBase = require('./resource-processor-base');

var _resourceProcessorBase2 = _interopRequireDefault(_resourceProcessorBase);

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _script = require('../script');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScriptResourceProcessor = function (_ResourceProcessorBas) {
    _inherits(ScriptResourceProcessor, _ResourceProcessorBas);

    function ScriptResourceProcessor() {
        _classCallCheck(this, ScriptResourceProcessor);

        var _this = _possibleConstructorReturn(this, _ResourceProcessorBas.call(this));

        _this.jsCache = new _lruCache2.default({
            // NOTE: Max cache size is 50 MBytes.
            max: 50 * 1024 * 1024,

            length: function length(n) {
                // NOTE: 1 char ~ 1 byte.
                return n.length;
            }
        });
        return _this;
    }

    ScriptResourceProcessor.prototype.processResource = function processResource(script) {
        if (!script) return script;

        var processedScript = this.jsCache.get(script);

        if (!processedScript) {
            processedScript = (0, _script.processScript)(script, true);
            this.jsCache.set(script, processedScript);
        }

        return processedScript;
    };

    ScriptResourceProcessor.prototype.shouldProcessResource = function shouldProcessResource(ctx) {
        return ctx.contentInfo.isScript;
    };

    return ScriptResourceProcessor;
}(_resourceProcessorBase2.default);

exports.default = new ScriptResourceProcessor();
module.exports = exports['default'];