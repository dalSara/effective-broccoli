'use strict';

exports.__esModule = true;
exports.hasMatch = hasMatch;
exports.findMatch = findMatch;
exports.isMatchTrue = isMatchTrue;
exports.splitEscaped = splitEscaped;
exports.getPathFromParsedModes = getPathFromParsedModes;
exports.getModes = getModes;
exports.parseConfig = parseConfig;

var _lodash = require('lodash');

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CONFIG_TERMINATOR_RE = /(\s+|^)-/;

function hasMatch(array, re) {
    return !!(0, _lodash.find)(array, el => el.match(re));
}

function findMatch(array, re) {
    var element = (0, _lodash.find)(array, el => el.match(re));

    return element ? element.match(re)[1] : '';
}

function isMatchTrue(array, re) {
    var match = findMatch(array, re);

    return match && match !== '0' && match !== 'false';
}

function splitEscaped(str, splitterChar) {
    var result = [''];

    for (var i = 0; i < str.length; i++) {
        if (str[i] === splitterChar) {
            result.push('');
            continue;
        }

        if (str[i] === '\\' && (str[i + 1] === '\\' || str[i + 1] === splitterChar)) i++;

        result[result.length - 1] += str[i];
    }

    return result;
}

function getPathFromParsedModes(modes, availableModes = []) {
    if (!modes.length) return '';

    if (availableModes.some(mode => mode === modes[0])) return '';

    var path = modes.shift();

    if (_osFamily2.default.win && modes.length && path.match(/^[A-Za-z]$/)) path += ':' + modes.shift();

    return path;
}

function getModes(modes, availableModes = []) {
    var result = {};

    availableModes = availableModes.slice();

    availableModes.forEach(key => {
        result[key] = false;
    });

    while (modes.length && availableModes.length) {
        if (modes[0] === availableModes[0]) {
            result[availableModes[0]] = true;

            modes.shift();
        }

        availableModes.shift();
    }

    return result;
}

function parseConfig(str) {
    var configTerminatorMatch = str.match(CONFIG_TERMINATOR_RE);

    if (!configTerminatorMatch) return { modesString: str, userArgs: '' };

    return {
        modesString: str.substr(0, configTerminatorMatch.index),
        userArgs: str.substr(configTerminatorMatch.index + configTerminatorMatch[1].length)
    };
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL3V0aWxzL2FyZ3VtZW50LXBhcnNpbmcuanMiXSwibmFtZXMiOlsiaGFzTWF0Y2giLCJmaW5kTWF0Y2giLCJpc01hdGNoVHJ1ZSIsInNwbGl0RXNjYXBlZCIsImdldFBhdGhGcm9tUGFyc2VkTW9kZXMiLCJnZXRNb2RlcyIsInBhcnNlQ29uZmlnIiwiQ09ORklHX1RFUk1JTkFUT1JfUkUiLCJhcnJheSIsInJlIiwiZWwiLCJtYXRjaCIsImVsZW1lbnQiLCJzdHIiLCJzcGxpdHRlckNoYXIiLCJyZXN1bHQiLCJpIiwibGVuZ3RoIiwicHVzaCIsIm1vZGVzIiwiYXZhaWxhYmxlTW9kZXMiLCJzb21lIiwibW9kZSIsInBhdGgiLCJzaGlmdCIsIk9TIiwid2luIiwic2xpY2UiLCJmb3JFYWNoIiwia2V5IiwiY29uZmlnVGVybWluYXRvck1hdGNoIiwibW9kZXNTdHJpbmciLCJ1c2VyQXJncyIsInN1YnN0ciIsImluZGV4Il0sIm1hcHBpbmdzIjoiOzs7UUFNZ0JBLFEsR0FBQUEsUTtRQUlBQyxTLEdBQUFBLFM7UUFNQUMsVyxHQUFBQSxXO1FBTUFDLFksR0FBQUEsWTtRQWtCQUMsc0IsR0FBQUEsc0I7UUFlQUMsUSxHQUFBQSxRO1FBc0JBQyxXLEdBQUFBLFc7O0FBN0VoQjs7QUFDQTs7Ozs7O0FBR0EsTUFBTUMsdUJBQTJCLFVBQWpDOztBQUVPLFNBQVNQLFFBQVQsQ0FBbUJRLEtBQW5CLEVBQTBCQyxFQUExQixFQUE4QjtBQUNqQyxXQUFPLENBQUMsQ0FBQyxrQkFBWUQsS0FBWixFQUFtQkUsTUFBTUEsR0FBR0MsS0FBSCxDQUFTRixFQUFULENBQXpCLENBQVQ7QUFDSDs7QUFFTSxTQUFTUixTQUFULENBQW9CTyxLQUFwQixFQUEyQkMsRUFBM0IsRUFBK0I7QUFDbEMsUUFBSUcsVUFBVSxrQkFBWUosS0FBWixFQUFtQkUsTUFBTUEsR0FBR0MsS0FBSCxDQUFTRixFQUFULENBQXpCLENBQWQ7O0FBRUEsV0FBT0csVUFBVUEsUUFBUUQsS0FBUixDQUFjRixFQUFkLEVBQWtCLENBQWxCLENBQVYsR0FBaUMsRUFBeEM7QUFDSDs7QUFFTSxTQUFTUCxXQUFULENBQXNCTSxLQUF0QixFQUE2QkMsRUFBN0IsRUFBaUM7QUFDcEMsUUFBSUUsUUFBUVYsVUFBVU8sS0FBVixFQUFpQkMsRUFBakIsQ0FBWjs7QUFFQSxXQUFPRSxTQUFTQSxVQUFVLEdBQW5CLElBQTBCQSxVQUFVLE9BQTNDO0FBQ0g7O0FBRU0sU0FBU1IsWUFBVCxDQUF1QlUsR0FBdkIsRUFBNEJDLFlBQTVCLEVBQTBDO0FBQzdDLFFBQUlDLFNBQVMsQ0FBQyxFQUFELENBQWI7O0FBRUEsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILElBQUlJLE1BQXhCLEVBQWdDRCxHQUFoQyxFQUFxQztBQUNqQyxZQUFJSCxJQUFJRyxDQUFKLE1BQVdGLFlBQWYsRUFBNkI7QUFDekJDLG1CQUFPRyxJQUFQLENBQVksRUFBWjtBQUNBO0FBQ0g7O0FBRUQsWUFBSUwsSUFBSUcsQ0FBSixNQUFXLElBQVgsS0FBb0JILElBQUlHLElBQUksQ0FBUixNQUFlLElBQWYsSUFBdUJILElBQUtHLElBQUksQ0FBVCxNQUFnQkYsWUFBM0QsQ0FBSixFQUNJRTs7QUFFSkQsZUFBT0EsT0FBT0UsTUFBUCxHQUFnQixDQUF2QixLQUE2QkosSUFBSUcsQ0FBSixDQUE3QjtBQUNIOztBQUVELFdBQU9ELE1BQVA7QUFDSDs7QUFFTSxTQUFTWCxzQkFBVCxDQUFpQ2UsS0FBakMsRUFBd0NDLGlCQUFpQixFQUF6RCxFQUE2RDtBQUNoRSxRQUFJLENBQUNELE1BQU1GLE1BQVgsRUFDSSxPQUFPLEVBQVA7O0FBRUosUUFBSUcsZUFBZUMsSUFBZixDQUFvQkMsUUFBUUEsU0FBU0gsTUFBTSxDQUFOLENBQXJDLENBQUosRUFDSSxPQUFPLEVBQVA7O0FBRUosUUFBSUksT0FBT0osTUFBTUssS0FBTixFQUFYOztBQUVBLFFBQUlDLG1CQUFHQyxHQUFILElBQVVQLE1BQU1GLE1BQWhCLElBQTBCTSxLQUFLWixLQUFMLENBQVcsWUFBWCxDQUE5QixFQUNJWSxRQUFRLE1BQU1KLE1BQU1LLEtBQU4sRUFBZDs7QUFFSixXQUFPRCxJQUFQO0FBQ0g7O0FBRU0sU0FBU2xCLFFBQVQsQ0FBbUJjLEtBQW5CLEVBQTBCQyxpQkFBaUIsRUFBM0MsRUFBK0M7QUFDbEQsUUFBSUwsU0FBUyxFQUFiOztBQUVBSyxxQkFBaUJBLGVBQWVPLEtBQWYsRUFBakI7O0FBRUFQLG1CQUFlUSxPQUFmLENBQXVCQyxPQUFPO0FBQzFCZCxlQUFPYyxHQUFQLElBQWMsS0FBZDtBQUNILEtBRkQ7O0FBSUEsV0FBT1YsTUFBTUYsTUFBTixJQUFnQkcsZUFBZUgsTUFBdEMsRUFBOEM7QUFDMUMsWUFBSUUsTUFBTSxDQUFOLE1BQWFDLGVBQWUsQ0FBZixDQUFqQixFQUFvQztBQUNoQ0wsbUJBQU9LLGVBQWUsQ0FBZixDQUFQLElBQTRCLElBQTVCOztBQUVBRCxrQkFBTUssS0FBTjtBQUNIOztBQUVESix1QkFBZUksS0FBZjtBQUNIOztBQUVELFdBQU9ULE1BQVA7QUFDSDs7QUFFTSxTQUFTVCxXQUFULENBQXNCTyxHQUF0QixFQUEyQjtBQUM5QixRQUFJaUIsd0JBQXdCakIsSUFBSUYsS0FBSixDQUFVSixvQkFBVixDQUE1Qjs7QUFFQSxRQUFJLENBQUN1QixxQkFBTCxFQUNJLE9BQU8sRUFBRUMsYUFBYWxCLEdBQWYsRUFBb0JtQixVQUFVLEVBQTlCLEVBQVA7O0FBRUosV0FBTztBQUNIRCxxQkFBYWxCLElBQUlvQixNQUFKLENBQVcsQ0FBWCxFQUFjSCxzQkFBc0JJLEtBQXBDLENBRFY7QUFFSEYsa0JBQWFuQixJQUFJb0IsTUFBSixDQUFXSCxzQkFBc0JJLEtBQXRCLEdBQThCSixzQkFBc0IsQ0FBdEIsRUFBeUJiLE1BQWxFO0FBRlYsS0FBUDtBQUlIIiwiZmlsZSI6ImJyb3dzZXIvcHJvdmlkZXIvdXRpbHMvYXJndW1lbnQtcGFyc2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmQgYXMgZmluZEVsZW1lbnQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5cblxuY29uc3QgQ09ORklHX1RFUk1JTkFUT1JfUkUgICAgID0gLyhcXHMrfF4pLS87XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNNYXRjaCAoYXJyYXksIHJlKSB7XG4gICAgcmV0dXJuICEhZmluZEVsZW1lbnQoYXJyYXksIGVsID0+IGVsLm1hdGNoKHJlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kTWF0Y2ggKGFycmF5LCByZSkge1xuICAgIHZhciBlbGVtZW50ID0gZmluZEVsZW1lbnQoYXJyYXksIGVsID0+IGVsLm1hdGNoKHJlKSk7XG5cbiAgICByZXR1cm4gZWxlbWVudCA/IGVsZW1lbnQubWF0Y2gocmUpWzFdIDogJyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoVHJ1ZSAoYXJyYXksIHJlKSB7XG4gICAgdmFyIG1hdGNoID0gZmluZE1hdGNoKGFycmF5LCByZSk7XG5cbiAgICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2ggIT09ICcwJyAmJiBtYXRjaCAhPT0gJ2ZhbHNlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0RXNjYXBlZCAoc3RyLCBzcGxpdHRlckNoYXIpIHtcbiAgICB2YXIgcmVzdWx0ID0gWycnXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChzdHJbaV0gPT09IHNwbGl0dGVyQ2hhcikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyW2ldID09PSAnXFxcXCcgJiYgKHN0cltpICsgMV0gPT09ICdcXFxcJyB8fCBzdHIgW2kgKyAxXSA9PT0gc3BsaXR0ZXJDaGFyKSlcbiAgICAgICAgICAgIGkrKztcblxuICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IHN0cltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aEZyb21QYXJzZWRNb2RlcyAobW9kZXMsIGF2YWlsYWJsZU1vZGVzID0gW10pIHtcbiAgICBpZiAoIW1vZGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuICcnO1xuXG4gICAgaWYgKGF2YWlsYWJsZU1vZGVzLnNvbWUobW9kZSA9PiBtb2RlID09PSBtb2Rlc1swXSkpXG4gICAgICAgIHJldHVybiAnJztcblxuICAgIHZhciBwYXRoID0gbW9kZXMuc2hpZnQoKTtcblxuICAgIGlmIChPUy53aW4gJiYgbW9kZXMubGVuZ3RoICYmIHBhdGgubWF0Y2goL15bQS1aYS16XSQvKSlcbiAgICAgICAgcGF0aCArPSAnOicgKyBtb2Rlcy5zaGlmdCgpO1xuXG4gICAgcmV0dXJuIHBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlcyAobW9kZXMsIGF2YWlsYWJsZU1vZGVzID0gW10pIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBhdmFpbGFibGVNb2RlcyA9IGF2YWlsYWJsZU1vZGVzLnNsaWNlKCk7XG5cbiAgICBhdmFpbGFibGVNb2Rlcy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICB3aGlsZSAobW9kZXMubGVuZ3RoICYmIGF2YWlsYWJsZU1vZGVzLmxlbmd0aCkge1xuICAgICAgICBpZiAobW9kZXNbMF0gPT09IGF2YWlsYWJsZU1vZGVzWzBdKSB7XG4gICAgICAgICAgICByZXN1bHRbYXZhaWxhYmxlTW9kZXNbMF1dID0gdHJ1ZTtcblxuICAgICAgICAgICAgbW9kZXMuc2hpZnQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF2YWlsYWJsZU1vZGVzLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29uZmlnIChzdHIpIHtcbiAgICB2YXIgY29uZmlnVGVybWluYXRvck1hdGNoID0gc3RyLm1hdGNoKENPTkZJR19URVJNSU5BVE9SX1JFKTtcblxuICAgIGlmICghY29uZmlnVGVybWluYXRvck1hdGNoKVxuICAgICAgICByZXR1cm4geyBtb2Rlc1N0cmluZzogc3RyLCB1c2VyQXJnczogJycgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG1vZGVzU3RyaW5nOiBzdHIuc3Vic3RyKDAsIGNvbmZpZ1Rlcm1pbmF0b3JNYXRjaC5pbmRleCksXG4gICAgICAgIHVzZXJBcmdzOiAgICBzdHIuc3Vic3RyKGNvbmZpZ1Rlcm1pbmF0b3JNYXRjaC5pbmRleCArIGNvbmZpZ1Rlcm1pbmF0b3JNYXRjaFsxXS5sZW5ndGgpXG4gICAgfTtcbn1cbiJdfQ==
