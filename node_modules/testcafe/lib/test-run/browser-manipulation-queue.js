'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _utils = require('./commands/utils');

var _type = require('./commands/type');

var _type2 = _interopRequireDefault(_type);

var _warningMessage = require('../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

var _testRun = require('../errors/test-run/');

var _type3 = require('../errors/test-run/type');

var _type4 = _interopRequireDefault(_type3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BrowserManipulationQueue {
    constructor(browserConnection, screenshotCapturer, warningLog) {
        this.commands = [];
        this.browserId = browserConnection.id;
        this.browserProvider = browserConnection.provider;
        this.screenshotCapturer = screenshotCapturer;
        this.warningLog = warningLog;
    }

    _resizeWindow(width, height, currentWidth, currentHeight) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var canResizeWindow = yield _this.browserProvider.canResizeWindowToDimensions(_this.browserId, width, height);

            if (!canResizeWindow) throw new _testRun.WindowDimensionsOverflowError();

            try {
                return yield _this.browserProvider.resizeWindow(_this.browserId, width, height, currentWidth, currentHeight);
            } catch (err) {
                _this.warningLog.addWarning(_warningMessage2.default.resizeError, err.message);
                return null;
            }
        })();
    }

    _resizeWindowToFitDevice(device, portrait, currentWidth, currentHeight) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var _getViewportSize = (0, _testcafeBrowserTools.getViewportSize)(device),
                landscapeWidth = _getViewportSize.landscapeWidth,
                portraitWidth = _getViewportSize.portraitWidth;

            var width = portrait ? portraitWidth : landscapeWidth;
            var height = portrait ? landscapeWidth : portraitWidth;

            return yield _this2._resizeWindow(width, height, currentWidth, currentHeight);
        })();
    }

    _maximizeWindow() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            try {
                return yield _this3.browserProvider.maximizeWindow(_this3.browserId);
            } catch (err) {
                _this3.warningLog.addWarning(_warningMessage2.default.maximizeError, err.message);
                return null;
            }
        })();
    }

    _takeScreenshot(capture) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this4.screenshotCapturer.enabled) {
                _this4.warningLog.addWarning(_warningMessage2.default.screenshotsPathNotSpecified);
                return null;
            }

            try {
                return yield capture();
            } catch (err) {
                if (err.type === _type4.default.invalidElementScreenshotDimensionsError) throw err;

                _this4.warningLog.addWarning(_warningMessage2.default.screenshotError, err.stack);
                return null;
            }
        })();
    }

    executePendingManipulation(driverMsg) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var command = _this5.commands.shift();

            switch (command.type) {
                case _type2.default.takeElementScreenshot:
                case _type2.default.takeScreenshot:
                    return yield _this5._takeScreenshot(function () {
                        return _this5.screenshotCapturer.captureAction({
                            customPath: command.path,
                            pageDimensions: driverMsg.pageDimensions,
                            cropDimensions: driverMsg.cropDimensions,
                            markSeed: command.markSeed
                        });
                    });

                case _type2.default.takeScreenshotOnFail:
                    return yield _this5._takeScreenshot(function () {
                        return _this5.screenshotCapturer.captureError({
                            pageDimensions: driverMsg.pageDimensions,
                            markSeed: command.markSeed
                        });
                    });

                case _type2.default.resizeWindow:
                    return yield _this5._resizeWindow(command.width, command.height, driverMsg.pageDimensions.innerWidth, driverMsg.pageDimensions.innerHeight);

                case _type2.default.resizeWindowToFitDevice:
                    return yield _this5._resizeWindowToFitDevice(command.device, command.options.portraitOrientation, driverMsg.pageDimensions.innerWidth, driverMsg.pageDimensions.innerHeight);

                case _type2.default.maximizeWindow:
                    return yield _this5._maximizeWindow();
            }

            return null;
        })();
    }

    push(command) {
        this.commands.push(command);
    }

    removeAllNonServiceManipulations() {
        this.commands = this.commands.filter(command => (0, _utils.isServiceCommand)(command));
    }
}
exports.default = BrowserManipulationQueue;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
