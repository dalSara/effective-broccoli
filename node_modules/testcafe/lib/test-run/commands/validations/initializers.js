'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

exports.initUploadSelector = initUploadSelector;
exports.initSelector = initSelector;

var _selectorBuilder = require('../../../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _testRun = require('../../../errors/test-run');

var _runtime = require('../../../errors/runtime');

var _observation = require('../observation');

var _executeJsExpression = require('../../execute-js-expression');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initUploadSelector(name, val, initOptions) {
    initOptions.skipVisibilityCheck = true;

    return initSelector(name, val, initOptions);
}

function initSelector(name, val, _ref) {
    let testRun = _ref.testRun,
        options = (0, _objectWithoutProperties3.default)(_ref, ['testRun']);

    if (val instanceof _observation.ExecuteSelectorCommand) return val;

    try {
        if ((0, _utils.isJSExpression)(val)) val = (0, _executeJsExpression.executeJsExpression)(val.value, testRun, options);

        const skipVisibilityCheck = options.skipVisibilityCheck,
              builderOptions = (0, _objectWithoutProperties3.default)(options, ['skipVisibilityCheck']);


        const builder = new _selectorBuilder2.default(val, (0, _extends3.default)({
            visibilityCheck: !skipVisibilityCheck
        }, builderOptions), { instantiation: 'Selector' });

        return builder.getCommand([]);
    } catch (err) {
        const msg = err.constructor === _runtime.APIError ? err.rawMessage : err.message;

        throw new _testRun.ActionSelectorError(name, msg);
    }
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy92YWxpZGF0aW9ucy9pbml0aWFsaXplcnMuanMiXSwibmFtZXMiOlsiaW5pdFVwbG9hZFNlbGVjdG9yIiwiaW5pdFNlbGVjdG9yIiwibmFtZSIsInZhbCIsImluaXRPcHRpb25zIiwic2tpcFZpc2liaWxpdHlDaGVjayIsInRlc3RSdW4iLCJvcHRpb25zIiwiRXhlY3V0ZVNlbGVjdG9yQ29tbWFuZCIsInZhbHVlIiwiYnVpbGRlck9wdGlvbnMiLCJidWlsZGVyIiwiU2VsZWN0b3JCdWlsZGVyIiwidmlzaWJpbGl0eUNoZWNrIiwiaW5zdGFudGlhdGlvbiIsImdldENvbW1hbmQiLCJlcnIiLCJtc2ciLCJjb25zdHJ1Y3RvciIsIkFQSUVycm9yIiwicmF3TWVzc2FnZSIsIm1lc3NhZ2UiLCJBY3Rpb25TZWxlY3RvckVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7UUFPZ0JBLGtCLEdBQUFBLGtCO1FBTUFDLFksR0FBQUEsWTs7QUFiaEI7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLFNBQVNELGtCQUFULENBQTZCRSxJQUE3QixFQUFtQ0MsR0FBbkMsRUFBd0NDLFdBQXhDLEVBQXFEO0FBQ3hEQSxnQkFBWUMsbUJBQVosR0FBa0MsSUFBbEM7O0FBRUEsV0FBT0osYUFBYUMsSUFBYixFQUFtQkMsR0FBbkIsRUFBd0JDLFdBQXhCLENBQVA7QUFDSDs7QUFFTSxTQUFTSCxZQUFULENBQXVCQyxJQUF2QixFQUE2QkMsR0FBN0IsUUFBMkQ7QUFBQSxRQUF2QkcsT0FBdUIsUUFBdkJBLE9BQXVCO0FBQUEsUUFBWEMsT0FBVzs7QUFDOUQsUUFBSUosZUFBZUssbUNBQW5CLEVBQ0ksT0FBT0wsR0FBUDs7QUFFSixRQUFJO0FBQ0EsWUFBSSwyQkFBZUEsR0FBZixDQUFKLEVBQ0lBLE1BQU0sOENBQW9CQSxJQUFJTSxLQUF4QixFQUErQkgsT0FBL0IsRUFBd0NDLE9BQXhDLENBQU47O0FBRkosY0FJUUYsbUJBSlIsR0FJbURFLE9BSm5ELENBSVFGLG1CQUpSO0FBQUEsY0FJZ0NLLGNBSmhDLDBDQUltREgsT0FKbkQ7OztBQU1BLGNBQU1JLFVBQVUsSUFBSUMseUJBQUosQ0FBb0JULEdBQXBCO0FBQ1pVLDZCQUFpQixDQUFDUjtBQUROLFdBRVRLLGNBRlMsR0FHYixFQUFFSSxlQUFlLFVBQWpCLEVBSGEsQ0FBaEI7O0FBS0EsZUFBT0gsUUFBUUksVUFBUixDQUFtQixFQUFuQixDQUFQO0FBQ0gsS0FaRCxDQWFBLE9BQU9DLEdBQVAsRUFBWTtBQUNSLGNBQU1DLE1BQU1ELElBQUlFLFdBQUosS0FBb0JDLGlCQUFwQixHQUErQkgsSUFBSUksVUFBbkMsR0FBZ0RKLElBQUlLLE9BQWhFOztBQUVBLGNBQU0sSUFBSUMsNEJBQUosQ0FBd0JwQixJQUF4QixFQUE4QmUsR0FBOUIsQ0FBTjtBQUNIO0FBQ0oiLCJmaWxlIjoidGVzdC1ydW4vY29tbWFuZHMvdmFsaWRhdGlvbnMvaW5pdGlhbGl6ZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlbGVjdG9yQnVpbGRlciBmcm9tICcuLi8uLi8uLi9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9ycy9zZWxlY3Rvci1idWlsZGVyJztcbmltcG9ydCB7IEFjdGlvblNlbGVjdG9yRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvdGVzdC1ydW4nO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgeyBFeGVjdXRlU2VsZWN0b3JDb21tYW5kIH0gZnJvbSAnLi4vb2JzZXJ2YXRpb24nO1xuaW1wb3J0IHsgZXhlY3V0ZUpzRXhwcmVzc2lvbiB9IGZyb20gJy4uLy4uL2V4ZWN1dGUtanMtZXhwcmVzc2lvbic7XG5pbXBvcnQgeyBpc0pTRXhwcmVzc2lvbiB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRVcGxvYWRTZWxlY3RvciAobmFtZSwgdmFsLCBpbml0T3B0aW9ucykge1xuICAgIGluaXRPcHRpb25zLnNraXBWaXNpYmlsaXR5Q2hlY2sgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGluaXRTZWxlY3RvcihuYW1lLCB2YWwsIGluaXRPcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTZWxlY3RvciAobmFtZSwgdmFsLCB7IHRlc3RSdW4sIC4uLm9wdGlvbnMgfSkge1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBFeGVjdXRlU2VsZWN0b3JDb21tYW5kKVxuICAgICAgICByZXR1cm4gdmFsO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzSlNFeHByZXNzaW9uKHZhbCkpXG4gICAgICAgICAgICB2YWwgPSBleGVjdXRlSnNFeHByZXNzaW9uKHZhbC52YWx1ZSwgdGVzdFJ1biwgb3B0aW9ucyk7XG5cbiAgICAgICAgY29uc3QgeyBza2lwVmlzaWJpbGl0eUNoZWNrLCAuLi5idWlsZGVyT3B0aW9ucyB9ID0gb3B0aW9ucztcblxuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IFNlbGVjdG9yQnVpbGRlcih2YWwsIHtcbiAgICAgICAgICAgIHZpc2liaWxpdHlDaGVjazogIXNraXBWaXNpYmlsaXR5Q2hlY2ssXG4gICAgICAgICAgICAuLi5idWlsZGVyT3B0aW9uc1xuICAgICAgICB9LCB7IGluc3RhbnRpYXRpb246ICdTZWxlY3RvcicgfSk7XG5cbiAgICAgICAgcmV0dXJuIGJ1aWxkZXIuZ2V0Q29tbWFuZChbXSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyLmNvbnN0cnVjdG9yID09PSBBUElFcnJvciA/IGVyci5yYXdNZXNzYWdlIDogZXJyLm1lc3NhZ2U7XG5cbiAgICAgICAgdGhyb3cgbmV3IEFjdGlvblNlbGVjdG9yRXJyb3IobmFtZSwgbXNnKTtcbiAgICB9XG59XG4iXX0=
