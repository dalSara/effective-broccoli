'use strict';

exports.__esModule = true;

var _baseDomAdapter = require('./base-dom-adapter');

var _baseDomAdapter2 = _interopRequireDefault(_baseDomAdapter);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _url = require('../../utils/url');

var urlUtils = _interopRequireWildcard(_url);

var _parse = require('../../utils/parse5');

var parse5Utils = _interopRequireWildcard(_parse);

var _namespaces = require('./namespaces');

var _index = require('./index');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint hammerhead/proto-methods: 0 */


var Parse5DomAdapter = function (_BaseDomAdapter) {
    _inherits(Parse5DomAdapter, _BaseDomAdapter);

    function Parse5DomAdapter(isIframe, crossDomainPort) {
        _classCallCheck(this, Parse5DomAdapter);

        var _this = _possibleConstructorReturn(this, _BaseDomAdapter.call(this));

        _this.isIframe = isIframe;
        _this.crossDomainPort = crossDomainPort;
        return _this;
    }

    Parse5DomAdapter.prototype.removeAttr = function removeAttr(el, attr) {
        parse5Utils.removeAttr(el, attr);
    };

    Parse5DomAdapter.prototype.getAttr = function getAttr(el, attr) {
        return parse5Utils.getAttr(el, attr);
    };

    Parse5DomAdapter.prototype.getClassName = function getClassName(el) {
        return this.getAttr(el, 'class') || '';
    };

    Parse5DomAdapter.prototype.hasAttr = function hasAttr(el, attr) {
        return this.getAttr(el, attr) !== null;
    };

    Parse5DomAdapter.prototype.isSVGElement = function isSVGElement(el) {
        return el.namespaceURI === _namespaces.SVG_NAMESPACE;
    };

    Parse5DomAdapter.prototype.hasEventHandler = function hasEventHandler(el) {
        for (var i = 0; i < el.attrs.length; i++) {
            if (this.EVENTS.includes(el.attrs[i].name)) return true;
        }

        return false;
    };

    Parse5DomAdapter.prototype.getTagName = function getTagName(el) {
        return (el.tagName || '').toLowerCase();
    };

    Parse5DomAdapter.prototype.setAttr = function setAttr(el, attr, value) {
        return parse5Utils.setAttr(el, attr, value);
    };

    Parse5DomAdapter.prototype.setScriptContent = function setScriptContent(script, content) {
        script.childNodes = [parse5Utils.createTextNode(content, script)];
    };

    Parse5DomAdapter.prototype.getScriptContent = function getScriptContent(script) {
        return script.childNodes.length ? script.childNodes[0].value : '';
    };

    Parse5DomAdapter.prototype.getStyleContent = function getStyleContent(style) {
        return style.childNodes.length ? style.childNodes[0].value : '';
    };

    Parse5DomAdapter.prototype.setStyleContent = function setStyleContent(style, content) {
        style.childNodes = [parse5Utils.createTextNode(content, style)];
    };

    Parse5DomAdapter.prototype.needToProcessContent = function needToProcessContent() {
        return true;
    };

    Parse5DomAdapter.prototype.needToProcessUrl = function needToProcessUrl(tagName, target) {
        if ((0, _index.isIframeFlagTag)(tagName) && target === '_parent') return false;

        return true;
    };

    Parse5DomAdapter.prototype.attachEventEmitter = function attachEventEmitter(domProcessor) {
        var eventEmitter = new _events2.default.EventEmitter();

        domProcessor.on = eventEmitter.on.bind(eventEmitter);
        domProcessor.off = eventEmitter.removeListener.bind(eventEmitter);
        domProcessor.emit = eventEmitter.emit.bind(eventEmitter);
    };

    Parse5DomAdapter.prototype.hasIframeParent = function hasIframeParent() {
        return this.isIframe;
    };

    Parse5DomAdapter.prototype.getCrossDomainPort = function getCrossDomainPort() {
        return this.crossDomainPort;
    };

    Parse5DomAdapter.prototype.getProxyUrl = function getProxyUrl() {
        return urlUtils.getProxyUrl.apply(urlUtils, arguments);
    };

    Parse5DomAdapter.prototype.isTopParentIframe = function isTopParentIframe() {
        return false;
    };

    Parse5DomAdapter.prototype.sameOriginCheck = function sameOriginCheck(location, checkedUrl) {
        return urlUtils.sameOriginCheck(location, checkedUrl);
    };

    Parse5DomAdapter.prototype.isExistingTarget = function isExistingTarget() {
        return false;
    };

    return Parse5DomAdapter;
}(_baseDomAdapter2.default);

exports.default = Parse5DomAdapter;
module.exports = exports['default'];