'use strict';

exports.__esModule = true;

var _stream = require('stream');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IncomingMessageMock = function (_Readable) {
    _inherits(IncomingMessageMock, _Readable);

    function IncomingMessageMock(init) {
        _classCallCheck(this, IncomingMessageMock);

        var _this = _possibleConstructorReturn(this, _Readable.call(this));

        _this.headers = init.headers;
        _this.trailers = init.trailers;
        _this.statusCode = init.statusCode;
        _this._body = _this._getBody(init._body);
        return _this;
    }

    IncomingMessageMock.prototype._read = function _read() {
        this.push(this._body);
        this._body = null;
    };

    IncomingMessageMock.prototype._getBody = function _getBody(body) {
        if (!body) return Buffer.alloc(0);else if (body instanceof Buffer) return body;

        var bodyStr = typeof body === 'object' ? JSON.stringify(body) : String(body);

        return Buffer.from(bodyStr);
    };

    return IncomingMessageMock;
}(_stream.Readable);

exports.default = IncomingMessageMock;
module.exports = exports['default'];