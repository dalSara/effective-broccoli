'use strict';

exports.__esModule = true;
exports.executeJsExpression = executeJsExpression;

var _vm = require('vm');

var _selectorBuilder = require('../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _clientFunctionBuilder = require('../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var contextsInfo = [];

function getContextInfo(testRun) {
    var contextInfo = contextsInfo.find(info => info.testRun === testRun);

    if (!contextInfo) {
        contextInfo = { testRun, context: createExecutionContext(testRun), options: {} };

        contextsInfo.push(contextInfo);
    }

    return contextInfo;
}

function getContext(testRun, options = {}) {
    var contextInfo = getContextInfo(testRun);

    contextInfo.options = options;

    return contextInfo.context;
}

function createExecutionContext(testRun) {
    var sandbox = {
        Selector: (fn, options = {}) => {
            var _getContextInfo$optio = getContextInfo(testRun).options;
            const skipVisibilityCheck = _getContextInfo$optio.skipVisibilityCheck,
                  collectionMode = _getContextInfo$optio.collectionMode;


            if (skipVisibilityCheck) options.visibilityCheck = false;

            if (testRun && testRun.id) options.boundTestRun = testRun;

            if (collectionMode) options.collectionMode = collectionMode;

            const builder = new _selectorBuilder2.default(fn, options, { instantiation: 'Selector' });

            return builder.getFunction();
        },

        ClientFunction: (fn, options = {}) => {
            if (testRun && testRun.id) options.boundTestRun = testRun;

            const builder = new _clientFunctionBuilder2.default(fn, options, { instantiation: 'ClientFunction' });

            return builder.getFunction();
        }
    };

    return (0, _vm.createContext)(sandbox);
}

function executeJsExpression(expression, testRun, options) {
    const context = getContext(testRun, options);

    return (0, _vm.runInContext)(expression, context, { displayErrors: false });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0LXJ1bi9leGVjdXRlLWpzLWV4cHJlc3Npb24uanMiXSwibmFtZXMiOlsiZXhlY3V0ZUpzRXhwcmVzc2lvbiIsImNvbnRleHRzSW5mbyIsImdldENvbnRleHRJbmZvIiwidGVzdFJ1biIsImNvbnRleHRJbmZvIiwiZmluZCIsImluZm8iLCJjb250ZXh0IiwiY3JlYXRlRXhlY3V0aW9uQ29udGV4dCIsIm9wdGlvbnMiLCJwdXNoIiwiZ2V0Q29udGV4dCIsInNhbmRib3giLCJTZWxlY3RvciIsImZuIiwic2tpcFZpc2liaWxpdHlDaGVjayIsImNvbGxlY3Rpb25Nb2RlIiwidmlzaWJpbGl0eUNoZWNrIiwiaWQiLCJib3VuZFRlc3RSdW4iLCJidWlsZGVyIiwiU2VsZWN0b3JCdWlsZGVyIiwiaW5zdGFudGlhdGlvbiIsImdldEZ1bmN0aW9uIiwiQ2xpZW50RnVuY3Rpb24iLCJDbGllbnRGdW5jdGlvbkJ1aWxkZXIiLCJleHByZXNzaW9uIiwiZGlzcGxheUVycm9ycyJdLCJtYXBwaW5ncyI6Ijs7O1FBMERnQkEsbUIsR0FBQUEsbUI7O0FBMURoQjs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQyxlQUFlLEVBQW5COztBQUVBLFNBQVNDLGNBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzlCLFFBQUlDLGNBQWNILGFBQWFJLElBQWIsQ0FBa0JDLFFBQVFBLEtBQUtILE9BQUwsS0FBaUJBLE9BQTNDLENBQWxCOztBQUVBLFFBQUksQ0FBQ0MsV0FBTCxFQUFrQjtBQUNkQSxzQkFBYyxFQUFFRCxPQUFGLEVBQVdJLFNBQVNDLHVCQUF1QkwsT0FBdkIsQ0FBcEIsRUFBcURNLFNBQVMsRUFBOUQsRUFBZDs7QUFFQVIscUJBQWFTLElBQWIsQ0FBa0JOLFdBQWxCO0FBQ0g7O0FBRUQsV0FBT0EsV0FBUDtBQUNIOztBQUVELFNBQVNPLFVBQVQsQ0FBcUJSLE9BQXJCLEVBQThCTSxVQUFVLEVBQXhDLEVBQTRDO0FBQ3hDLFFBQUlMLGNBQWNGLGVBQWVDLE9BQWYsQ0FBbEI7O0FBRUFDLGdCQUFZSyxPQUFaLEdBQXNCQSxPQUF0Qjs7QUFFQSxXQUFPTCxZQUFZRyxPQUFuQjtBQUNIOztBQUVELFNBQVNDLHNCQUFULENBQWlDTCxPQUFqQyxFQUEwQztBQUN0QyxRQUFJUyxVQUFVO0FBQ1ZDLGtCQUFVLENBQUNDLEVBQUQsRUFBS0wsVUFBVSxFQUFmLEtBQXNCO0FBQUEsd0NBQ29CUCxlQUFlQyxPQUFmLEVBQXdCTSxPQUQ1QztBQUFBLGtCQUNwQk0sbUJBRG9CLHlCQUNwQkEsbUJBRG9CO0FBQUEsa0JBQ0NDLGNBREQseUJBQ0NBLGNBREQ7OztBQUc1QixnQkFBSUQsbUJBQUosRUFDSU4sUUFBUVEsZUFBUixHQUEwQixLQUExQjs7QUFFSixnQkFBSWQsV0FBV0EsUUFBUWUsRUFBdkIsRUFDSVQsUUFBUVUsWUFBUixHQUF1QmhCLE9BQXZCOztBQUVKLGdCQUFJYSxjQUFKLEVBQ0lQLFFBQVFPLGNBQVIsR0FBeUJBLGNBQXpCOztBQUVKLGtCQUFNSSxVQUFVLElBQUlDLHlCQUFKLENBQW9CUCxFQUFwQixFQUF3QkwsT0FBeEIsRUFBaUMsRUFBRWEsZUFBZSxVQUFqQixFQUFqQyxDQUFoQjs7QUFFQSxtQkFBT0YsUUFBUUcsV0FBUixFQUFQO0FBQ0gsU0FoQlM7O0FBa0JWQyx3QkFBZ0IsQ0FBQ1YsRUFBRCxFQUFLTCxVQUFVLEVBQWYsS0FBc0I7QUFDbEMsZ0JBQUlOLFdBQVdBLFFBQVFlLEVBQXZCLEVBQ0lULFFBQVFVLFlBQVIsR0FBdUJoQixPQUF2Qjs7QUFFSixrQkFBTWlCLFVBQVUsSUFBSUssK0JBQUosQ0FBMEJYLEVBQTFCLEVBQThCTCxPQUE5QixFQUF1QyxFQUFFYSxlQUFlLGdCQUFqQixFQUF2QyxDQUFoQjs7QUFFQSxtQkFBT0YsUUFBUUcsV0FBUixFQUFQO0FBQ0g7QUF6QlMsS0FBZDs7QUE0QkEsV0FBTyx1QkFBY1gsT0FBZCxDQUFQO0FBQ0g7O0FBRU0sU0FBU1osbUJBQVQsQ0FBOEIwQixVQUE5QixFQUEwQ3ZCLE9BQTFDLEVBQW1ETSxPQUFuRCxFQUE0RDtBQUMvRCxVQUFNRixVQUFVSSxXQUFXUixPQUFYLEVBQW9CTSxPQUFwQixDQUFoQjs7QUFFQSxXQUFPLHNCQUFhaUIsVUFBYixFQUF5Qm5CLE9BQXpCLEVBQWtDLEVBQUVvQixlQUFlLEtBQWpCLEVBQWxDLENBQVA7QUFDSCIsImZpbGUiOiJ0ZXN0LXJ1bi9leGVjdXRlLWpzLWV4cHJlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBydW5JbkNvbnRleHQgfSBmcm9tICd2bSc7XG5pbXBvcnQgU2VsZWN0b3JCdWlsZGVyIGZyb20gJy4uL2NsaWVudC1mdW5jdGlvbnMvc2VsZWN0b3JzL3NlbGVjdG9yLWJ1aWxkZXInO1xuaW1wb3J0IENsaWVudEZ1bmN0aW9uQnVpbGRlciBmcm9tICcuLi9jbGllbnQtZnVuY3Rpb25zL2NsaWVudC1mdW5jdGlvbi1idWlsZGVyJztcblxudmFyIGNvbnRleHRzSW5mbyA9IFtdO1xuXG5mdW5jdGlvbiBnZXRDb250ZXh0SW5mbyAodGVzdFJ1bikge1xuICAgIHZhciBjb250ZXh0SW5mbyA9IGNvbnRleHRzSW5mby5maW5kKGluZm8gPT4gaW5mby50ZXN0UnVuID09PSB0ZXN0UnVuKTtcblxuICAgIGlmICghY29udGV4dEluZm8pIHtcbiAgICAgICAgY29udGV4dEluZm8gPSB7IHRlc3RSdW4sIGNvbnRleHQ6IGNyZWF0ZUV4ZWN1dGlvbkNvbnRleHQodGVzdFJ1biksIG9wdGlvbnM6IHt9IH07XG5cbiAgICAgICAgY29udGV4dHNJbmZvLnB1c2goY29udGV4dEluZm8pO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZXh0SW5mbztcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dCAodGVzdFJ1biwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFyIGNvbnRleHRJbmZvID0gZ2V0Q29udGV4dEluZm8odGVzdFJ1bik7XG5cbiAgICBjb250ZXh0SW5mby5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHJldHVybiBjb250ZXh0SW5mby5jb250ZXh0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFeGVjdXRpb25Db250ZXh0ICh0ZXN0UnVuKSB7XG4gICAgdmFyIHNhbmRib3ggPSB7XG4gICAgICAgIFNlbGVjdG9yOiAoZm4sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBza2lwVmlzaWJpbGl0eUNoZWNrLCBjb2xsZWN0aW9uTW9kZSB9ID0gZ2V0Q29udGV4dEluZm8odGVzdFJ1bikub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHNraXBWaXNpYmlsaXR5Q2hlY2spXG4gICAgICAgICAgICAgICAgb3B0aW9ucy52aXNpYmlsaXR5Q2hlY2sgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHRlc3RSdW4gJiYgdGVzdFJ1bi5pZClcbiAgICAgICAgICAgICAgICBvcHRpb25zLmJvdW5kVGVzdFJ1biA9IHRlc3RSdW47XG5cbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uTW9kZSlcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbGxlY3Rpb25Nb2RlID0gY29sbGVjdGlvbk1vZGU7XG5cbiAgICAgICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgU2VsZWN0b3JCdWlsZGVyKGZuLCBvcHRpb25zLCB7IGluc3RhbnRpYXRpb246ICdTZWxlY3RvcicgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyLmdldEZ1bmN0aW9uKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQ2xpZW50RnVuY3Rpb246IChmbiwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBpZiAodGVzdFJ1biAmJiB0ZXN0UnVuLmlkKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm91bmRUZXN0UnVuID0gdGVzdFJ1bjtcblxuICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBDbGllbnRGdW5jdGlvbkJ1aWxkZXIoZm4sIG9wdGlvbnMsIHsgaW5zdGFudGlhdGlvbjogJ0NsaWVudEZ1bmN0aW9uJyB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIuZ2V0RnVuY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChzYW5kYm94KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVKc0V4cHJlc3Npb24gKGV4cHJlc3Npb24sIHRlc3RSdW4sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dCh0ZXN0UnVuLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBydW5JbkNvbnRleHQoZXhwcmVzc2lvbiwgY29udGV4dCwgeyBkaXNwbGF5RXJyb3JzOiBmYWxzZSB9KTtcbn1cbiJdfQ==
