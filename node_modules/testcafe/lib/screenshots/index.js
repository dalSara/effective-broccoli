'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _capturer = require('./capturer');

var _capturer2 = _interopRequireDefault(_capturer);

var _pathPattern = require('./path-pattern');

var _pathPattern2 = _interopRequireDefault(_pathPattern);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Screenshots {
    constructor(path, pattern) {
        this.enabled = !!path;
        this.screenshotsPath = path;
        this.screenshotsPattern = pattern;
        this.testEntries = [];
        this.now = (0, _moment2.default)();
    }

    _addTestEntry(test) {
        const testEntry = {
            test: test,
            path: this.screenshotsPath || '',
            screenshots: []
        };

        this.testEntries.push(testEntry);

        return testEntry;
    }

    _getTestEntry(test) {
        return (0, _lodash.find)(this.testEntries, entry => entry.test === test);
    }

    _ensureTestEntry(test) {
        let testEntry = this._getTestEntry(test);

        if (!testEntry) testEntry = this._addTestEntry(test);

        return testEntry;
    }

    getScreenshotsInfo(test) {
        return this._getTestEntry(test).screenshots;
    }

    hasCapturedFor(test) {
        return this.getScreenshotsInfo(test).length > 0;
    }

    getPathFor(test) {
        return this._getTestEntry(test).path;
    }

    createCapturerFor(test, testIndex, quarantine, connection, warningLog) {
        const testEntry = this._ensureTestEntry(test);
        const pathPattern = new _pathPattern2.default(this.screenshotsPattern, {
            testIndex,
            quarantineAttempt: quarantine ? quarantine.getNextAttemptNumber() : null,
            now: this.now,
            fixture: test.fixture.name,
            test: test.name,
            parsedUserAgent: connection.browserInfo.parsedUserAgent
        });

        return new _capturer2.default(this.screenshotsPath, testEntry, connection, pathPattern, warningLog);
    }
}
exports.default = Screenshots;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JlZW5zaG90cy9pbmRleC5qcyJdLCJuYW1lcyI6WyJTY3JlZW5zaG90cyIsImNvbnN0cnVjdG9yIiwicGF0aCIsInBhdHRlcm4iLCJlbmFibGVkIiwic2NyZWVuc2hvdHNQYXRoIiwic2NyZWVuc2hvdHNQYXR0ZXJuIiwidGVzdEVudHJpZXMiLCJub3ciLCJfYWRkVGVzdEVudHJ5IiwidGVzdCIsInRlc3RFbnRyeSIsInNjcmVlbnNob3RzIiwicHVzaCIsIl9nZXRUZXN0RW50cnkiLCJlbnRyeSIsIl9lbnN1cmVUZXN0RW50cnkiLCJnZXRTY3JlZW5zaG90c0luZm8iLCJoYXNDYXB0dXJlZEZvciIsImxlbmd0aCIsImdldFBhdGhGb3IiLCJjcmVhdGVDYXB0dXJlckZvciIsInRlc3RJbmRleCIsInF1YXJhbnRpbmUiLCJjb25uZWN0aW9uIiwid2FybmluZ0xvZyIsInBhdGhQYXR0ZXJuIiwiUGF0aFBhdHRlcm4iLCJxdWFyYW50aW5lQXR0ZW1wdCIsImdldE5leHRBdHRlbXB0TnVtYmVyIiwiZml4dHVyZSIsIm5hbWUiLCJwYXJzZWRVc2VyQWdlbnQiLCJicm93c2VySW5mbyIsIkNhcHR1cmVyIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxXQUFOLENBQWtCO0FBQzdCQyxnQkFBYUMsSUFBYixFQUFtQkMsT0FBbkIsRUFBNEI7QUFDeEIsYUFBS0MsT0FBTCxHQUEwQixDQUFDLENBQUNGLElBQTVCO0FBQ0EsYUFBS0csZUFBTCxHQUEwQkgsSUFBMUI7QUFDQSxhQUFLSSxrQkFBTCxHQUEwQkgsT0FBMUI7QUFDQSxhQUFLSSxXQUFMLEdBQTBCLEVBQTFCO0FBQ0EsYUFBS0MsR0FBTCxHQUEwQix1QkFBMUI7QUFDSDs7QUFFREMsa0JBQWVDLElBQWYsRUFBcUI7QUFDakIsY0FBTUMsWUFBWTtBQUNkRCxrQkFBYUEsSUFEQztBQUVkUixrQkFBYSxLQUFLRyxlQUFMLElBQXdCLEVBRnZCO0FBR2RPLHlCQUFhO0FBSEMsU0FBbEI7O0FBTUEsYUFBS0wsV0FBTCxDQUFpQk0sSUFBakIsQ0FBc0JGLFNBQXRCOztBQUVBLGVBQU9BLFNBQVA7QUFDSDs7QUFFREcsa0JBQWVKLElBQWYsRUFBcUI7QUFDakIsZUFBTyxrQkFBSyxLQUFLSCxXQUFWLEVBQXVCUSxTQUFTQSxNQUFNTCxJQUFOLEtBQWVBLElBQS9DLENBQVA7QUFDSDs7QUFFRE0scUJBQWtCTixJQUFsQixFQUF3QjtBQUNwQixZQUFJQyxZQUFZLEtBQUtHLGFBQUwsQ0FBbUJKLElBQW5CLENBQWhCOztBQUVBLFlBQUksQ0FBQ0MsU0FBTCxFQUNJQSxZQUFZLEtBQUtGLGFBQUwsQ0FBbUJDLElBQW5CLENBQVo7O0FBRUosZUFBT0MsU0FBUDtBQUNIOztBQUVETSx1QkFBb0JQLElBQXBCLEVBQTBCO0FBQ3RCLGVBQU8sS0FBS0ksYUFBTCxDQUFtQkosSUFBbkIsRUFBeUJFLFdBQWhDO0FBQ0g7O0FBRURNLG1CQUFnQlIsSUFBaEIsRUFBc0I7QUFDbEIsZUFBTyxLQUFLTyxrQkFBTCxDQUF3QlAsSUFBeEIsRUFBOEJTLE1BQTlCLEdBQXVDLENBQTlDO0FBQ0g7O0FBRURDLGVBQVlWLElBQVosRUFBa0I7QUFDZCxlQUFPLEtBQUtJLGFBQUwsQ0FBbUJKLElBQW5CLEVBQXlCUixJQUFoQztBQUNIOztBQUVEbUIsc0JBQW1CWCxJQUFuQixFQUF5QlksU0FBekIsRUFBb0NDLFVBQXBDLEVBQWdEQyxVQUFoRCxFQUE0REMsVUFBNUQsRUFBd0U7QUFDcEUsY0FBTWQsWUFBYyxLQUFLSyxnQkFBTCxDQUFzQk4sSUFBdEIsQ0FBcEI7QUFDQSxjQUFNZ0IsY0FBYyxJQUFJQyxxQkFBSixDQUFnQixLQUFLckIsa0JBQXJCLEVBQXlDO0FBQ3pEZ0IscUJBRHlEO0FBRXpETSwrQkFBbUJMLGFBQWFBLFdBQVdNLG9CQUFYLEVBQWIsR0FBaUQsSUFGWDtBQUd6RHJCLGlCQUFtQixLQUFLQSxHQUhpQztBQUl6RHNCLHFCQUFtQnBCLEtBQUtvQixPQUFMLENBQWFDLElBSnlCO0FBS3pEckIsa0JBQW1CQSxLQUFLcUIsSUFMaUM7QUFNekRDLDZCQUFtQlIsV0FBV1MsV0FBWCxDQUF1QkQ7QUFOZSxTQUF6QyxDQUFwQjs7QUFTQSxlQUFPLElBQUlFLGtCQUFKLENBQWEsS0FBSzdCLGVBQWxCLEVBQW1DTSxTQUFuQyxFQUE4Q2EsVUFBOUMsRUFBMERFLFdBQTFELEVBQXVFRCxVQUF2RSxDQUFQO0FBQ0g7QUExRDRCO2tCQUFaekIsVyIsImZpbGUiOiJzY3JlZW5zaG90cy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IENhcHR1cmVyIGZyb20gJy4vY2FwdHVyZXInO1xuaW1wb3J0IFBhdGhQYXR0ZXJuIGZyb20gJy4vcGF0aC1wYXR0ZXJuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NyZWVuc2hvdHMge1xuICAgIGNvbnN0cnVjdG9yIChwYXRoLCBwYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlZCAgICAgICAgICAgID0gISFwYXRoO1xuICAgICAgICB0aGlzLnNjcmVlbnNob3RzUGF0aCAgICA9IHBhdGg7XG4gICAgICAgIHRoaXMuc2NyZWVuc2hvdHNQYXR0ZXJuID0gcGF0dGVybjtcbiAgICAgICAgdGhpcy50ZXN0RW50cmllcyAgICAgICAgPSBbXTtcbiAgICAgICAgdGhpcy5ub3cgICAgICAgICAgICAgICAgPSBtb21lbnQoKTtcbiAgICB9XG5cbiAgICBfYWRkVGVzdEVudHJ5ICh0ZXN0KSB7XG4gICAgICAgIGNvbnN0IHRlc3RFbnRyeSA9IHtcbiAgICAgICAgICAgIHRlc3Q6ICAgICAgICB0ZXN0LFxuICAgICAgICAgICAgcGF0aDogICAgICAgIHRoaXMuc2NyZWVuc2hvdHNQYXRoIHx8ICcnLFxuICAgICAgICAgICAgc2NyZWVuc2hvdHM6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy50ZXN0RW50cmllcy5wdXNoKHRlc3RFbnRyeSk7XG5cbiAgICAgICAgcmV0dXJuIHRlc3RFbnRyeTtcbiAgICB9XG5cbiAgICBfZ2V0VGVzdEVudHJ5ICh0ZXN0KSB7XG4gICAgICAgIHJldHVybiBmaW5kKHRoaXMudGVzdEVudHJpZXMsIGVudHJ5ID0+IGVudHJ5LnRlc3QgPT09IHRlc3QpO1xuICAgIH1cblxuICAgIF9lbnN1cmVUZXN0RW50cnkgKHRlc3QpIHtcbiAgICAgICAgbGV0IHRlc3RFbnRyeSA9IHRoaXMuX2dldFRlc3RFbnRyeSh0ZXN0KTtcblxuICAgICAgICBpZiAoIXRlc3RFbnRyeSlcbiAgICAgICAgICAgIHRlc3RFbnRyeSA9IHRoaXMuX2FkZFRlc3RFbnRyeSh0ZXN0KTtcblxuICAgICAgICByZXR1cm4gdGVzdEVudHJ5O1xuICAgIH1cblxuICAgIGdldFNjcmVlbnNob3RzSW5mbyAodGVzdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VGVzdEVudHJ5KHRlc3QpLnNjcmVlbnNob3RzO1xuICAgIH1cblxuICAgIGhhc0NhcHR1cmVkRm9yICh0ZXN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFNjcmVlbnNob3RzSW5mbyh0ZXN0KS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldFBhdGhGb3IgKHRlc3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRlc3RFbnRyeSh0ZXN0KS5wYXRoO1xuICAgIH1cblxuICAgIGNyZWF0ZUNhcHR1cmVyRm9yICh0ZXN0LCB0ZXN0SW5kZXgsIHF1YXJhbnRpbmUsIGNvbm5lY3Rpb24sIHdhcm5pbmdMb2cpIHtcbiAgICAgICAgY29uc3QgdGVzdEVudHJ5ICAgPSB0aGlzLl9lbnN1cmVUZXN0RW50cnkodGVzdCk7XG4gICAgICAgIGNvbnN0IHBhdGhQYXR0ZXJuID0gbmV3IFBhdGhQYXR0ZXJuKHRoaXMuc2NyZWVuc2hvdHNQYXR0ZXJuLCB7XG4gICAgICAgICAgICB0ZXN0SW5kZXgsXG4gICAgICAgICAgICBxdWFyYW50aW5lQXR0ZW1wdDogcXVhcmFudGluZSA/IHF1YXJhbnRpbmUuZ2V0TmV4dEF0dGVtcHROdW1iZXIoKSA6IG51bGwsXG4gICAgICAgICAgICBub3c6ICAgICAgICAgICAgICAgdGhpcy5ub3csXG4gICAgICAgICAgICBmaXh0dXJlOiAgICAgICAgICAgdGVzdC5maXh0dXJlLm5hbWUsXG4gICAgICAgICAgICB0ZXN0OiAgICAgICAgICAgICAgdGVzdC5uYW1lLFxuICAgICAgICAgICAgcGFyc2VkVXNlckFnZW50OiAgIGNvbm5lY3Rpb24uYnJvd3NlckluZm8ucGFyc2VkVXNlckFnZW50LFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IENhcHR1cmVyKHRoaXMuc2NyZWVuc2hvdHNQYXRoLCB0ZXN0RW50cnksIGNvbm5lY3Rpb24sIHBhdGhQYXR0ZXJuLCB3YXJuaW5nTG9nKTtcbiAgICB9XG59XG4iXX0=
