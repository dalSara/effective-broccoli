'use strict';

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let runTests = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (argParser) {
        var opts = argParser.opts;
        var port1 = opts.ports && opts.ports[0];
        var port2 = opts.ports && opts.ports[1];
        var externalProxyHost = opts.proxy;
        var proxyBypass = opts.proxyBypass;

        _log2.default.showSpinner();

        const testCafe = yield (0, _2.default)(opts.hostname, port1, port2, opts.ssl, opts.dev);
        var concurrency = argParser.concurrency || 1;
        var remoteBrowsers = yield (0, _remotesWizard2.default)(testCafe, argParser.remoteCount, opts.qrCode);
        var browsers = argParser.browsers.concat(remoteBrowsers);
        var runner = testCafe.createRunner();
        var failed = 0;
        var reporters = argParser.opts.reporters.map(function (r) {
            return {
                name: r.name,
                outStream: r.outFile ? _fs2.default.createWriteStream(r.outFile) : void 0
            };
        });

        reporters.forEach(function (r) {
            return runner.reporter(r.name, r.outStream);
        });

        runner.useProxy(externalProxyHost, proxyBypass).src(argParser.src).browsers(browsers).concurrency(concurrency).filter(argParser.filter).screenshots(opts.screenshots, opts.screenshotsOnFails, opts.screenshotPathPattern).startApp(opts.app, opts.appInitDelay);

        runner.once('done-bootstrapping', function () {
            return _log2.default.hideSpinner();
        });

        try {
            failed = yield runner.run(opts);
        } finally {
            showMessageOnExit = false;
            yield testCafe.close();
        }

        exit(failed);
    });

    return function runTests(_x) {
        return _ref.apply(this, arguments);
    };
})();

let listBrowsers = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (providerName = 'locally-installed') {
        var provider = yield _pool2.default.getProvider(providerName);

        if (!provider) throw new _runtime.GeneralError(_message2.default.browserProviderNotFound, providerName);

        if (provider.isMultiBrowser) {
            var browserNames = yield provider.getBrowserList();

            yield _pool2.default.dispose();

            if (providerName === 'locally-installed') console.log(browserNames.join('\n'));else console.log(browserNames.map(function (browserName) {
                return `"${providerName}:${browserName}"`;
            }).join('\n'));
        } else console.log(`"${providerName}"`);

        exit(0);
    });

    return function listBrowsers() {
        return _ref2.apply(this, arguments);
    };
})();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _pool = require('../browser/provider/pool');

var _pool2 = _interopRequireDefault(_pool);

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _argumentParser = require('./argument-parser');

var _argumentParser2 = _interopRequireDefault(_argumentParser);

var _terminationHandler = require('./termination-handler');

var _terminationHandler2 = _interopRequireDefault(_terminationHandler);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _remotesWizard = require('./remotes-wizard');

var _remotesWizard2 = _interopRequireDefault(_remotesWizard);

var _ = require('../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var showMessageOnExit = true;
var exitMessageShown = false;
var exiting = false;

function exitHandler(terminationLevel) {
    if (showMessageOnExit && !exitMessageShown) {
        exitMessageShown = true;

        _log2.default.hideSpinner();
        _log2.default.write('Stopping TestCafe...');
        _log2.default.showSpinner();

        process.on('exit', () => _log2.default.hideSpinner(true));
    }

    if (exiting || terminationLevel < 2) return;

    exiting = true;

    exit(0);
}

function exit(code) {
    _log2.default.hideSpinner(true);

    // NOTE: give a process time to flush the output.
    // It's necessary in some environments.
    setTimeout(() => process.exit(code), 0);
}

function error(err) {
    _log2.default.hideSpinner();

    var message = null;

    // HACK: workaround for the `instanceof` problem
    // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
    if (err.constructor === _runtime.GeneralError) message = err.message;else if (err.constructor === _runtime.APIError) message = err.coloredStack;else message = err.stack;

    _log2.default.write(_chalk2.default.red('ERROR ') + message + '\n');
    _log2.default.write(_chalk2.default.gray('Type "testcafe -h" for help.'));

    exit(1);
}

(() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* () {
        var terminationHandler = new _terminationHandler2.default();

        terminationHandler.on(_terminationHandler2.default.TERMINATION_LEVEL_INCREASED_EVENT, exitHandler);

        try {
            var argParser = new _argumentParser2.default();

            yield argParser.parse(process.argv);

            if (argParser.opts.listBrowsers) yield listBrowsers(argParser.opts.providerName);else yield runTests(argParser);
        } catch (err) {
            showMessageOnExit = false;
            error(err);
        }
    });

    function cli() {
        return _ref3.apply(this, arguments);
    }

    return cli;
})()();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
