'use strict';

exports.__esModule = true;

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MOMENT_MODULE_NAME = 'moment';
const DURATION_FORMAT_MODULE_NAME = 'moment-duration-format';

function restoreInitialCacheState(module, path) {
    if (module) require.cache[path] = module;else delete require.cache[path];
}

function getSideMomentModulePath(sidePath) {
    try {
        return (0, _resolveFrom2.default)(sidePath, MOMENT_MODULE_NAME);
    } catch (err) {
        return '';
    }
}

function getModulesPaths() {
    const durationFormatModulePath = require.resolve(DURATION_FORMAT_MODULE_NAME);

    return {
        durationFormatModulePath,

        mainMomentModulePath: require.resolve(MOMENT_MODULE_NAME),
        sideMomentModulePath: getSideMomentModulePath(durationFormatModulePath)
    };
}

function getCachedAndCleanModules(modulePath) {
    const cachedModule = require.cache[modulePath];

    delete require.cache[modulePath];

    require(modulePath);

    return { cachedModule, cleanModule: require.cache[modulePath] };
}

function getMomentModules({ mainMomentModulePath, sideMomentModulePath }) {
    var _getCachedAndCleanMod = getCachedAndCleanModules(mainMomentModulePath);

    const cachedModule = _getCachedAndCleanMod.cachedModule,
          cleanModule = _getCachedAndCleanMod.cleanModule;


    return {
        sideModule: require.cache[sideMomentModulePath],
        mainModule: cleanModule,
        cachedModule
    };
}

function getMomentModuleWithDurationFormatPatch() {
    const modulesPaths = getModulesPaths();
    const momentModules = getMomentModules(modulesPaths);

    const sideMomentModulePath = modulesPaths.sideMomentModulePath,
          mainMomentModulePath = modulesPaths.mainMomentModulePath,
          durationFormatModulePath = modulesPaths.durationFormatModulePath;


    if (sideMomentModulePath && sideMomentModulePath !== mainMomentModulePath) {
        require.cache[sideMomentModulePath] = momentModules.mainModule;

        require(durationFormatModulePath);

        restoreInitialCacheState(momentModules.sideModule, sideMomentModulePath);
    } else {
        const durationFormatSetup = require(durationFormatModulePath);

        if (!sideMomentModulePath) durationFormatSetup(momentModules.mainModule.exports);
    }

    restoreInitialCacheState(momentModules.cachedModule, mainMomentModulePath);

    return momentModules.mainModule.exports;
}

exports.default = getMomentModuleWithDurationFormatPatch();
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9tb21lbnQtbG9hZGVyLmpzIl0sIm5hbWVzIjpbIk1PTUVOVF9NT0RVTEVfTkFNRSIsIkRVUkFUSU9OX0ZPUk1BVF9NT0RVTEVfTkFNRSIsInJlc3RvcmVJbml0aWFsQ2FjaGVTdGF0ZSIsIm1vZHVsZSIsInBhdGgiLCJyZXF1aXJlIiwiY2FjaGUiLCJnZXRTaWRlTW9tZW50TW9kdWxlUGF0aCIsInNpZGVQYXRoIiwiZXJyIiwiZ2V0TW9kdWxlc1BhdGhzIiwiZHVyYXRpb25Gb3JtYXRNb2R1bGVQYXRoIiwicmVzb2x2ZSIsIm1haW5Nb21lbnRNb2R1bGVQYXRoIiwic2lkZU1vbWVudE1vZHVsZVBhdGgiLCJnZXRDYWNoZWRBbmRDbGVhbk1vZHVsZXMiLCJtb2R1bGVQYXRoIiwiY2FjaGVkTW9kdWxlIiwiY2xlYW5Nb2R1bGUiLCJnZXRNb21lbnRNb2R1bGVzIiwic2lkZU1vZHVsZSIsIm1haW5Nb2R1bGUiLCJnZXRNb21lbnRNb2R1bGVXaXRoRHVyYXRpb25Gb3JtYXRQYXRjaCIsIm1vZHVsZXNQYXRocyIsIm1vbWVudE1vZHVsZXMiLCJkdXJhdGlvbkZvcm1hdFNldHVwIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7QUFHQSxNQUFNQSxxQkFBOEIsUUFBcEM7QUFDQSxNQUFNQyw4QkFBOEIsd0JBQXBDOztBQUVBLFNBQVNDLHdCQUFULENBQW1DQyxNQUFuQyxFQUEyQ0MsSUFBM0MsRUFBaUQ7QUFDN0MsUUFBSUQsTUFBSixFQUNJRSxRQUFRQyxLQUFSLENBQWNGLElBQWQsSUFBc0JELE1BQXRCLENBREosS0FHSSxPQUFPRSxRQUFRQyxLQUFSLENBQWNGLElBQWQsQ0FBUDtBQUNQOztBQUVELFNBQVNHLHVCQUFULENBQWtDQyxRQUFsQyxFQUE0QztBQUN4QyxRQUFJO0FBQ0EsZUFBTywyQkFBWUEsUUFBWixFQUFzQlIsa0JBQXRCLENBQVA7QUFDSCxLQUZELENBR0EsT0FBT1MsR0FBUCxFQUFZO0FBQ1IsZUFBTyxFQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTQyxlQUFULEdBQTRCO0FBQ3hCLFVBQU1DLDJCQUEyQk4sUUFBUU8sT0FBUixDQUFnQlgsMkJBQWhCLENBQWpDOztBQUVBLFdBQU87QUFDSFUsZ0NBREc7O0FBR0hFLDhCQUFzQlIsUUFBUU8sT0FBUixDQUFnQlosa0JBQWhCLENBSG5CO0FBSUhjLDhCQUFzQlAsd0JBQXdCSSx3QkFBeEI7QUFKbkIsS0FBUDtBQU1IOztBQUVELFNBQVNJLHdCQUFULENBQW1DQyxVQUFuQyxFQUErQztBQUMzQyxVQUFNQyxlQUFlWixRQUFRQyxLQUFSLENBQWNVLFVBQWQsQ0FBckI7O0FBRUEsV0FBT1gsUUFBUUMsS0FBUixDQUFjVSxVQUFkLENBQVA7O0FBRUFYLFlBQVFXLFVBQVI7O0FBRUEsV0FBTyxFQUFFQyxZQUFGLEVBQWdCQyxhQUFhYixRQUFRQyxLQUFSLENBQWNVLFVBQWQsQ0FBN0IsRUFBUDtBQUNIOztBQUVELFNBQVNHLGdCQUFULENBQTJCLEVBQUVOLG9CQUFGLEVBQXdCQyxvQkFBeEIsRUFBM0IsRUFBMkU7QUFBQSxnQ0FDakNDLHlCQUF5QkYsb0JBQXpCLENBRGlDOztBQUFBLFVBQy9ESSxZQUQrRCx5QkFDL0RBLFlBRCtEO0FBQUEsVUFDakRDLFdBRGlELHlCQUNqREEsV0FEaUQ7OztBQUd2RSxXQUFPO0FBQ0hFLG9CQUFZZixRQUFRQyxLQUFSLENBQWNRLG9CQUFkLENBRFQ7QUFFSE8sb0JBQVlILFdBRlQ7QUFHSEQ7QUFIRyxLQUFQO0FBS0g7O0FBRUQsU0FBU0ssc0NBQVQsR0FBbUQ7QUFDL0MsVUFBTUMsZUFBZ0JiLGlCQUF0QjtBQUNBLFVBQU1jLGdCQUFnQkwsaUJBQWlCSSxZQUFqQixDQUF0Qjs7QUFGK0MsVUFJdkNULG9CQUp1QyxHQUlrQ1MsWUFKbEMsQ0FJdkNULG9CQUp1QztBQUFBLFVBSWpCRCxvQkFKaUIsR0FJa0NVLFlBSmxDLENBSWpCVixvQkFKaUI7QUFBQSxVQUlLRix3QkFKTCxHQUlrQ1ksWUFKbEMsQ0FJS1osd0JBSkw7OztBQU0vQyxRQUFJRyx3QkFBd0JBLHlCQUF5QkQsb0JBQXJELEVBQTJFO0FBQ3ZFUixnQkFBUUMsS0FBUixDQUFjUSxvQkFBZCxJQUFzQ1UsY0FBY0gsVUFBcEQ7O0FBRUFoQixnQkFBUU0sd0JBQVI7O0FBRUFULGlDQUF5QnNCLGNBQWNKLFVBQXZDLEVBQW1ETixvQkFBbkQ7QUFDSCxLQU5ELE1BT0s7QUFDRCxjQUFNVyxzQkFBc0JwQixRQUFRTSx3QkFBUixDQUE1Qjs7QUFFQSxZQUFJLENBQUNHLG9CQUFMLEVBQ0lXLG9CQUFvQkQsY0FBY0gsVUFBZCxDQUF5QkssT0FBN0M7QUFDUDs7QUFFRHhCLDZCQUF5QnNCLGNBQWNQLFlBQXZDLEVBQXFESixvQkFBckQ7O0FBRUEsV0FBT1csY0FBY0gsVUFBZCxDQUF5QkssT0FBaEM7QUFDSDs7a0JBRWNKLHdDIiwiZmlsZSI6InV0aWxzL21vbWVudC1sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVzb2x2ZUZyb20gZnJvbSAncmVzb2x2ZS1mcm9tJztcblxuXG5jb25zdCBNT01FTlRfTU9EVUxFX05BTUUgICAgICAgICAgPSAnbW9tZW50JztcbmNvbnN0IERVUkFUSU9OX0ZPUk1BVF9NT0RVTEVfTkFNRSA9ICdtb21lbnQtZHVyYXRpb24tZm9ybWF0JztcblxuZnVuY3Rpb24gcmVzdG9yZUluaXRpYWxDYWNoZVN0YXRlIChtb2R1bGUsIHBhdGgpIHtcbiAgICBpZiAobW9kdWxlKVxuICAgICAgICByZXF1aXJlLmNhY2hlW3BhdGhdID0gbW9kdWxlO1xuICAgIGVsc2VcbiAgICAgICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbcGF0aF07XG59XG5cbmZ1bmN0aW9uIGdldFNpZGVNb21lbnRNb2R1bGVQYXRoIChzaWRlUGF0aCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlRnJvbShzaWRlUGF0aCwgTU9NRU5UX01PRFVMRV9OQU1FKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVzUGF0aHMgKCkge1xuICAgIGNvbnN0IGR1cmF0aW9uRm9ybWF0TW9kdWxlUGF0aCA9IHJlcXVpcmUucmVzb2x2ZShEVVJBVElPTl9GT1JNQVRfTU9EVUxFX05BTUUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHVyYXRpb25Gb3JtYXRNb2R1bGVQYXRoLFxuXG4gICAgICAgIG1haW5Nb21lbnRNb2R1bGVQYXRoOiByZXF1aXJlLnJlc29sdmUoTU9NRU5UX01PRFVMRV9OQU1FKSxcbiAgICAgICAgc2lkZU1vbWVudE1vZHVsZVBhdGg6IGdldFNpZGVNb21lbnRNb2R1bGVQYXRoKGR1cmF0aW9uRm9ybWF0TW9kdWxlUGF0aClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDYWNoZWRBbmRDbGVhbk1vZHVsZXMgKG1vZHVsZVBhdGgpIHtcbiAgICBjb25zdCBjYWNoZWRNb2R1bGUgPSByZXF1aXJlLmNhY2hlW21vZHVsZVBhdGhdO1xuXG4gICAgZGVsZXRlIHJlcXVpcmUuY2FjaGVbbW9kdWxlUGF0aF07XG5cbiAgICByZXF1aXJlKG1vZHVsZVBhdGgpO1xuXG4gICAgcmV0dXJuIHsgY2FjaGVkTW9kdWxlLCBjbGVhbk1vZHVsZTogcmVxdWlyZS5jYWNoZVttb2R1bGVQYXRoXSB9O1xufVxuXG5mdW5jdGlvbiBnZXRNb21lbnRNb2R1bGVzICh7IG1haW5Nb21lbnRNb2R1bGVQYXRoLCBzaWRlTW9tZW50TW9kdWxlUGF0aCB9KSB7XG4gICAgY29uc3QgeyBjYWNoZWRNb2R1bGUsIGNsZWFuTW9kdWxlIH0gPSBnZXRDYWNoZWRBbmRDbGVhbk1vZHVsZXMobWFpbk1vbWVudE1vZHVsZVBhdGgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2lkZU1vZHVsZTogcmVxdWlyZS5jYWNoZVtzaWRlTW9tZW50TW9kdWxlUGF0aF0sXG4gICAgICAgIG1haW5Nb2R1bGU6IGNsZWFuTW9kdWxlLFxuICAgICAgICBjYWNoZWRNb2R1bGVcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRNb21lbnRNb2R1bGVXaXRoRHVyYXRpb25Gb3JtYXRQYXRjaCAoKSB7XG4gICAgY29uc3QgbW9kdWxlc1BhdGhzICA9IGdldE1vZHVsZXNQYXRocygpO1xuICAgIGNvbnN0IG1vbWVudE1vZHVsZXMgPSBnZXRNb21lbnRNb2R1bGVzKG1vZHVsZXNQYXRocyk7XG5cbiAgICBjb25zdCB7IHNpZGVNb21lbnRNb2R1bGVQYXRoLCBtYWluTW9tZW50TW9kdWxlUGF0aCwgZHVyYXRpb25Gb3JtYXRNb2R1bGVQYXRoIH0gPSBtb2R1bGVzUGF0aHM7XG5cbiAgICBpZiAoc2lkZU1vbWVudE1vZHVsZVBhdGggJiYgc2lkZU1vbWVudE1vZHVsZVBhdGggIT09IG1haW5Nb21lbnRNb2R1bGVQYXRoKSB7XG4gICAgICAgIHJlcXVpcmUuY2FjaGVbc2lkZU1vbWVudE1vZHVsZVBhdGhdID0gbW9tZW50TW9kdWxlcy5tYWluTW9kdWxlO1xuXG4gICAgICAgIHJlcXVpcmUoZHVyYXRpb25Gb3JtYXRNb2R1bGVQYXRoKTtcblxuICAgICAgICByZXN0b3JlSW5pdGlhbENhY2hlU3RhdGUobW9tZW50TW9kdWxlcy5zaWRlTW9kdWxlLCBzaWRlTW9tZW50TW9kdWxlUGF0aCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBkdXJhdGlvbkZvcm1hdFNldHVwID0gcmVxdWlyZShkdXJhdGlvbkZvcm1hdE1vZHVsZVBhdGgpO1xuXG4gICAgICAgIGlmICghc2lkZU1vbWVudE1vZHVsZVBhdGgpXG4gICAgICAgICAgICBkdXJhdGlvbkZvcm1hdFNldHVwKG1vbWVudE1vZHVsZXMubWFpbk1vZHVsZS5leHBvcnRzKTtcbiAgICB9XG5cbiAgICByZXN0b3JlSW5pdGlhbENhY2hlU3RhdGUobW9tZW50TW9kdWxlcy5jYWNoZWRNb2R1bGUsIG1haW5Nb21lbnRNb2R1bGVQYXRoKTtcblxuICAgIHJldHVybiBtb21lbnRNb2R1bGVzLm1haW5Nb2R1bGUuZXhwb3J0cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TW9tZW50TW9kdWxlV2l0aER1cmF0aW9uRm9ybWF0UGF0Y2goKTtcbiJdfQ==
