'use strict';

exports.__esModule = true;

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

exports.getDelegatedAPIList = getDelegatedAPIList;
exports.delegateAPI = delegateAPI;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const API_IMPLEMENTATION_METHOD_RE = /^_(\S+)\$(getter|setter)?$/;

function getDelegatedAPIList(src) {
    return (0, _getOwnPropertyNames2.default)(src).map(prop => {
        var match = prop.match(API_IMPLEMENTATION_METHOD_RE);

        if (match) {
            return {
                srcProp: prop,
                apiProp: match[1],
                accessor: match[2]
            };
        }

        return null;
    }).filter(item => !!item);
}

function delegateAPI(dest, apiList, opts) {
    apiList.forEach(({ srcProp, apiProp, accessor }) => {
        var fn = function fn(...args) {
            if (opts.proxyMethod) opts.proxyMethod();

            var handler = null;

            if (opts.useCurrentCtxAsHandler) handler = this;else if (opts.getHandler) handler = opts.getHandler(apiProp, accessor);else handler = opts.handler;

            return handler[srcProp](...args);
        };

        if (accessor === 'getter') (0, _defineProperty2.default)(dest, apiProp, { get: fn, configurable: true });else if (accessor === 'setter') (0, _defineProperty2.default)(dest, apiProp, { set: fn, configurable: true });else dest[apiProp] = fn;
    });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWxlZ2F0ZWQtYXBpLmpzIl0sIm5hbWVzIjpbImdldERlbGVnYXRlZEFQSUxpc3QiLCJkZWxlZ2F0ZUFQSSIsIkFQSV9JTVBMRU1FTlRBVElPTl9NRVRIT0RfUkUiLCJzcmMiLCJtYXAiLCJwcm9wIiwibWF0Y2giLCJzcmNQcm9wIiwiYXBpUHJvcCIsImFjY2Vzc29yIiwiZmlsdGVyIiwiaXRlbSIsImRlc3QiLCJhcGlMaXN0Iiwib3B0cyIsImZvckVhY2giLCJmbiIsImFyZ3MiLCJwcm94eU1ldGhvZCIsImhhbmRsZXIiLCJ1c2VDdXJyZW50Q3R4QXNIYW5kbGVyIiwiZ2V0SGFuZGxlciIsImdldCIsImNvbmZpZ3VyYWJsZSIsInNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBRWdCQSxtQixHQUFBQSxtQjtRQW1CQUMsVyxHQUFBQSxXOzs7O0FBckJoQixNQUFNQywrQkFBK0IsNEJBQXJDOztBQUVPLFNBQVNGLG1CQUFULENBQThCRyxHQUE5QixFQUFtQztBQUN0QyxXQUFPLG1DQUNrQkEsR0FEbEIsRUFFRkMsR0FGRSxDQUVFQyxRQUFRO0FBQ1QsWUFBSUMsUUFBUUQsS0FBS0MsS0FBTCxDQUFXSiw0QkFBWCxDQUFaOztBQUVBLFlBQUlJLEtBQUosRUFBVztBQUNQLG1CQUFPO0FBQ0hDLHlCQUFVRixJQURQO0FBRUhHLHlCQUFVRixNQUFNLENBQU4sQ0FGUDtBQUdIRywwQkFBVUgsTUFBTSxDQUFOO0FBSFAsYUFBUDtBQUtIOztBQUVELGVBQU8sSUFBUDtBQUNILEtBZEUsRUFlRkksTUFmRSxDQWVLQyxRQUFRLENBQUMsQ0FBQ0EsSUFmZixDQUFQO0FBZ0JIOztBQUVNLFNBQVNWLFdBQVQsQ0FBc0JXLElBQXRCLEVBQTRCQyxPQUE1QixFQUFxQ0MsSUFBckMsRUFBMkM7QUFDOUNELFlBQVFFLE9BQVIsQ0FBZ0IsQ0FBQyxFQUFFUixPQUFGLEVBQVdDLE9BQVgsRUFBb0JDLFFBQXBCLEVBQUQsS0FBb0M7QUFDaEQsWUFBSU8sS0FBSyxTQUFMQSxFQUFLLENBQVUsR0FBR0MsSUFBYixFQUFtQjtBQUN4QixnQkFBSUgsS0FBS0ksV0FBVCxFQUNJSixLQUFLSSxXQUFMOztBQUVKLGdCQUFJQyxVQUFVLElBQWQ7O0FBRUEsZ0JBQUlMLEtBQUtNLHNCQUFULEVBQ0lELFVBQVUsSUFBVixDQURKLEtBR0ssSUFBSUwsS0FBS08sVUFBVCxFQUNERixVQUFVTCxLQUFLTyxVQUFMLENBQWdCYixPQUFoQixFQUF5QkMsUUFBekIsQ0FBVixDQURDLEtBSURVLFVBQVVMLEtBQUtLLE9BQWY7O0FBRUosbUJBQU9BLFFBQVFaLE9BQVIsRUFBaUIsR0FBR1UsSUFBcEIsQ0FBUDtBQUNILFNBaEJEOztBQWtCQSxZQUFJUixhQUFhLFFBQWpCLEVBQ0ksOEJBQXNCRyxJQUF0QixFQUE0QkosT0FBNUIsRUFBcUMsRUFBRWMsS0FBS04sRUFBUCxFQUFXTyxjQUFjLElBQXpCLEVBQXJDLEVBREosS0FHSyxJQUFJZCxhQUFhLFFBQWpCLEVBQ0QsOEJBQXNCRyxJQUF0QixFQUE0QkosT0FBNUIsRUFBcUMsRUFBRWdCLEtBQUtSLEVBQVAsRUFBV08sY0FBYyxJQUF6QixFQUFyQyxFQURDLEtBSURYLEtBQUtKLE9BQUwsSUFBZ0JRLEVBQWhCO0FBQ1AsS0EzQkQ7QUE0QkgiLCJmaWxlIjoidXRpbHMvZGVsZWdhdGVkLWFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFQSV9JTVBMRU1FTlRBVElPTl9NRVRIT0RfUkUgPSAvXl8oXFxTKylcXCQoZ2V0dGVyfHNldHRlcik/JC87XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWxlZ2F0ZWRBUElMaXN0IChzcmMpIHtcbiAgICByZXR1cm4gT2JqZWN0XG4gICAgICAgIC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNyYylcbiAgICAgICAgLm1hcChwcm9wID0+IHtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IHByb3AubWF0Y2goQVBJX0lNUExFTUVOVEFUSU9OX01FVEhPRF9SRSk7XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNyY1Byb3A6ICBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhcGlQcm9wOiAgbWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc29yOiBtYXRjaFsyXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlQVBJIChkZXN0LCBhcGlMaXN0LCBvcHRzKSB7XG4gICAgYXBpTGlzdC5mb3JFYWNoKCh7IHNyY1Byb3AsIGFwaVByb3AsIGFjY2Vzc29yIH0pID0+IHtcbiAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnByb3h5TWV0aG9kKVxuICAgICAgICAgICAgICAgIG9wdHMucHJveHlNZXRob2QoKTtcblxuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAob3B0cy51c2VDdXJyZW50Q3R4QXNIYW5kbGVyKVxuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB0aGlzO1xuXG4gICAgICAgICAgICBlbHNlIGlmIChvcHRzLmdldEhhbmRsZXIpXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IG9wdHMuZ2V0SGFuZGxlcihhcGlQcm9wLCBhY2Nlc3Nvcik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gb3B0cy5oYW5kbGVyO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlcltzcmNQcm9wXSguLi5hcmdzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoYWNjZXNzb3IgPT09ICdnZXR0ZXInKVxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlc3QsIGFwaVByb3AsIHsgZ2V0OiBmbiwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXG4gICAgICAgIGVsc2UgaWYgKGFjY2Vzc29yID09PSAnc2V0dGVyJylcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkZXN0LCBhcGlQcm9wLCB7IHNldDogZm4sIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZXN0W2FwaVByb3BdID0gZm47XG4gICAgfSk7XG59XG4iXX0=
