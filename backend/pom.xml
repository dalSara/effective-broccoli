<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>


  <parent>
    <groupId>org.effectivebroccoli</groupId>
    <artifactId>effective-broccoli</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>

  <artifactId>effective-broccoli-backend</artifactId>
  <packaging>jar</packaging>

  <properties>
    <version.kotlin>1.3.11</version.kotlin>
    <version.springfox>2.9.2</version.springfox>
    <version.springboot>2.1.0.RELEASE</version.springboot>
    <version.junit>5.3.2</version.junit>
    <version.junit.platform>1.3.1</version.junit.platform>
    <version.jacoco>0.7.9</version.jacoco>
    <version.h2>1.4.197</version.h2>
    <version.postgres>42.1.4</version.postgres>
    <version.resteasy>3.1.3.Final</version.resteasy>
    <version.testcontainers>1.10.1</version.testcontainers>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
  </properties>


  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${version.kotlin}</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jdk8</artifactId>
      <version>${version.kotlin}</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
      <version>${version.kotlin}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>


    <!-- SpringFox for Swagger -->
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger2</artifactId>
      <version>${version.springfox}</version>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-swagger-ui</artifactId>
      <version>${version.springfox}</version>
    </dependency>
    <dependency>
      <groupId>io.springfox</groupId>
      <artifactId>springfox-spring-web</artifactId>
      <version>${version.springfox}</version>
    </dependency>


    <!-- test -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${version.junit}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- to test REST APIs -->
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>3.2.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- for code coverage -->
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.core</artifactId>
      <version>${version.jacoco}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- To use Docker from tests -->
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>${version.testcontainers}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <!-- For handling waiting of asynchronous events -->
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>3.1.3</version>
      <scope>test</scope>
    </dependency>


  </dependencies>

  <dependencyManagement>
    <dependencies>
      <!-- SpringBoot BOM -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>${version.springboot}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <version>${version.springboot}</version>
        <scope>test</scope>
        <!-- Exclude JUnit 4, which is added by default-->
        <exclusions>
          <exclusion>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <plugin>
        <!-- see https://kotlinlang.org/docs/reference/using-maven.html -->
        <artifactId>kotlin-maven-plugin</artifactId>
        <groupId>org.jetbrains.kotlin</groupId>
        <version>${version.kotlin}</version>
        <!--
            Kotlin has a major "limitation" that all classes are final by default.
            Someone call it a "feature", others (like me) call it a "design flaw".
            See more at: https://discuss.kotlinlang.org/t/classes-final-by-default/166/77

            Why is it a problem? for example, it does not play well with all major frameworks
            out there like JPA, Spring, mocking, etc, as they require to create proxy
            classes that extend the classes you write.
            So here we have to use special plugins to bypass this Kotlin "feature"...
        -->
        <configuration>
          <jvmTarget>1.8</jvmTarget>
          <compilerPlugins>
            <plugin>spring</plugin>
            <plugin>jpa</plugin>
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${version.kotlin}</version>
          </dependency>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-noarg</artifactId>
            <version>${version.kotlin}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
                <sourceDir>${project.basedir}/src/main/java</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                <sourceDir>${project.basedir}/src/test/java</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <executions>
          <!-- Replacing default-compile as it is treated specially by maven -->
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <!-- Replacing default-testCompile as it is treated specially by maven -->
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>java-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>java-test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!-- Need to create self-executable uber/fat jars -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${version.springboot}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>


</project>
