/* eslint-env node */
/* eslint-disable no-console */
// NOTE: This file is run pre build and creates `app.components.js`.
const chalk = require('chalk');
const klaw = require('klaw');
const path = require('path');

const getComponentMetadata = require('./get-component-metadata');
const handleKlawError = require('./handle-klaw-error');
const writeFile = require('./write-file');

const componentDirectory = path.join(__dirname, '..', 'source', 'components');

const disclaimers = [
  '// NOTE: Do not edit this file. It is built by running `./scripts/create-app-components.js`',
  '// NOTE: The imported/exported components are exposed to the global scope',
  `// NOTE: Generated at ${new Date().toISOString()}`
];

const fileName = 'app.components.js';

console.log(`⚙️  Generating ${chalk.blueBright(fileName)}`);

const components = {};

klaw(componentDirectory, { filter: item => path.basename(item)[0] !== '.' })
  .on('readable', function() {
    let item;
    while ((item = this.read())) {
      const { componentName, folderName, slugs } = getComponentMetadata(item);

      if (componentName && folderName) {
        components[componentName] = `./components${item.path
          .replace(componentDirectory, '')
          .replace(`${path.sep}${slugs[slugs.length - 1]}`, '')}`;
      }
    }
  })
  .on('error', handleKlawError)
  .on('end', () => {
    const componentNames = Object.keys(components);

    const importStatements = componentNames.reduce(
      (accumulator, componentName) => {
        accumulator += `import ${componentName} from '${
          components[componentName]
        }';\n`;
        return accumulator;
      },
      ''
    );

    const returnObjectContents = componentNames.reduce(
      (accumulator, componentName, currentIndex) => {
        const separator = currentIndex < componentNames.length - 1 ? ',' : '';
        accumulator += `  ${componentName}${separator}\n`;
        return accumulator;
      },
      ''
    );

    const exportStatement = `export {\n${returnObjectContents}};`;

    const fileContent = `${disclaimers.join('\n')}\n${importStatements.replace(
      /\\/g,
      '/'
    )}\n${exportStatement}\n`;

    writeFile(['..', 'source', fileName], fileContent);
  });
