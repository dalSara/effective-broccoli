'use strict';

exports.__esModule = true;

var _incomingMessageMock = require('../incoming-message-mock');

var _incomingMessageMock2 = _interopRequireDefault(_incomingMessageMock);

var _contentType = require('../../utils/content-type');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PAGE_CONTENT_TYPE = 'text/html; charset=utf-8';
var EMPTY_PAGE_HTML = '<html><body></body></html>';

var INVALID_BODY_PARAMETER_TYPES = ['number', 'boolean'];

var INVALID_STATUS_CODE_MESSAGE = 'Invalid status code. It should be a number that is greater than 100 and less than 999.';

var ResponseMock = function () {
    function ResponseMock(body, statusCode, headers) {
        _classCallCheck(this, ResponseMock);

        this.body = body;
        this.statusCode = statusCode;
        this.headers = this._lowerCaseHeaderNames(headers);

        this.requestOptions = null;

        this._validateParameters();
    }

    ResponseMock.prototype._lowerCaseHeaderNames = function _lowerCaseHeaderNames(headers) {
        if (!headers) return headers;

        var lowerCaseHeaders = {};

        Object.keys(headers).forEach(function (headerName) {
            lowerCaseHeaders[headerName.toLowerCase()] = headers[headerName];
        });

        return lowerCaseHeaders;
    };

    ResponseMock.prototype._validateBody = function _validateBody() {
        var bodyType = typeof this.body;

        if (INVALID_BODY_PARAMETER_TYPES.includes(bodyType)) throw new TypeError(`The 'body' parameter has an invalid type - ${bodyType}.`);
    };

    ResponseMock.prototype._validateStatusCode = function _validateStatusCode() {
        if (this.statusCode === void 0) return;

        if (typeof this.statusCode !== 'number') throw new TypeError(INVALID_STATUS_CODE_MESSAGE);

        var statusCode = parseInt(this.statusCode, 10);

        // NOTE: for Infinity case
        statusCode |= 0;

        if (statusCode < 100 || statusCode > 999) throw new TypeError(INVALID_STATUS_CODE_MESSAGE);
    };

    ResponseMock.prototype._validateHeaders = function _validateHeaders() {
        if (this.headers === void 0) return;

        if (typeof this.headers !== 'object') throw new TypeError('Invalid type of the \'headers\' parameter. It should be an object.');
    };

    ResponseMock.prototype._validateParameters = function _validateParameters() {
        this._validateBody();
        this._validateStatusCode();
        this._validateHeaders();
    };

    ResponseMock.prototype._getContentType = function _getContentType() {
        if (this.body !== null && typeof this.body === 'object') return _contentType.JSON_MIME;

        return PAGE_CONTENT_TYPE;
    };

    ResponseMock.prototype.setRequestOptions = function setRequestOptions(opts) {
        this.requestOptions = opts;
    };

    ResponseMock.prototype.getResponse = function getResponse() {
        var response = {
            headers: {
                'content-type': this._getContentType()
            },

            trailers: {},
            statusCode: this.statusCode || 200
        };

        if (this.headers) response.headers = Object.assign(response.headers, this.headers);

        if (this.body === void 0) response._body = EMPTY_PAGE_HTML;else if (typeof this.body === 'function') {
            response.setBody = function (value) {
                response._body = value;
            };

            response = Object.assign(response, this.body(this.requestOptions, response));

            delete response.setBody;
        } else response._body = this.body;

        response.headers = this._lowerCaseHeaderNames(response.headers);

        return new _incomingMessageMock2.default(response);
    };

    return ResponseMock;
}();

exports.default = ResponseMock;
module.exports = exports['default'];