'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncExitHook = require('async-exit-hook');

var _asyncExitHook2 = _interopRequireDefault(_asyncExitHook);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _lockfile = require('./lockfile');

var _lockfile2 = _interopRequireDefault(_lockfile);

var _cleanupProcess = require('./cleanup-process');

var _cleanupProcess2 = _interopRequireDefault(_cleanupProcess);

var _promisifiedFunctions = require('../../utils/promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: mutable for testing purposes
const TESTCAFE_TMP_DIRS_ROOT = _path2.default.join(_os2.default.tmpdir(), 'testcafe');
const DEFAULT_NAME_PREFIX = 'tmp';
const USED_TEMP_DIRS = {};
const DEBUG_LOGGER = (0, _debug2.default)('testcafe:utils:temp-directory');

class TempDirectory {
    constructor(namePrefix) {
        this.namePrefix = namePrefix || DEFAULT_NAME_PREFIX;

        this.path = '';
        this.lockFile = null;
    }

    _getTmpDirsList() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const tmpDirNames = yield (0, _promisifiedFunctions.readDir)(TempDirectory.TEMP_DIRECTORIES_ROOT);

            return tmpDirNames.filter(function (tmpDir) {
                return !USED_TEMP_DIRS[tmpDir];
            }).filter(function (tmpDir) {
                return _path2.default.basename(tmpDir).startsWith(_this.namePrefix);
            });
        })();
    }

    _findFreeTmpDir(tmpDirNames) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            for (var _iterator = tmpDirNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                const tmpDirName = _ref;

                const tmpDirPath = _path2.default.join(TempDirectory.TEMP_DIRECTORIES_ROOT, tmpDirName);

                const lockFile = new _lockfile2.default(tmpDirPath);

                if (lockFile.init()) {
                    _this2.path = tmpDirPath;
                    _this2.lockFile = lockFile;

                    return true;
                }
            }

            return false;
        })();
    }

    _createNewTmpDir() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this3.path = _tmp2.default.tmpNameSync({ dir: TempDirectory.TEMP_DIRECTORIES_ROOT, prefix: _this3.namePrefix + '-' });

            yield (0, _promisifiedFunctions.ensureDir)(_this3.path);

            _this3.lockFile = new _lockfile2.default(_this3.path);

            _this3.lockFile.init();
        })();
    }

    _disposeSync() {
        if (!USED_TEMP_DIRS[this.path]) return;

        this.lockFile.dispose();

        delete USED_TEMP_DIRS[this.path];
    }

    static createDirectory(prefix) {
        return (0, _asyncToGenerator3.default)(function* () {
            const tmpDir = new TempDirectory(prefix);

            yield tmpDir.init();

            return tmpDir;
        })();
    }

    static disposeDirectoriesSync() {
        (0, _values2.default)(USED_TEMP_DIRS).forEach(tmpDir => tmpDir._disposeSync());
    }

    init() {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            yield (0, _promisifiedFunctions.ensureDir)(TempDirectory.TEMP_DIRECTORIES_ROOT);

            const tmpDirNames = yield _this4._getTmpDirsList(_this4.namePrefix);

            DEBUG_LOGGER('Found temp directories:', tmpDirNames);

            const existingTmpDirFound = yield _this4._findFreeTmpDir(tmpDirNames);

            if (!existingTmpDirFound) yield _this4._createNewTmpDir();

            DEBUG_LOGGER('Temp directory path: ', _this4.path);

            yield _cleanupProcess2.default.init();
            yield _cleanupProcess2.default.addDirectory(_this4.path);

            USED_TEMP_DIRS[_this4.path] = _this4;
        })();
    }

    dispose() {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!USED_TEMP_DIRS[_this5.path]) return;

            _this5.lockFile.dispose();

            yield _cleanupProcess2.default.removeDirectory(_this5.path);

            delete USED_TEMP_DIRS[_this5.path];
        })();
    }
}

exports.default = TempDirectory; // NOTE: exposed for testing purposes

TempDirectory.TEMP_DIRECTORIES_ROOT = TESTCAFE_TMP_DIRS_ROOT;

(0, _asyncExitHook2.default)(TempDirectory.disposeDirectoriesSync);
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy90ZW1wLWRpcmVjdG9yeS9pbmRleC5qcyJdLCJuYW1lcyI6WyJURVNUQ0FGRV9UTVBfRElSU19ST09UIiwicGF0aCIsImpvaW4iLCJvcyIsInRtcGRpciIsIkRFRkFVTFRfTkFNRV9QUkVGSVgiLCJVU0VEX1RFTVBfRElSUyIsIkRFQlVHX0xPR0dFUiIsIlRlbXBEaXJlY3RvcnkiLCJjb25zdHJ1Y3RvciIsIm5hbWVQcmVmaXgiLCJsb2NrRmlsZSIsIl9nZXRUbXBEaXJzTGlzdCIsInRtcERpck5hbWVzIiwiVEVNUF9ESVJFQ1RPUklFU19ST09UIiwiZmlsdGVyIiwidG1wRGlyIiwiYmFzZW5hbWUiLCJzdGFydHNXaXRoIiwiX2ZpbmRGcmVlVG1wRGlyIiwidG1wRGlyTmFtZSIsInRtcERpclBhdGgiLCJMb2NrRmlsZSIsImluaXQiLCJfY3JlYXRlTmV3VG1wRGlyIiwidG1wIiwidG1wTmFtZVN5bmMiLCJkaXIiLCJwcmVmaXgiLCJfZGlzcG9zZVN5bmMiLCJkaXNwb3NlIiwiY3JlYXRlRGlyZWN0b3J5IiwiZGlzcG9zZURpcmVjdG9yaWVzU3luYyIsImZvckVhY2giLCJleGlzdGluZ1RtcERpckZvdW5kIiwiY2xlYW51cFByb2Nlc3MiLCJhZGREaXJlY3RvcnkiLCJyZW1vdmVEaXJlY3RvcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBR0E7QUFDQSxNQUFNQSx5QkFBeUJDLGVBQUtDLElBQUwsQ0FBVUMsYUFBR0MsTUFBSCxFQUFWLEVBQXVCLFVBQXZCLENBQS9CO0FBQ0EsTUFBTUMsc0JBQXlCLEtBQS9CO0FBQ0EsTUFBTUMsaUJBQXlCLEVBQS9CO0FBQ0EsTUFBTUMsZUFBeUIscUJBQU0sK0JBQU4sQ0FBL0I7O0FBRWUsTUFBTUMsYUFBTixDQUFvQjtBQUMvQkMsZ0JBQWFDLFVBQWIsRUFB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QUFOOztBQUVBSywyQkFBZSxPQUFLTCxJQUFwQixJQUE0QixNQUE1QjtBQWpCVTtBQWtCYjs7QUFFSzZCLFdBQU4sR0FBaUI7QUFBQTs7QUFBQTtBQUNiLGdCQUFJLENBQUN4QixlQUFlLE9BQUtMLElBQXBCLENBQUwsRUFDSTs7QUFFSixtQkFBS1UsUUFBTCxDQUFjbUIsT0FBZDs7QUFFQSxrQkFBTUsseUJBQWVFLGVBQWYsQ0FBK0IsT0FBS3BDLElBQXBDLENBQU47O0FBRUEsbUJBQU9LLGVBQWUsT0FBS0wsSUFBcEIsQ0FBUDtBQVJhO0FBU2hCO0FBN0Y4Qjs7a0JBQWRPLGEsRUFnR3JCOztBQUNBQSxjQUFjTSxxQkFBZCxHQUFzQ2Qsc0JBQXRDOztBQUVBLDZCQUFjUSxjQUFjd0Isc0JBQTVCIiwiZmlsZSI6InV0aWxzL3RlbXAtZGlyZWN0b3J5L2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzZXR1cEV4aXRIb29rIGZyb20gJ2FzeW5jLWV4aXQtaG9vayc7XG5pbXBvcnQgdG1wIGZyb20gJ3RtcCc7XG5pbXBvcnQgTG9ja0ZpbGUgZnJvbSAnLi9sb2NrZmlsZSc7XG5pbXBvcnQgY2xlYW51cFByb2Nlc3MgZnJvbSAnLi9jbGVhbnVwLXByb2Nlc3MnO1xuaW1wb3J0IHsgZW5zdXJlRGlyLCByZWFkRGlyIH0gZnJvbSAnLi4vLi4vdXRpbHMvcHJvbWlzaWZpZWQtZnVuY3Rpb25zJztcblxuXG4vLyBOT1RFOiBtdXRhYmxlIGZvciB0ZXN0aW5nIHB1cnBvc2VzXG5jb25zdCBURVNUQ0FGRV9UTVBfRElSU19ST09UID0gcGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVzdGNhZmUnKTtcbmNvbnN0IERFRkFVTFRfTkFNRV9QUkVGSVggICAgPSAndG1wJztcbmNvbnN0IFVTRURfVEVNUF9ESVJTICAgICAgICAgPSB7fTtcbmNvbnN0IERFQlVHX0xPR0dFUiAgICAgICAgICAgPSBkZWJ1ZygndGVzdGNhZmU6dXRpbHM6dGVtcC1kaXJlY3RvcnknKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVtcERpcmVjdG9yeSB7XG4gICAgY29uc3RydWN0b3IgKG5hbWVQcmVmaXgpIHtcbiAgICAgICAgdGhpcy5uYW1lUHJlZml4ID0gbmFtZVByZWZpeCB8fCBERUZBVUxUX05BTUVfUFJFRklYO1xuXG4gICAgICAgIHRoaXMucGF0aCAgICAgPSAnJztcbiAgICAgICAgdGhpcy5sb2NrRmlsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldFRtcERpcnNMaXN0ICgpIHtcbiAgICAgICAgY29uc3QgdG1wRGlyTmFtZXMgPSBhd2FpdCByZWFkRGlyKFRlbXBEaXJlY3RvcnkuVEVNUF9ESVJFQ1RPUklFU19ST09UKTtcblxuICAgICAgICByZXR1cm4gdG1wRGlyTmFtZXNcbiAgICAgICAgICAgIC5maWx0ZXIodG1wRGlyID0+ICFVU0VEX1RFTVBfRElSU1t0bXBEaXJdKVxuICAgICAgICAgICAgLmZpbHRlcih0bXBEaXIgPT4gcGF0aC5iYXNlbmFtZSh0bXBEaXIpLnN0YXJ0c1dpdGgodGhpcy5uYW1lUHJlZml4KSk7XG4gICAgfVxuXG4gICAgYXN5bmMgX2ZpbmRGcmVlVG1wRGlyICh0bXBEaXJOYW1lcykge1xuICAgICAgICBmb3IgKGNvbnN0IHRtcERpck5hbWUgb2YgdG1wRGlyTmFtZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRtcERpclBhdGggPSBwYXRoLmpvaW4oVGVtcERpcmVjdG9yeS5URU1QX0RJUkVDVE9SSUVTX1JPT1QsIHRtcERpck5hbWUpO1xuXG4gICAgICAgICAgICBjb25zdCBsb2NrRmlsZSA9IG5ldyBMb2NrRmlsZSh0bXBEaXJQYXRoKTtcblxuICAgICAgICAgICAgaWYgKGxvY2tGaWxlLmluaXQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGF0aCAgICAgPSB0bXBEaXJQYXRoO1xuICAgICAgICAgICAgICAgIHRoaXMubG9ja0ZpbGUgPSBsb2NrRmlsZTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFzeW5jIF9jcmVhdGVOZXdUbXBEaXIgKCkge1xuICAgICAgICB0aGlzLnBhdGggPSB0bXAudG1wTmFtZVN5bmMoeyBkaXI6IFRlbXBEaXJlY3RvcnkuVEVNUF9ESVJFQ1RPUklFU19ST09ULCBwcmVmaXg6IHRoaXMubmFtZVByZWZpeCArICctJyB9KTtcblxuICAgICAgICBhd2FpdCBlbnN1cmVEaXIodGhpcy5wYXRoKTtcblxuICAgICAgICB0aGlzLmxvY2tGaWxlID0gbmV3IExvY2tGaWxlKHRoaXMucGF0aCk7XG5cbiAgICAgICAgdGhpcy5sb2NrRmlsZS5pbml0KCk7XG4gICAgfVxuXG4gICAgX2Rpc3Bvc2VTeW5jICgpIHtcbiAgICAgICAgaWYgKCFVU0VEX1RFTVBfRElSU1t0aGlzLnBhdGhdKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMubG9ja0ZpbGUuZGlzcG9zZSgpO1xuXG4gICAgICAgIGRlbGV0ZSBVU0VEX1RFTVBfRElSU1t0aGlzLnBhdGhdO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBjcmVhdGVEaXJlY3RvcnkgKHByZWZpeCkge1xuICAgICAgICBjb25zdCB0bXBEaXIgPSBuZXcgVGVtcERpcmVjdG9yeShwcmVmaXgpO1xuXG4gICAgICAgIGF3YWl0IHRtcERpci5pbml0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRtcERpcjtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGlzcG9zZURpcmVjdG9yaWVzU3luYyAoKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMoVVNFRF9URU1QX0RJUlMpLmZvckVhY2godG1wRGlyID0+IHRtcERpci5fZGlzcG9zZVN5bmMoKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCAoKSB7XG4gICAgICAgIGF3YWl0IGVuc3VyZURpcihUZW1wRGlyZWN0b3J5LlRFTVBfRElSRUNUT1JJRVNfUk9PVCk7XG5cbiAgICAgICAgY29uc3QgdG1wRGlyTmFtZXMgPSBhd2FpdCB0aGlzLl9nZXRUbXBEaXJzTGlzdCh0aGlzLm5hbWVQcmVmaXgpO1xuXG4gICAgICAgIERFQlVHX0xPR0dFUignRm91bmQgdGVtcCBkaXJlY3RvcmllczonLCB0bXBEaXJOYW1lcyk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdUbXBEaXJGb3VuZCA9IGF3YWl0IHRoaXMuX2ZpbmRGcmVlVG1wRGlyKHRtcERpck5hbWVzKTtcblxuICAgICAgICBpZiAoIWV4aXN0aW5nVG1wRGlyRm91bmQpXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9jcmVhdGVOZXdUbXBEaXIoKTtcblxuICAgICAgICBERUJVR19MT0dHRVIoJ1RlbXAgZGlyZWN0b3J5IHBhdGg6ICcsIHRoaXMucGF0aCk7XG5cbiAgICAgICAgYXdhaXQgY2xlYW51cFByb2Nlc3MuaW5pdCgpO1xuICAgICAgICBhd2FpdCBjbGVhbnVwUHJvY2Vzcy5hZGREaXJlY3RvcnkodGhpcy5wYXRoKTtcblxuICAgICAgICBVU0VEX1RFTVBfRElSU1t0aGlzLnBhdGhdID0gdGhpcztcbiAgICB9XG5cbiAgICBhc3luYyBkaXNwb3NlICgpIHtcbiAgICAgICAgaWYgKCFVU0VEX1RFTVBfRElSU1t0aGlzLnBhdGhdKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMubG9ja0ZpbGUuZGlzcG9zZSgpO1xuXG4gICAgICAgIGF3YWl0IGNsZWFudXBQcm9jZXNzLnJlbW92ZURpcmVjdG9yeSh0aGlzLnBhdGgpO1xuXG4gICAgICAgIGRlbGV0ZSBVU0VEX1RFTVBfRElSU1t0aGlzLnBhdGhdO1xuICAgIH1cbn1cblxuLy8gTk9URTogZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3Nlc1xuVGVtcERpcmVjdG9yeS5URU1QX0RJUkVDVE9SSUVTX1JPT1QgPSBURVNUQ0FGRV9UTVBfRElSU19ST09UO1xuXG5zZXR1cEV4aXRIb29rKFRlbXBEaXJlY3RvcnkuZGlzcG9zZURpcmVjdG9yaWVzU3luYyk7XG4iXX0=
