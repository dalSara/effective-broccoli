'use strict';

exports.__esModule = true;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

class Assignable {
    _getAssignableProperties() {
        throw new Error('Not implemented');
    }

    _assignFrom(obj, validate, initOptions = {}) {
        if (!obj) return;

        var props = this._getAssignableProperties();

        for (var i = 0; i < props.length; i++) {
            var _props$i = props[i],
                name = _props$i.name,
                type = _props$i.type,
                required = _props$i.required,
                init = _props$i.init,
                defaultValue = _props$i.defaultValue;


            var path = name.split('.');
            var lastIdx = path.length - 1;
            var last = path[lastIdx];
            var srcObj = obj;
            var destObj = this;

            for (var j = 0; j < lastIdx && srcObj && destObj; j++) {
                srcObj = srcObj[path[j]];
                destObj = destObj[path[j]];
            }

            if (destObj && 'defaultValue' in props[i]) destObj[name] = defaultValue;

            if (srcObj && destObj) {
                var srcVal = srcObj[last];

                if (srcVal !== void 0 || required) {
                    if (validate && type) type(name, srcVal);

                    destObj[last] = init ? init(name, srcVal, initOptions) : srcVal;
                }
            }
        }
    }
}
exports.default = Assignable;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9hc3NpZ25hYmxlLmpzIl0sIm5hbWVzIjpbIkFzc2lnbmFibGUiLCJfZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMiLCJFcnJvciIsIl9hc3NpZ25Gcm9tIiwib2JqIiwidmFsaWRhdGUiLCJpbml0T3B0aW9ucyIsInByb3BzIiwiaSIsImxlbmd0aCIsIm5hbWUiLCJ0eXBlIiwicmVxdWlyZWQiLCJpbml0IiwiZGVmYXVsdFZhbHVlIiwicGF0aCIsInNwbGl0IiwibGFzdElkeCIsImxhc3QiLCJzcmNPYmoiLCJkZXN0T2JqIiwiaiIsInNyY1ZhbCJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRWUsTUFBTUEsVUFBTixDQUFpQjtBQUM1QkMsK0JBQTRCO0FBQ3hCLGNBQU0sSUFBSUMsS0FBSixDQUFVLGlCQUFWLENBQU47QUFDSDs7QUFFREMsZ0JBQWFDLEdBQWIsRUFBa0JDLFFBQWxCLEVBQTRCQyxjQUFjLEVBQTFDLEVBQThDO0FBQzFDLFlBQUksQ0FBQ0YsR0FBTCxFQUNJOztBQUVKLFlBQUlHLFFBQVEsS0FBS04sd0JBQUwsRUFBWjs7QUFFQSxhQUFLLElBQUlPLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsTUFBTUUsTUFBMUIsRUFBa0NELEdBQWxDLEVBQXVDO0FBQUEsMkJBQ2dCRCxNQUFNQyxDQUFOLENBRGhCO0FBQUEsZ0JBQzdCRSxJQUQ2QixZQUM3QkEsSUFENkI7QUFBQSxnQkFDdkJDLElBRHVCLFlBQ3ZCQSxJQUR1QjtBQUFBLGdCQUNqQkMsUUFEaUIsWUFDakJBLFFBRGlCO0FBQUEsZ0JBQ1BDLElBRE8sWUFDUEEsSUFETztBQUFBLGdCQUNEQyxZQURDLFlBQ0RBLFlBREM7OztBQUduQyxnQkFBSUMsT0FBVUwsS0FBS00sS0FBTCxDQUFXLEdBQVgsQ0FBZDtBQUNBLGdCQUFJQyxVQUFVRixLQUFLTixNQUFMLEdBQWMsQ0FBNUI7QUFDQSxnQkFBSVMsT0FBVUgsS0FBS0UsT0FBTCxDQUFkO0FBQ0EsZ0JBQUlFLFNBQVVmLEdBQWQ7QUFDQSxnQkFBSWdCLFVBQVUsSUFBZDs7QUFFQSxpQkFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlKLE9BQUosSUFBZUUsTUFBZixJQUF5QkMsT0FBekMsRUFBa0RDLEdBQWxELEVBQXVEO0FBQ25ERix5QkFBVUEsT0FBT0osS0FBS00sQ0FBTCxDQUFQLENBQVY7QUFDQUQsMEJBQVVBLFFBQVFMLEtBQUtNLENBQUwsQ0FBUixDQUFWO0FBQ0g7O0FBRUQsZ0JBQUlELFdBQVcsa0JBQWtCYixNQUFNQyxDQUFOLENBQWpDLEVBQ0lZLFFBQVFWLElBQVIsSUFBZ0JJLFlBQWhCOztBQUVKLGdCQUFJSyxVQUFVQyxPQUFkLEVBQXVCO0FBQ25CLG9CQUFJRSxTQUFTSCxPQUFPRCxJQUFQLENBQWI7O0FBRUEsb0JBQUlJLFdBQVcsS0FBSyxDQUFoQixJQUFxQlYsUUFBekIsRUFBbUM7QUFDL0Isd0JBQUlQLFlBQVlNLElBQWhCLEVBQ0lBLEtBQUtELElBQUwsRUFBV1ksTUFBWDs7QUFFSkYsNEJBQVFGLElBQVIsSUFBZ0JMLE9BQU9BLEtBQUtILElBQUwsRUFBV1ksTUFBWCxFQUFtQmhCLFdBQW5CLENBQVAsR0FBeUNnQixNQUF6RDtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBdkMyQjtrQkFBWHRCLFUiLCJmaWxlIjoidXRpbHMvYXNzaWduYWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFdBUk5JTkc6IHRoaXMgZmlsZSBpcyB1c2VkIGJ5IGJvdGggdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlci5cbi8vIERvIG5vdCB1c2UgYW55IGJyb3dzZXIgb3Igbm9kZS1zcGVjaWZpYyBBUEkhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzc2lnbmFibGUge1xuICAgIF9nZXRBc3NpZ25hYmxlUHJvcGVydGllcyAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxuXG4gICAgX2Fzc2lnbkZyb20gKG9iaiwgdmFsaWRhdGUsIGluaXRPcHRpb25zID0ge30pIHtcbiAgICAgICAgaWYgKCFvYmopXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5fZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgeyBuYW1lLCB0eXBlLCByZXF1aXJlZCwgaW5pdCwgZGVmYXVsdFZhbHVlIH0gPSBwcm9wc1tpXTtcblxuICAgICAgICAgICAgdmFyIHBhdGggICAgPSBuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICB2YXIgbGFzdElkeCA9IHBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIHZhciBsYXN0ICAgID0gcGF0aFtsYXN0SWR4XTtcbiAgICAgICAgICAgIHZhciBzcmNPYmogID0gb2JqO1xuICAgICAgICAgICAgdmFyIGRlc3RPYmogPSB0aGlzO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxhc3RJZHggJiYgc3JjT2JqICYmIGRlc3RPYmo7IGorKykge1xuICAgICAgICAgICAgICAgIHNyY09iaiAgPSBzcmNPYmpbcGF0aFtqXV07XG4gICAgICAgICAgICAgICAgZGVzdE9iaiA9IGRlc3RPYmpbcGF0aFtqXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZXN0T2JqICYmICdkZWZhdWx0VmFsdWUnIGluIHByb3BzW2ldKVxuICAgICAgICAgICAgICAgIGRlc3RPYmpbbmFtZV0gPSBkZWZhdWx0VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChzcmNPYmogJiYgZGVzdE9iaikge1xuICAgICAgICAgICAgICAgIHZhciBzcmNWYWwgPSBzcmNPYmpbbGFzdF07XG5cbiAgICAgICAgICAgICAgICBpZiAoc3JjVmFsICE9PSB2b2lkIDAgfHwgcmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlICYmIHR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlKG5hbWUsIHNyY1ZhbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVzdE9ialtsYXN0XSA9IGluaXQgPyBpbml0KG5hbWUsIHNyY1ZhbCwgaW5pdE9wdGlvbnMpIDogc3JjVmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==
