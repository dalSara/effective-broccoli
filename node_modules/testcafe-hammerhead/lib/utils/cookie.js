'use strict';

exports.__esModule = true;
exports.SYNCHRONIZATION_TYPE = undefined;
exports.parseClientSyncCookieStr = parseClientSyncCookieStr;
exports.formatSyncCookie = formatSyncCookie;
exports.parseSyncCookie = parseSyncCookie;
exports.changeSyncType = changeSyncType;
exports.isOutdatedSyncCookie = isOutdatedSyncCookie;
exports.generateDeleteSyncCookieStr = generateDeleteSyncCookieStr;

var _stringTrim = require('./string-trim');

var _stringTrim2 = _interopRequireDefault(_stringTrim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TIME_RADIX = 36; // -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

var CLEAR_COOKIE_VALUE_STR = '=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT';

var SYNCHRONIZATION_TYPE = exports.SYNCHRONIZATION_TYPE = {
    server: 's',
    client: 'c',
    window: 'f'
};

var SYNCHRONIZATION_TYPE_RE = new RegExp(`^[${SYNCHRONIZATION_TYPE.server}${SYNCHRONIZATION_TYPE.client}${SYNCHRONIZATION_TYPE.window}]+`);

function isSameCookies(cookie1, cookie2) {
    return cookie1.sid === cookie2.sid && cookie1.key === cookie2.key && cookie1.domain === cookie2.domain && cookie1.path === cookie2.path;
}

function sortByOutdatedAndActual(parsedCookies) {
    var outdated = [];
    var actual = [];

    for (var current = 0; current < parsedCookies.length; current++) {
        var other = current + 1;

        for (; other < parsedCookies.length; other++) {
            if (isSameCookies(parsedCookies[current], parsedCookies[other])) {
                if (parsedCookies[current].lastAccessed > parsedCookies[other].lastAccessed) {
                    var temp = parsedCookies[current];

                    parsedCookies[current] = parsedCookies[other];
                    parsedCookies[other] = temp;
                }

                outdated.push(parsedCookies[current]);
                break;
            }
        }

        if (other === parsedCookies.length) actual.push(parsedCookies[current]);
    }

    return { outdated, actual };
}

function stringifySyncType(cookie) {
    return (cookie.isServerSync ? SYNCHRONIZATION_TYPE.server : '') + (cookie.isClientSync ? SYNCHRONIZATION_TYPE.client : '') + (cookie.isWindowSync ? SYNCHRONIZATION_TYPE.window : '');
}

function parseClientSyncCookieStr(cookieStr) {
    var cookies = cookieStr ? cookieStr.split(';') : '';
    var parsedCookies = [];

    for (var _iterator = cookies, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var cookie = _ref;

        var parsedCookie = parseSyncCookie((0, _stringTrim2.default)(cookie));

        if (parsedCookie) parsedCookies.push(parsedCookie);
    }

    return sortByOutdatedAndActual(parsedCookies);
}

function formatSyncCookie(cookie) {
    var syncType = stringifySyncType(cookie);
    var key = encodeURIComponent(cookie.key);
    var domain = encodeURIComponent(cookie.domain);
    var path = encodeURIComponent(cookie.path);
    var expires = cookie.expires !== 'Infinity' ? cookie.expires.getTime().toString(TIME_RADIX) : '';
    var lastAccessed = cookie.lastAccessed.getTime().toString(TIME_RADIX);

    return `${syncType}|${cookie.sid}|${key}|${domain}|${path}|${expires}|${lastAccessed}=${cookie.value};path=/`;
}

function parseSyncCookie(cookieStr) {
    var parsedCookie = cookieStr.split('=');
    var key = parsedCookie.length < 2 ? '' : parsedCookie.shift();
    var parsedKey = key.split('|');

    if (parsedKey.length !== 7) return null;

    return {
        isServerSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.server) > -1,
        isClientSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.client) > -1,
        isWindowSync: parsedKey[0].indexOf(SYNCHRONIZATION_TYPE.window) > -1,
        sid: parsedKey[1],
        key: decodeURIComponent(parsedKey[2]),
        domain: decodeURIComponent(parsedKey[3]),
        path: decodeURIComponent(parsedKey[4]),
        expires: parsedKey[5] ? new Date(parseInt(parsedKey[5], TIME_RADIX)) : 'Infinity',
        lastAccessed: new Date(parseInt(parsedKey[6], TIME_RADIX)),
        value: parsedCookie.join('='),
        syncKey: key,

        cookieStr
    };
}

function changeSyncType(parsedCookie, flags) {
    if ('server' in flags) parsedCookie.isServerSync = flags.server;

    if ('client' in flags) parsedCookie.isClientSync = flags.client;

    if ('window' in flags) parsedCookie.isWindowSync = flags.window;

    var newSyncTypeStr = stringifySyncType(parsedCookie);

    parsedCookie.syncKey = parsedCookie.syncKey.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
    parsedCookie.cookieStr = parsedCookie.cookieStr.replace(SYNCHRONIZATION_TYPE_RE, newSyncTypeStr);
}

function isOutdatedSyncCookie(currentCookie, newCookie) {
    return newCookie.isServerSync === currentCookie.isServerSync && newCookie.sid === currentCookie.sid && newCookie.key === currentCookie.key && newCookie.domain === currentCookie.domain && newCookie.path === currentCookie.path && newCookie.lastAccessed > currentCookie.lastAccessed;
}

function generateDeleteSyncCookieStr(cookie) {
    return cookie.syncKey + CLEAR_COOKIE_VALUE_STR;
}