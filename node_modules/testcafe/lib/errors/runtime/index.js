'use strict';

exports.__esModule = true;
exports.ClientFunctionAPIError = exports.APIError = exports.TestCompilationError = exports.GeneralError = undefined;

var _callsiteRecord = require('callsite-record');

var _message = require('./message');

var _message2 = _interopRequireDefault(_message);

var _createStackFilter = require('../create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

var _getCallsite = require('../get-callsite');

var _renderTemplate = require('../../utils/render-template');

var _renderTemplate2 = _interopRequireDefault(_renderTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Errors
class GeneralError extends Error {
    constructor() {
        super(_renderTemplate2.default.apply(null, arguments));
        Error.captureStackTrace(this, GeneralError);

        // HACK: workaround for the `instanceof` problem
        // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
        this.constructor = GeneralError;
    }
}

exports.GeneralError = GeneralError;
class TestCompilationError extends Error {
    constructor(originalError) {
        super((0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, originalError.toString()));

        // NOTE: stack includes message as well.
        this.stack = (0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, originalError.stack);
        this.constructor = TestCompilationError;
    }
}

exports.TestCompilationError = TestCompilationError;
class APIError extends Error {
    constructor(methodName, template, ...args) {
        var rawMessage = (0, _renderTemplate2.default)(template, ...args);

        super((0, _renderTemplate2.default)(_message2.default.cannotPrepareTestsDueToError, rawMessage));

        // NOTE: `rawMessage` is used in error substitution if it occurs in test run.
        this.rawMessage = rawMessage;
        this.callsite = (0, _getCallsite.getCallsiteForMethod)(methodName);
        this.constructor = APIError;

        // HACK: prototype properties don't work with built-in subclasses
        // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
        Object.defineProperty(this, 'stack', {
            get: () => APIError._createStack(this.message, this.callsite, _callsiteRecord.renderers.noColor)
        });

        Object.defineProperty(this, 'coloredStack', {
            get: () => APIError._createStack(this.message, this.callsite, _callsiteRecord.renderers.default)
        });
    }

    static _createStack(message, callsiteRecord, renderer) {
        return message + '\n\n' + callsiteRecord.renderSync({
            renderer: renderer,
            stackFilter: (0, _createStackFilter2.default)(Error.stackTraceLimit)
        });
    }
}

exports.APIError = APIError;
class ClientFunctionAPIError extends APIError {
    constructor(methodName, instantiationCallsiteName, template, ...args) {
        template = template.replace(/\{#instantiationCallsiteName\}/g, instantiationCallsiteName);

        super(methodName, template, ...args);
    }
}
exports.ClientFunctionAPIError = ClientFunctionAPIError;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcnJvcnMvcnVudGltZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJHZW5lcmFsRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwicmVuZGVyVGVtcGxhdGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImNhcHR1cmVTdGFja1RyYWNlIiwiVGVzdENvbXBpbGF0aW9uRXJyb3IiLCJvcmlnaW5hbEVycm9yIiwiTUVTU0FHRSIsImNhbm5vdFByZXBhcmVUZXN0c0R1ZVRvRXJyb3IiLCJ0b1N0cmluZyIsInN0YWNrIiwiQVBJRXJyb3IiLCJtZXRob2ROYW1lIiwidGVtcGxhdGUiLCJhcmdzIiwicmF3TWVzc2FnZSIsImNhbGxzaXRlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJfY3JlYXRlU3RhY2siLCJtZXNzYWdlIiwicmVuZGVyZXJzIiwibm9Db2xvciIsImRlZmF1bHQiLCJjYWxsc2l0ZVJlY29yZCIsInJlbmRlcmVyIiwicmVuZGVyU3luYyIsInN0YWNrRmlsdGVyIiwic3RhY2tUcmFjZUxpbWl0IiwiQ2xpZW50RnVuY3Rpb25BUElFcnJvciIsImluc3RhbnRpYXRpb25DYWxsc2l0ZU5hbWUiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUE7QUFDTyxNQUFNQSxZQUFOLFNBQTJCQyxLQUEzQixDQUFpQztBQUNwQ0Msa0JBQWU7QUFDWCxjQUFNQyx5QkFBZUMsS0FBZixDQUFxQixJQUFyQixFQUEyQkMsU0FBM0IsQ0FBTjtBQUNBSixjQUFNSyxpQkFBTixDQUF3QixJQUF4QixFQUE4Qk4sWUFBOUI7O0FBRUE7QUFDQTtBQUNBLGFBQUtFLFdBQUwsR0FBbUJGLFlBQW5CO0FBQ0g7QUFSbUM7O1FBQTNCQSxZLEdBQUFBLFk7QUFXTixNQUFNTyxvQkFBTixTQUFtQ04sS0FBbkMsQ0FBeUM7QUFDNUNDLGdCQUFhTSxhQUFiLEVBQTRCO0FBQ3hCLGNBQU0sOEJBQWVDLGtCQUFRQyw0QkFBdkIsRUFBcURGLGNBQWNHLFFBQWQsRUFBckQsQ0FBTjs7QUFFQTtBQUNBLGFBQUtDLEtBQUwsR0FBbUIsOEJBQWVILGtCQUFRQyw0QkFBdkIsRUFBcURGLGNBQWNJLEtBQW5FLENBQW5CO0FBQ0EsYUFBS1YsV0FBTCxHQUFtQkssb0JBQW5CO0FBQ0g7QUFQMkM7O1FBQW5DQSxvQixHQUFBQSxvQjtBQVVOLE1BQU1NLFFBQU4sU0FBdUJaLEtBQXZCLENBQTZCO0FBQ2hDQyxnQkFBYVksVUFBYixFQUF5QkMsUUFBekIsRUFBbUMsR0FBR0MsSUFBdEMsRUFBNEM7QUFDeEMsWUFBSUMsYUFBYSw4QkFBZUYsUUFBZixFQUF5QixHQUFHQyxJQUE1QixDQUFqQjs7QUFFQSxjQUFNLDhCQUFlUCxrQkFBUUMsNEJBQXZCLEVBQXFETyxVQUFyRCxDQUFOOztBQUVBO0FBQ0EsYUFBS0EsVUFBTCxHQUFtQkEsVUFBbkI7QUFDQSxhQUFLQyxRQUFMLEdBQW1CLHVDQUFxQkosVUFBckIsQ0FBbkI7QUFDQSxhQUFLWixXQUFMLEdBQW1CVyxRQUFuQjs7QUFFQTtBQUNBO0FBQ0FNLGVBQU9DLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsT0FBNUIsRUFBcUM7QUFDakNDLGlCQUFLLE1BQU1SLFNBQVNTLFlBQVQsQ0FBc0IsS0FBS0MsT0FBM0IsRUFBb0MsS0FBS0wsUUFBekMsRUFBbURNLDBCQUFVQyxPQUE3RDtBQURzQixTQUFyQzs7QUFJQU4sZUFBT0MsY0FBUCxDQUFzQixJQUF0QixFQUE0QixjQUE1QixFQUE0QztBQUN4Q0MsaUJBQUssTUFBTVIsU0FBU1MsWUFBVCxDQUFzQixLQUFLQyxPQUEzQixFQUFvQyxLQUFLTCxRQUF6QyxFQUFtRE0sMEJBQVVFLE9BQTdEO0FBRDZCLFNBQTVDO0FBR0g7O0FBRUQsV0FBT0osWUFBUCxDQUFxQkMsT0FBckIsRUFBOEJJLGNBQTlCLEVBQThDQyxRQUE5QyxFQUF3RDtBQUNwRCxlQUFPTCxVQUNBLE1BREEsR0FFQUksZUFBZUUsVUFBZixDQUEwQjtBQUN0QkQsc0JBQWFBLFFBRFM7QUFFdEJFLHlCQUFhLGlDQUFrQjdCLE1BQU04QixlQUF4QjtBQUZTLFNBQTFCLENBRlA7QUFNSDtBQTdCK0I7O1FBQXZCbEIsUSxHQUFBQSxRO0FBZ0NOLE1BQU1tQixzQkFBTixTQUFxQ25CLFFBQXJDLENBQThDO0FBQ2pEWCxnQkFBYVksVUFBYixFQUF5Qm1CLHlCQUF6QixFQUFvRGxCLFFBQXBELEVBQThELEdBQUdDLElBQWpFLEVBQXVFO0FBQ25FRCxtQkFBV0EsU0FBU21CLE9BQVQsQ0FBaUIsaUNBQWpCLEVBQW9ERCx5QkFBcEQsQ0FBWDs7QUFFQSxjQUFNbkIsVUFBTixFQUFrQkMsUUFBbEIsRUFBNEIsR0FBR0MsSUFBL0I7QUFDSDtBQUxnRDtRQUF4Q2dCLHNCLEdBQUFBLHNCIiwiZmlsZSI6ImVycm9ycy9ydW50aW1lL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyZXJzIH0gZnJvbSAnY2FsbHNpdGUtcmVjb3JkJztcbmltcG9ydCBNRVNTQUdFIGZyb20gJy4vbWVzc2FnZSc7XG5pbXBvcnQgY3JlYXRlU3RhY2tGaWx0ZXIgZnJvbSAnLi4vY3JlYXRlLXN0YWNrLWZpbHRlcic7XG5pbXBvcnQgeyBnZXRDYWxsc2l0ZUZvck1ldGhvZCB9IGZyb20gJy4uL2dldC1jYWxsc2l0ZSc7XG5pbXBvcnQgcmVuZGVyVGVtcGxhdGUgZnJvbSAnLi4vLi4vdXRpbHMvcmVuZGVyLXRlbXBsYXRlJztcblxuLy8gRXJyb3JzXG5leHBvcnQgY2xhc3MgR2VuZXJhbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgc3VwZXIocmVuZGVyVGVtcGxhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIEdlbmVyYWxFcnJvcik7XG5cbiAgICAgICAgLy8gSEFDSzogd29ya2Fyb3VuZCBmb3IgdGhlIGBpbnN0YW5jZW9mYCBwcm9ibGVtXG4gICAgICAgIC8vIChzZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzM4NzA2ODQvd2h5LWRvZXNudC1pbnN0YW5jZW9mLXdvcmstb24taW5zdGFuY2VzLW9mLWVycm9yLXN1YmNsYXNzZXMtdW5kZXItYmFiZWwtbm9kZSlcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IEdlbmVyYWxFcnJvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0Q29tcGlsYXRpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAob3JpZ2luYWxFcnJvcikge1xuICAgICAgICBzdXBlcihyZW5kZXJUZW1wbGF0ZShNRVNTQUdFLmNhbm5vdFByZXBhcmVUZXN0c0R1ZVRvRXJyb3IsIG9yaWdpbmFsRXJyb3IudG9TdHJpbmcoKSkpO1xuXG4gICAgICAgIC8vIE5PVEU6IHN0YWNrIGluY2x1ZGVzIG1lc3NhZ2UgYXMgd2VsbC5cbiAgICAgICAgdGhpcy5zdGFjayAgICAgICA9IHJlbmRlclRlbXBsYXRlKE1FU1NBR0UuY2Fubm90UHJlcGFyZVRlc3RzRHVlVG9FcnJvciwgb3JpZ2luYWxFcnJvci5zdGFjayk7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBUZXN0Q29tcGlsYXRpb25FcnJvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBUElFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWV0aG9kTmFtZSwgdGVtcGxhdGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgdmFyIHJhd01lc3NhZ2UgPSByZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgLi4uYXJncyk7XG5cbiAgICAgICAgc3VwZXIocmVuZGVyVGVtcGxhdGUoTUVTU0FHRS5jYW5ub3RQcmVwYXJlVGVzdHNEdWVUb0Vycm9yLCByYXdNZXNzYWdlKSk7XG5cbiAgICAgICAgLy8gTk9URTogYHJhd01lc3NhZ2VgIGlzIHVzZWQgaW4gZXJyb3Igc3Vic3RpdHV0aW9uIGlmIGl0IG9jY3VycyBpbiB0ZXN0IHJ1bi5cbiAgICAgICAgdGhpcy5yYXdNZXNzYWdlICA9IHJhd01lc3NhZ2U7XG4gICAgICAgIHRoaXMuY2FsbHNpdGUgICAgPSBnZXRDYWxsc2l0ZUZvck1ldGhvZChtZXRob2ROYW1lKTtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IEFQSUVycm9yO1xuXG4gICAgICAgIC8vIEhBQ0s6IHByb3RvdHlwZSBwcm9wZXJ0aWVzIGRvbid0IHdvcmsgd2l0aCBidWlsdC1pbiBzdWJjbGFzc2VzXG4gICAgICAgIC8vIChzZWU6IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzM4NzA2ODQvd2h5LWRvZXNudC1pbnN0YW5jZW9mLXdvcmstb24taW5zdGFuY2VzLW9mLWVycm9yLXN1YmNsYXNzZXMtdW5kZXItYmFiZWwtbm9kZSlcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgICAgICAgIGdldDogKCkgPT4gQVBJRXJyb3IuX2NyZWF0ZVN0YWNrKHRoaXMubWVzc2FnZSwgdGhpcy5jYWxsc2l0ZSwgcmVuZGVyZXJzLm5vQ29sb3IpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29sb3JlZFN0YWNrJywge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiBBUElFcnJvci5fY3JlYXRlU3RhY2sodGhpcy5tZXNzYWdlLCB0aGlzLmNhbGxzaXRlLCByZW5kZXJlcnMuZGVmYXVsdClcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIF9jcmVhdGVTdGFjayAobWVzc2FnZSwgY2FsbHNpdGVSZWNvcmQsIHJlbmRlcmVyKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlICtcbiAgICAgICAgICAgICAgICdcXG5cXG4nICtcbiAgICAgICAgICAgICAgIGNhbGxzaXRlUmVjb3JkLnJlbmRlclN5bmMoe1xuICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyOiAgICByZW5kZXJlcixcbiAgICAgICAgICAgICAgICAgICBzdGFja0ZpbHRlcjogY3JlYXRlU3RhY2tGaWx0ZXIoRXJyb3Iuc3RhY2tUcmFjZUxpbWl0KVxuICAgICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xpZW50RnVuY3Rpb25BUElFcnJvciBleHRlbmRzIEFQSUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvciAobWV0aG9kTmFtZSwgaW5zdGFudGlhdGlvbkNhbGxzaXRlTmFtZSwgdGVtcGxhdGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHsjaW5zdGFudGlhdGlvbkNhbGxzaXRlTmFtZVxcfS9nLCBpbnN0YW50aWF0aW9uQ2FsbHNpdGVOYW1lKTtcblxuICAgICAgICBzdXBlcihtZXRob2ROYW1lLCB0ZW1wbGF0ZSwgLi4uYXJncyk7XG4gICAgfVxufVxuIl19
