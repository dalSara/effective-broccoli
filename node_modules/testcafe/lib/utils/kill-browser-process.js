'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let runWMIC = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (args) {
        const wmicProcess = (0, _child_process.spawn)('wmic.exe', args, { detached: true });

        let wmicOutput = '';

        wmicProcess.stdout.on('data', function (data) {
            wmicOutput += data.toString();
        });

        try {
            yield _pinkie2.default.race([(0, _promisifyEvent2.default)(wmicProcess.stdout, 'end'), (0, _promisifyEvent2.default)(wmicProcess, 'error')]);

            return wmicOutput;
        } catch (e) {
            return '';
        }
    });

    return function runWMIC(_x) {
        return _ref.apply(this, arguments);
    };
})();

let findProcessWin = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (processOptions) {
        var wmicArgs = ['process', 'where', `commandline like '%${processOptions.arguments}%' and name <> 'cmd.exe' and name <> 'wmic.exe'`, 'get', 'processid'];
        var wmicOutput = yield runWMIC(wmicArgs);
        var processList = wmicOutput.split(/\s*\n/);

        processList = processList
        // NOTE: remove list's header and empty last element, caused by trailing newline
        .slice(1, -1).map(function (pid) {
            return { pid: Number(pid) };
        });

        return processList;
    });

    return function findProcessWin(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

var _child_process = require('child_process');

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _promisifiedFunctions = require('./promisified-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BROWSER_CLOSING_TIMEOUT = 5;

exports.default = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (browserId) {
        var processOptions = { arguments: browserId, psargs: '-ef' };
        var processList = _osFamily2.default.win ? yield findProcessWin(processOptions) : yield (0, _promisifiedFunctions.findProcess)(processOptions);

        if (!processList.length) return true;

        try {
            if (_osFamily2.default.win) process.kill(processList[0].pid);else yield (0, _promisifiedFunctions.killProcess)(processList[0].pid, { timeout: BROWSER_CLOSING_TIMEOUT });

            return true;
        } catch (e) {
            return false;
        }
    });

    return function (_x3) {
        return _ref3.apply(this, arguments);
    };
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9raWxsLWJyb3dzZXItcHJvY2Vzcy5qcyJdLCJuYW1lcyI6WyJhcmdzIiwid21pY1Byb2Nlc3MiLCJkZXRhY2hlZCIsIndtaWNPdXRwdXQiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJ0b1N0cmluZyIsIlByb21pc2UiLCJyYWNlIiwiZSIsInJ1bldNSUMiLCJwcm9jZXNzT3B0aW9ucyIsIndtaWNBcmdzIiwiYXJndW1lbnRzIiwicHJvY2Vzc0xpc3QiLCJzcGxpdCIsInNsaWNlIiwibWFwIiwicGlkIiwiTnVtYmVyIiwiZmluZFByb2Nlc3NXaW4iLCJCUk9XU0VSX0NMT1NJTkdfVElNRU9VVCIsImJyb3dzZXJJZCIsInBzYXJncyIsIk9TIiwid2luIiwibGVuZ3RoIiwicHJvY2VzcyIsImtpbGwiLCJ0aW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7K0NBU0EsV0FBd0JBLElBQXhCLEVBQThCO0FBQzFCLGNBQU1DLGNBQWMsMEJBQU0sVUFBTixFQUFrQkQsSUFBbEIsRUFBd0IsRUFBRUUsVUFBVSxJQUFaLEVBQXhCLENBQXBCOztBQUVBLFlBQUlDLGFBQWMsRUFBbEI7O0FBRUFGLG9CQUFZRyxNQUFaLENBQW1CQyxFQUFuQixDQUFzQixNQUF0QixFQUE4QixnQkFBUTtBQUNsQ0YsMEJBQWNHLEtBQUtDLFFBQUwsRUFBZDtBQUNILFNBRkQ7O0FBSUEsWUFBSTtBQUNBLGtCQUFNQyxpQkFBUUMsSUFBUixDQUFhLENBQ2YsOEJBQWVSLFlBQVlHLE1BQTNCLEVBQW1DLEtBQW5DLENBRGUsRUFFZiw4QkFBZUgsV0FBZixFQUE0QixPQUE1QixDQUZlLENBQWIsQ0FBTjs7QUFLQSxtQkFBT0UsVUFBUDtBQUNILFNBUEQsQ0FRQSxPQUFPTyxDQUFQLEVBQVU7QUFDTixtQkFBTyxFQUFQO0FBQ0g7QUFDSixLOztvQkFwQmNDLE87Ozs7OztnREFzQmYsV0FBK0JDLGNBQS9CLEVBQStDO0FBQzNDLFlBQUlDLFdBQWMsQ0FBQyxTQUFELEVBQVksT0FBWixFQUFzQixzQkFBcUJELGVBQWVFLFNBQVUsaURBQXBFLEVBQXNILEtBQXRILEVBQTZILFdBQTdILENBQWxCO0FBQ0EsWUFBSVgsYUFBYyxNQUFNUSxRQUFRRSxRQUFSLENBQXhCO0FBQ0EsWUFBSUUsY0FBY1osV0FBV2EsS0FBWCxDQUFpQixPQUFqQixDQUFsQjs7QUFFQUQsc0JBQWNBO0FBQ1Y7QUFEVSxTQUVURSxLQUZTLENBRUgsQ0FGRyxFQUVBLENBQUMsQ0FGRCxFQUdUQyxHQUhTLENBR0w7QUFBQSxtQkFBUSxFQUFFQyxLQUFLQyxPQUFPRCxHQUFQLENBQVAsRUFBUjtBQUFBLFNBSEssQ0FBZDs7QUFLQSxlQUFPSixXQUFQO0FBQ0gsSzs7b0JBWGNNLGM7Ozs7O0FBL0JmOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBR0EsTUFBTUMsMEJBQTBCLENBQWhDOzs7Z0RBcUNlLFdBQWdCQyxTQUFoQixFQUEyQjtBQUN0QyxZQUFJWCxpQkFBaUIsRUFBRUUsV0FBV1MsU0FBYixFQUF3QkMsUUFBUSxLQUFoQyxFQUFyQjtBQUNBLFlBQUlULGNBQWlCVSxtQkFBR0MsR0FBSCxHQUFTLE1BQU1MLGVBQWVULGNBQWYsQ0FBZixHQUFnRCxNQUFNLHVDQUFZQSxjQUFaLENBQTNFOztBQUVBLFlBQUksQ0FBQ0csWUFBWVksTUFBakIsRUFDSSxPQUFPLElBQVA7O0FBRUosWUFBSTtBQUNBLGdCQUFJRixtQkFBR0MsR0FBUCxFQUNJRSxRQUFRQyxJQUFSLENBQWFkLFlBQVksQ0FBWixFQUFlSSxHQUE1QixFQURKLEtBR0ksTUFBTSx1Q0FBWUosWUFBWSxDQUFaLEVBQWVJLEdBQTNCLEVBQWdDLEVBQUVXLFNBQVNSLHVCQUFYLEVBQWhDLENBQU47O0FBRUosbUJBQU8sSUFBUDtBQUNILFNBUEQsQ0FRQSxPQUFPWixDQUFQLEVBQVU7QUFDTixtQkFBTyxLQUFQO0FBQ0g7QUFDSixLIiwiZmlsZSI6InV0aWxzL2tpbGwtYnJvd3Nlci1wcm9jZXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBPUyBmcm9tICdvcy1mYW1pbHknO1xuaW1wb3J0IHByb21pc2lmeUV2ZW50IGZyb20gJ3Byb21pc2lmeS1ldmVudCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgZmluZFByb2Nlc3MsIGtpbGxQcm9jZXNzIH0gZnJvbSAnLi9wcm9taXNpZmllZC1mdW5jdGlvbnMnO1xuXG5cbmNvbnN0IEJST1dTRVJfQ0xPU0lOR19USU1FT1VUID0gNTtcblxuYXN5bmMgZnVuY3Rpb24gcnVuV01JQyAoYXJncykge1xuICAgIGNvbnN0IHdtaWNQcm9jZXNzID0gc3Bhd24oJ3dtaWMuZXhlJywgYXJncywgeyBkZXRhY2hlZDogdHJ1ZSB9KTtcblxuICAgIGxldCB3bWljT3V0cHV0ICA9ICcnO1xuXG4gICAgd21pY1Byb2Nlc3Muc3Rkb3V0Lm9uKCdkYXRhJywgZGF0YSA9PiB7XG4gICAgICAgIHdtaWNPdXRwdXQgKz0gZGF0YS50b1N0cmluZygpO1xuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgIHByb21pc2lmeUV2ZW50KHdtaWNQcm9jZXNzLnN0ZG91dCwgJ2VuZCcpLFxuICAgICAgICAgICAgcHJvbWlzaWZ5RXZlbnQod21pY1Byb2Nlc3MsICdlcnJvcicpXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHJldHVybiB3bWljT3V0cHV0O1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBmaW5kUHJvY2Vzc1dpbiAocHJvY2Vzc09wdGlvbnMpIHtcbiAgICB2YXIgd21pY0FyZ3MgICAgPSBbJ3Byb2Nlc3MnLCAnd2hlcmUnLCBgY29tbWFuZGxpbmUgbGlrZSAnJSR7cHJvY2Vzc09wdGlvbnMuYXJndW1lbnRzfSUnIGFuZCBuYW1lIDw+ICdjbWQuZXhlJyBhbmQgbmFtZSA8PiAnd21pYy5leGUnYCwgJ2dldCcsICdwcm9jZXNzaWQnXTtcbiAgICB2YXIgd21pY091dHB1dCAgPSBhd2FpdCBydW5XTUlDKHdtaWNBcmdzKTtcbiAgICB2YXIgcHJvY2Vzc0xpc3QgPSB3bWljT3V0cHV0LnNwbGl0KC9cXHMqXFxuLyk7XG5cbiAgICBwcm9jZXNzTGlzdCA9IHByb2Nlc3NMaXN0XG4gICAgICAgIC8vIE5PVEU6IHJlbW92ZSBsaXN0J3MgaGVhZGVyIGFuZCBlbXB0eSBsYXN0IGVsZW1lbnQsIGNhdXNlZCBieSB0cmFpbGluZyBuZXdsaW5lXG4gICAgICAgIC5zbGljZSgxLCAtMSlcbiAgICAgICAgLm1hcChwaWQgPT4gKHsgcGlkOiBOdW1iZXIocGlkKSB9KSk7XG5cbiAgICByZXR1cm4gcHJvY2Vzc0xpc3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIChicm93c2VySWQpIHtcbiAgICB2YXIgcHJvY2Vzc09wdGlvbnMgPSB7IGFyZ3VtZW50czogYnJvd3NlcklkLCBwc2FyZ3M6ICctZWYnIH07XG4gICAgdmFyIHByb2Nlc3NMaXN0ICAgID0gT1Mud2luID8gYXdhaXQgZmluZFByb2Nlc3NXaW4ocHJvY2Vzc09wdGlvbnMpIDogYXdhaXQgZmluZFByb2Nlc3MocHJvY2Vzc09wdGlvbnMpO1xuXG4gICAgaWYgKCFwcm9jZXNzTGlzdC5sZW5ndGgpXG4gICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKE9TLndpbilcbiAgICAgICAgICAgIHByb2Nlc3Mua2lsbChwcm9jZXNzTGlzdFswXS5waWQpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhd2FpdCBraWxsUHJvY2Vzcyhwcm9jZXNzTGlzdFswXS5waWQsIHsgdGltZW91dDogQlJPV1NFUl9DTE9TSU5HX1RJTUVPVVQgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4iXX0=
