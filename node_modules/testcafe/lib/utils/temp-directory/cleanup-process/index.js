'use strict';

exports.__esModule = true;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _child_process = require('child_process');

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _promisifiedFunctions = require('../../promisified-functions');

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WORKER_PATH = require.resolve('./worker');
const WORKER_STDIO_CONFIG = ['ignore', 'pipe', 'pipe', 'ipc'];

const DEBUG_LOGGER = (0, _debug2.default)('testcafe:utils:temp-directory:cleanup-process');

class CleanupProcess {
    constructor() {
        this.worker = null;
        this.initialized = false;
        this.initPromise = _pinkie2.default.resolve(void 0);

        this.messageCounter = 0;

        this.pendingResponses = {};
    }

    _sendMessage(id, msg) {
        return _pinkie2.default.race([(0, _promisifiedFunctions.sendMessageToChildProcess)(this.worker, (0, _extends3.default)({ id }, msg)), (0, _promisifyEvent2.default)(this.worker, 'error')]);
    }

    _onResponse(response) {
        const pendingResponse = this.pendingResponses[response.id];

        if (response.error) {
            if (pendingResponse) pendingResponse.control.reject(response.error);else this.pendingResponses[response.id] = _pinkie2.default.reject(response.error);
        } else if (pendingResponse) pendingResponse.control.resolve();else this.pendingResponses[response.id] = _pinkie2.default.resolve();
    }

    _waitResponse(id) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this.pendingResponses[id]) {
                const promiseControl = {};

                _this.pendingResponses[id] = new _pinkie2.default(function (resolve, reject) {
                    (0, _assign2.default)(promiseControl, { resolve, reject });
                });

                _this.pendingResponses[id].control = promiseControl;
            }

            try {
                yield _this.pendingResponses[id];
            } finally {
                delete _this.pendingResponses[id];
            }
        })();
    }

    _waitResponseForMessage(msg) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const currentId = _this2.messageCounter;

            _this2.messageCounter++;

            yield _this2._sendMessage(currentId, msg);
            yield _this2._waitResponse(currentId);
        })();
    }

    _waitProcessExit() {
        return (0, _promisifyEvent2.default)(this.worker, 'exit').then(exitCode => _pinkie2.default.reject(new Error(`Worker process terminated with code ${exitCode}`)));
    }

    _setupWorkerEventHandlers() {
        this.worker.on('message', message => this._onResponse(message));

        this.worker.stdout.on('data', data => DEBUG_LOGGER('Worker process stdout:\n', String(data)));
        this.worker.stderr.on('data', data => DEBUG_LOGGER('Worker process stderr:\n', String(data)));
    }

    _unrefWorkerProcess() {
        this.worker.unref();
        this.worker.stdout.unref();
        this.worker.stderr.unref();

        const channel = this.worker.channel || this.worker._channel;

        channel.unref();
    }

    _handleProcessError(error) {
        this.initialized = false;

        DEBUG_LOGGER(error);
    }

    init() {
        var _this3 = this;

        this.initPromise = this.initPromise.then((() => {
            var _ref = (0, _asyncToGenerator3.default)(function* (initialized) {
                if (initialized !== void 0) return initialized;

                _this3.worker = (0, _child_process.spawn)(process.argv[0], [WORKER_PATH], { detached: true, stdio: WORKER_STDIO_CONFIG });

                _this3._setupWorkerEventHandlers();
                _this3._unrefWorkerProcess();

                const exitPromise = _this3._waitProcessExit();

                try {
                    yield _pinkie2.default.race([_this3._waitResponseForMessage({ command: _commands2.default.init }), (0, _promisifyEvent2.default)(_this3.worker, 'error'), exitPromise]);

                    _this3.initialized = true;

                    exitPromise.catch(function (error) {
                        return _this3._handleProcessError(error);
                    });

                    _this3.worker.on('error', function (error) {
                        return _this3._handleProcessError(error);
                    });
                } catch (e) {
                    DEBUG_LOGGER('Failed to start cleanup process');
                    DEBUG_LOGGER(e);

                    _this3.initialized = false;
                }

                return _this3.initialized;
            });

            return function (_x) {
                return _ref.apply(this, arguments);
            };
        })());

        return this.initPromise;
    }

    addDirectory(path) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this4.initialized) return;

            try {
                yield _this4._waitResponseForMessage({ command: _commands2.default.add, path });
            } catch (e) {
                DEBUG_LOGGER(`Failed to add the ${path} directory to cleanup process`);
                DEBUG_LOGGER(e);
            }
        })();
    }

    removeDirectory(path) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (!_this5.initialized) return;

            try {
                yield _this5._waitResponseForMessage({ command: _commands2.default.remove, path });
            } catch (e) {
                DEBUG_LOGGER(`Failed to remove the ${path} directory in cleanup process`);
                DEBUG_LOGGER(e);
            }
        })();
    }
}

exports.default = new CleanupProcess();
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
