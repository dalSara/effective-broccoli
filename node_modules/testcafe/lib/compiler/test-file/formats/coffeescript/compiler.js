'use strict';

exports.__esModule = true;

var _coffeescript = require('coffeescript');

var _coffeescript2 = _interopRequireDefault(_coffeescript);

var _loadBabelLibs2 = require('../../../load-babel-libs');

var _loadBabelLibs3 = _interopRequireDefault(_loadBabelLibs2);

var _compiler = require('../es-next/compiler.js');

var _compiler2 = _interopRequireDefault(_compiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FIXTURE_RE = /(^|;|\s+)fixture\s*(\.|\(|'|")/;
const TEST_RE = /(^|;|\s+)test\s*/;

class CoffeeScriptTestFileCompiler extends _compiler2.default {
    _hasTests(code) {
        return FIXTURE_RE.test(code) && TEST_RE.test(code);
    }

    _compileCode(code, filename) {
        if (this.cache[filename]) return this.cache[filename];

        var transpiled = _coffeescript2.default.compile(code, {
            filename,
            bare: true,
            sourceMap: true,
            inlineMap: true,
            header: false
        });

        var _loadBabelLibs = (0, _loadBabelLibs3.default)(),
            babel = _loadBabelLibs.babel;

        var babelOptions = _compiler2.default.getBabelOptions(filename, code);
        var compiled = babel.transform(transpiled.js, babelOptions);

        this.cache[filename] = compiled.code;

        return compiled.code;
    }

    _getRequireCompilers() {
        return { '.coffee': (code, filename) => this._compileCode(code, filename) };
    }

    getSupportedExtension() {
        return '.coffee';
    }
}
exports.default = CoffeeScriptTestFileCompiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlci90ZXN0LWZpbGUvZm9ybWF0cy9jb2ZmZWVzY3JpcHQvY29tcGlsZXIuanMiXSwibmFtZXMiOlsiRklYVFVSRV9SRSIsIlRFU1RfUkUiLCJDb2ZmZWVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyIiwiRVNOZXh0VGVzdEZpbGVDb21waWxlciIsIl9oYXNUZXN0cyIsImNvZGUiLCJ0ZXN0IiwiX2NvbXBpbGVDb2RlIiwiZmlsZW5hbWUiLCJjYWNoZSIsInRyYW5zcGlsZWQiLCJDb2ZmZWVTY3JpcHQiLCJjb21waWxlIiwiYmFyZSIsInNvdXJjZU1hcCIsImlubGluZU1hcCIsImhlYWRlciIsImJhYmVsIiwiYmFiZWxPcHRpb25zIiwiZ2V0QmFiZWxPcHRpb25zIiwiY29tcGlsZWQiLCJ0cmFuc2Zvcm0iLCJqcyIsIl9nZXRSZXF1aXJlQ29tcGlsZXJzIiwiZ2V0U3VwcG9ydGVkRXh0ZW5zaW9uIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxhQUFhLGdDQUFuQjtBQUNBLE1BQU1DLFVBQWEsa0JBQW5COztBQUVlLE1BQU1DLDRCQUFOLFNBQTJDQyxrQkFBM0MsQ0FBa0U7QUFDN0VDLGNBQVdDLElBQVgsRUFBaUI7QUFDYixlQUFPTCxXQUFXTSxJQUFYLENBQWdCRCxJQUFoQixLQUF5QkosUUFBUUssSUFBUixDQUFhRCxJQUFiLENBQWhDO0FBQ0g7O0FBRURFLGlCQUFjRixJQUFkLEVBQW9CRyxRQUFwQixFQUE4QjtBQUMxQixZQUFJLEtBQUtDLEtBQUwsQ0FBV0QsUUFBWCxDQUFKLEVBQ0ksT0FBTyxLQUFLQyxLQUFMLENBQVdELFFBQVgsQ0FBUDs7QUFFSixZQUFJRSxhQUFhQyx1QkFBYUMsT0FBYixDQUFxQlAsSUFBckIsRUFBMkI7QUFDeENHLG9CQUR3QztBQUV4Q0ssa0JBQVcsSUFGNkI7QUFHeENDLHVCQUFXLElBSDZCO0FBSXhDQyx1QkFBVyxJQUo2QjtBQUt4Q0Msb0JBQVc7QUFMNkIsU0FBM0IsQ0FBakI7O0FBSjBCLDZCQVlQLDhCQVpPO0FBQUEsWUFZcEJDLEtBWm9CLGtCQVlwQkEsS0Fab0I7O0FBYTFCLFlBQUlDLGVBQWVmLG1CQUF1QmdCLGVBQXZCLENBQXVDWCxRQUF2QyxFQUFpREgsSUFBakQsQ0FBbkI7QUFDQSxZQUFJZSxXQUFlSCxNQUFNSSxTQUFOLENBQWdCWCxXQUFXWSxFQUEzQixFQUErQkosWUFBL0IsQ0FBbkI7O0FBRUEsYUFBS1QsS0FBTCxDQUFXRCxRQUFYLElBQXVCWSxTQUFTZixJQUFoQzs7QUFFQSxlQUFPZSxTQUFTZixJQUFoQjtBQUNIOztBQUVEa0IsMkJBQXdCO0FBQ3BCLGVBQU8sRUFBRSxXQUFXLENBQUNsQixJQUFELEVBQU9HLFFBQVAsS0FBb0IsS0FBS0QsWUFBTCxDQUFrQkYsSUFBbEIsRUFBd0JHLFFBQXhCLENBQWpDLEVBQVA7QUFDSDs7QUFFRGdCLDRCQUF5QjtBQUNyQixlQUFPLFNBQVA7QUFDSDtBQWhDNEU7a0JBQTVEdEIsNEIiLCJmaWxlIjoiY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvY29mZmVlc2NyaXB0L2NvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvZmZlZVNjcmlwdCBmcm9tICdjb2ZmZWVzY3JpcHQnO1xuaW1wb3J0IGxvYWRCYWJlbExpYnMgZnJvbSAnLi4vLi4vLi4vbG9hZC1iYWJlbC1saWJzJztcbmltcG9ydCBFU05leHRUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4uL2VzLW5leHQvY29tcGlsZXIuanMnO1xuXG5jb25zdCBGSVhUVVJFX1JFID0gLyhefDt8XFxzKylmaXh0dXJlXFxzKihcXC58XFwofCd8XCIpLztcbmNvbnN0IFRFU1RfUkUgICAgPSAvKF58O3xcXHMrKXRlc3RcXHMqLztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29mZmVlU2NyaXB0VGVzdEZpbGVDb21waWxlciBleHRlbmRzIEVTTmV4dFRlc3RGaWxlQ29tcGlsZXIge1xuICAgIF9oYXNUZXN0cyAoY29kZSkge1xuICAgICAgICByZXR1cm4gRklYVFVSRV9SRS50ZXN0KGNvZGUpICYmIFRFU1RfUkUudGVzdChjb2RlKTtcbiAgICB9XG5cbiAgICBfY29tcGlsZUNvZGUgKGNvZGUsIGZpbGVuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlW2ZpbGVuYW1lXSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlW2ZpbGVuYW1lXTtcblxuICAgICAgICB2YXIgdHJhbnNwaWxlZCA9IENvZmZlZVNjcmlwdC5jb21waWxlKGNvZGUsIHtcbiAgICAgICAgICAgIGZpbGVuYW1lLFxuICAgICAgICAgICAgYmFyZTogICAgICB0cnVlLFxuICAgICAgICAgICAgc291cmNlTWFwOiB0cnVlLFxuICAgICAgICAgICAgaW5saW5lTWFwOiB0cnVlLFxuICAgICAgICAgICAgaGVhZGVyOiAgICBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgeyBiYWJlbCB9ICAgID0gbG9hZEJhYmVsTGlicygpO1xuICAgICAgICB2YXIgYmFiZWxPcHRpb25zID0gRVNOZXh0VGVzdEZpbGVDb21waWxlci5nZXRCYWJlbE9wdGlvbnMoZmlsZW5hbWUsIGNvZGUpO1xuICAgICAgICB2YXIgY29tcGlsZWQgICAgID0gYmFiZWwudHJhbnNmb3JtKHRyYW5zcGlsZWQuanMsIGJhYmVsT3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jYWNoZVtmaWxlbmFtZV0gPSBjb21waWxlZC5jb2RlO1xuXG4gICAgICAgIHJldHVybiBjb21waWxlZC5jb2RlO1xuICAgIH1cblxuICAgIF9nZXRSZXF1aXJlQ29tcGlsZXJzICgpIHtcbiAgICAgICAgcmV0dXJuIHsgJy5jb2ZmZWUnOiAoY29kZSwgZmlsZW5hbWUpID0+IHRoaXMuX2NvbXBpbGVDb2RlKGNvZGUsIGZpbGVuYW1lKSB9O1xuICAgIH1cblxuICAgIGdldFN1cHBvcnRlZEV4dGVuc2lvbiAoKSB7XG4gICAgICAgIHJldHVybiAnLmNvZmZlZSc7XG4gICAgfVxufVxuIl19
