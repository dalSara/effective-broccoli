'use strict';

exports.__esModule = true;
exports.stop = exports.start = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let start = exports.start = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (pageUrl, { browserName, config, cdpPort, tempProfileDir }) {
        const chromeInfo = yield _testcafeBrowserTools2.default.getBrowserInfo(config.path || browserName);
        const chromeOpenParameters = (0, _assign2.default)({}, chromeInfo);

        chromeOpenParameters.cmd = buildChromeArgs(config, cdpPort, chromeOpenParameters.cmd, tempProfileDir);

        yield browserStarter.startBrowser(chromeOpenParameters, pageUrl);
    });

    return function start(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let stop = exports.stop = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* ({ browserId }) {
        // NOTE: Chrome on Linux closes only after the second SIGTERM signall
        if (!(yield (0, _killBrowserProcess2.default)(browserId))) yield (0, _killBrowserProcess2.default)(browserId);
    });

    return function stop(_x3) {
        return _ref2.apply(this, arguments);
    };
})();

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _killBrowserProcess = require('../../../../utils/kill-browser-process');

var _killBrowserProcess2 = _interopRequireDefault(_killBrowserProcess);

var _browserStarter = require('../../utils/browser-starter');

var _browserStarter2 = _interopRequireDefault(_browserStarter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const browserStarter = new _browserStarter2.default();

function buildChromeArgs(config, cdpPort, platformArgs, profileDir) {
    return [].concat(cdpPort ? [`--remote-debugging-port=${cdpPort}`] : [], !config.userProfile ? [`--user-data-dir=${profileDir.path}`] : [], config.headless ? ['--headless'] : [], config.userArgs ? [config.userArgs] : [], platformArgs ? [platformArgs] : []).join(' ');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2Nocm9tZS9sb2NhbC1jaHJvbWUuanMiXSwibmFtZXMiOlsicGFnZVVybCIsImJyb3dzZXJOYW1lIiwiY29uZmlnIiwiY2RwUG9ydCIsInRlbXBQcm9maWxlRGlyIiwiY2hyb21lSW5mbyIsImJyb3dzZXJUb29scyIsImdldEJyb3dzZXJJbmZvIiwicGF0aCIsImNocm9tZU9wZW5QYXJhbWV0ZXJzIiwiY21kIiwiYnVpbGRDaHJvbWVBcmdzIiwiYnJvd3NlclN0YXJ0ZXIiLCJzdGFydEJyb3dzZXIiLCJzdGFydCIsImJyb3dzZXJJZCIsInN0b3AiLCJCcm93c2VyU3RhcnRlciIsInBsYXRmb3JtQXJncyIsInByb2ZpbGVEaXIiLCJjb25jYXQiLCJ1c2VyUHJvZmlsZSIsImhlYWRsZXNzIiwidXNlckFyZ3MiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OzsrQ0FtQk8sV0FBc0JBLE9BQXRCLEVBQStCLEVBQUVDLFdBQUYsRUFBZUMsTUFBZixFQUF1QkMsT0FBdkIsRUFBZ0NDLGNBQWhDLEVBQS9CLEVBQWlGO0FBQ3BGLGNBQU1DLGFBQXVCLE1BQU1DLCtCQUFhQyxjQUFiLENBQTRCTCxPQUFPTSxJQUFQLElBQWVQLFdBQTNDLENBQW5DO0FBQ0EsY0FBTVEsdUJBQXVCLHNCQUFjLEVBQWQsRUFBa0JKLFVBQWxCLENBQTdCOztBQUVBSSw2QkFBcUJDLEdBQXJCLEdBQTJCQyxnQkFBZ0JULE1BQWhCLEVBQXdCQyxPQUF4QixFQUFpQ00scUJBQXFCQyxHQUF0RCxFQUEyRE4sY0FBM0QsQ0FBM0I7O0FBRUEsY0FBTVEsZUFBZUMsWUFBZixDQUE0Qkosb0JBQTVCLEVBQWtEVCxPQUFsRCxDQUFOO0FBQ0gsSzs7b0JBUHFCYyxLOzs7Ozs7Z0RBU2YsV0FBcUIsRUFBRUMsU0FBRixFQUFyQixFQUFvQztBQUN2QztBQUNBLFlBQUksRUFBQyxNQUFNLGtDQUFtQkEsU0FBbkIsQ0FBUCxDQUFKLEVBQ0ksTUFBTSxrQ0FBbUJBLFNBQW5CLENBQU47QUFDUCxLOztvQkFKcUJDLEk7Ozs7O0FBNUJ0Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdBLE1BQU1KLGlCQUFpQixJQUFJSyx3QkFBSixFQUF2Qjs7QUFFQSxTQUFTTixlQUFULENBQTBCVCxNQUExQixFQUFrQ0MsT0FBbEMsRUFBMkNlLFlBQTNDLEVBQXlEQyxVQUF6RCxFQUFxRTtBQUNqRSxXQUFPLEdBQ0ZDLE1BREUsQ0FFQ2pCLFVBQVUsQ0FBRSwyQkFBMEJBLE9BQVEsRUFBcEMsQ0FBVixHQUFtRCxFQUZwRCxFQUdDLENBQUNELE9BQU9tQixXQUFSLEdBQXNCLENBQUUsbUJBQWtCRixXQUFXWCxJQUFLLEVBQXBDLENBQXRCLEdBQStELEVBSGhFLEVBSUNOLE9BQU9vQixRQUFQLEdBQWtCLENBQUMsWUFBRCxDQUFsQixHQUFtQyxFQUpwQyxFQUtDcEIsT0FBT3FCLFFBQVAsR0FBa0IsQ0FBQ3JCLE9BQU9xQixRQUFSLENBQWxCLEdBQXNDLEVBTHZDLEVBTUNMLGVBQWUsQ0FBQ0EsWUFBRCxDQUFmLEdBQWdDLEVBTmpDLEVBUUZNLElBUkUsQ0FRRyxHQVJILENBQVA7QUFTSCIsImZpbGUiOiJicm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2Nocm9tZS9sb2NhbC1jaHJvbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYnJvd3NlclRvb2xzIGZyb20gJ3Rlc3RjYWZlLWJyb3dzZXItdG9vbHMnO1xuaW1wb3J0IGtpbGxCcm93c2VyUHJvY2VzcyBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9raWxsLWJyb3dzZXItcHJvY2Vzcyc7XG5pbXBvcnQgQnJvd3NlclN0YXJ0ZXIgZnJvbSAnLi4vLi4vdXRpbHMvYnJvd3Nlci1zdGFydGVyJztcblxuXG5jb25zdCBicm93c2VyU3RhcnRlciA9IG5ldyBCcm93c2VyU3RhcnRlcigpO1xuXG5mdW5jdGlvbiBidWlsZENocm9tZUFyZ3MgKGNvbmZpZywgY2RwUG9ydCwgcGxhdGZvcm1BcmdzLCBwcm9maWxlRGlyKSB7XG4gICAgcmV0dXJuIFtdXG4gICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICBjZHBQb3J0ID8gW2AtLXJlbW90ZS1kZWJ1Z2dpbmctcG9ydD0ke2NkcFBvcnR9YF0gOiBbXSxcbiAgICAgICAgICAgICFjb25maWcudXNlclByb2ZpbGUgPyBbYC0tdXNlci1kYXRhLWRpcj0ke3Byb2ZpbGVEaXIucGF0aH1gXSA6IFtdLFxuICAgICAgICAgICAgY29uZmlnLmhlYWRsZXNzID8gWyctLWhlYWRsZXNzJ10gOiBbXSxcbiAgICAgICAgICAgIGNvbmZpZy51c2VyQXJncyA/IFtjb25maWcudXNlckFyZ3NdIDogW10sXG4gICAgICAgICAgICBwbGF0Zm9ybUFyZ3MgPyBbcGxhdGZvcm1BcmdzXSA6IFtdXG4gICAgICAgIClcbiAgICAgICAgLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0IChwYWdlVXJsLCB7IGJyb3dzZXJOYW1lLCBjb25maWcsIGNkcFBvcnQsIHRlbXBQcm9maWxlRGlyIH0pIHtcbiAgICBjb25zdCBjaHJvbWVJbmZvICAgICAgICAgICA9IGF3YWl0IGJyb3dzZXJUb29scy5nZXRCcm93c2VySW5mbyhjb25maWcucGF0aCB8fCBicm93c2VyTmFtZSk7XG4gICAgY29uc3QgY2hyb21lT3BlblBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBjaHJvbWVJbmZvKTtcblxuICAgIGNocm9tZU9wZW5QYXJhbWV0ZXJzLmNtZCA9IGJ1aWxkQ2hyb21lQXJncyhjb25maWcsIGNkcFBvcnQsIGNocm9tZU9wZW5QYXJhbWV0ZXJzLmNtZCwgdGVtcFByb2ZpbGVEaXIpO1xuXG4gICAgYXdhaXQgYnJvd3NlclN0YXJ0ZXIuc3RhcnRCcm93c2VyKGNocm9tZU9wZW5QYXJhbWV0ZXJzLCBwYWdlVXJsKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3AgKHsgYnJvd3NlcklkIH0pIHtcbiAgICAvLyBOT1RFOiBDaHJvbWUgb24gTGludXggY2xvc2VzIG9ubHkgYWZ0ZXIgdGhlIHNlY29uZCBTSUdURVJNIHNpZ25hbGxcbiAgICBpZiAoIWF3YWl0IGtpbGxCcm93c2VyUHJvY2Vzcyhicm93c2VySWQpKVxuICAgICAgICBhd2FpdCBraWxsQnJvd3NlclByb2Nlc3MoYnJvd3NlcklkKTtcbn1cbiJdfQ==
