'use strict';

exports.__esModule = true;

var _events = require('events');

var _lodash = require('lodash');

var _browserJob = require('./browser-job');

var _browserJob2 = _interopRequireDefault(_browserJob);

var _screenshots = require('../screenshots');

var _screenshots2 = _interopRequireDefault(_screenshots);

var _warningLog = require('../notifications/warning-log');

var _warningLog2 = _interopRequireDefault(_warningLog);

var _fixtureHookController = require('./fixture-hook-controller');

var _fixtureHookController2 = _interopRequireDefault(_fixtureHookController);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Task extends _events.EventEmitter {
    constructor(tests, browserConnectionGroups, proxy, opts) {
        super();

        this.running = false;
        this.browserConnectionGroups = browserConnectionGroups;
        this.tests = tests;
        this.screenshots = new _screenshots2.default(opts.screenshotPath, opts.screenshotPathPattern);
        this.warningLog = new _warningLog2.default();

        this.fixtureHookController = new _fixtureHookController2.default(tests, browserConnectionGroups.length);
        this.pendingBrowserJobs = this._createBrowserJobs(proxy, opts);
    }

    _assignBrowserJobEventHandlers(job) {
        job.on('test-run-start', testRun => this.emit('test-run-start', testRun));
        job.on('test-run-done', testRun => this.emit('test-run-done', testRun));

        job.once('start', () => {
            if (!this.running) {
                this.running = true;
                this.emit('start');
            }
        });

        job.once('done', () => {
            (0, _lodash.pull)(this.pendingBrowserJobs, job);
            this.emit('browser-job-done', job);

            if (!this.pendingBrowserJobs.length) this.emit('done');
        });
    }

    _createBrowserJobs(proxy, opts) {
        return this.browserConnectionGroups.map(browserConnectionGroup => {
            var job = new _browserJob2.default(this.tests, browserConnectionGroup, proxy, this.screenshots, this.warningLog, this.fixtureHookController, opts);

            this._assignBrowserJobEventHandlers(job);
            browserConnectionGroup.map(bc => bc.addJob(job));

            return job;
        });
    }

    // API
    abort() {
        this.pendingBrowserJobs.forEach(job => job.abort());
    }
}
exports.default = Task;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW5uZXIvdGFzay5qcyJdLCJuYW1lcyI6WyJUYXNrIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJ0ZXN0cyIsImJyb3dzZXJDb25uZWN0aW9uR3JvdXBzIiwicHJveHkiLCJvcHRzIiwicnVubmluZyIsInNjcmVlbnNob3RzIiwiU2NyZWVuc2hvdHMiLCJzY3JlZW5zaG90UGF0aCIsInNjcmVlbnNob3RQYXRoUGF0dGVybiIsIndhcm5pbmdMb2ciLCJXYXJuaW5nTG9nIiwiZml4dHVyZUhvb2tDb250cm9sbGVyIiwiRml4dHVyZUhvb2tDb250cm9sbGVyIiwibGVuZ3RoIiwicGVuZGluZ0Jyb3dzZXJKb2JzIiwiX2NyZWF0ZUJyb3dzZXJKb2JzIiwiX2Fzc2lnbkJyb3dzZXJKb2JFdmVudEhhbmRsZXJzIiwiam9iIiwib24iLCJ0ZXN0UnVuIiwiZW1pdCIsIm9uY2UiLCJtYXAiLCJicm93c2VyQ29ubmVjdGlvbkdyb3VwIiwiQnJvd3NlckpvYiIsImJjIiwiYWRkSm9iIiwiYWJvcnQiLCJmb3JFYWNoIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVlLE1BQU1BLElBQU4sU0FBbUJDLG9CQUFuQixDQUFnQztBQUMzQ0MsZ0JBQWFDLEtBQWIsRUFBb0JDLHVCQUFwQixFQUE2Q0MsS0FBN0MsRUFBb0RDLElBQXBELEVBQTBEO0FBQ3REOztBQUVBLGFBQUtDLE9BQUwsR0FBK0IsS0FBL0I7QUFDQSxhQUFLSCx1QkFBTCxHQUErQkEsdUJBQS9CO0FBQ0EsYUFBS0QsS0FBTCxHQUErQkEsS0FBL0I7QUFDQSxhQUFLSyxXQUFMLEdBQStCLElBQUlDLHFCQUFKLENBQWdCSCxLQUFLSSxjQUFyQixFQUFxQ0osS0FBS0sscUJBQTFDLENBQS9CO0FBQ0EsYUFBS0MsVUFBTCxHQUErQixJQUFJQyxvQkFBSixFQUEvQjs7QUFFQSxhQUFLQyxxQkFBTCxHQUE2QixJQUFJQywrQkFBSixDQUEwQlosS0FBMUIsRUFBaUNDLHdCQUF3QlksTUFBekQsQ0FBN0I7QUFDQSxhQUFLQyxrQkFBTCxHQUE2QixLQUFLQyxrQkFBTCxDQUF3QmIsS0FBeEIsRUFBK0JDLElBQS9CLENBQTdCO0FBQ0g7O0FBRURhLG1DQUFnQ0MsR0FBaEMsRUFBcUM7QUFDakNBLFlBQUlDLEVBQUosQ0FBTyxnQkFBUCxFQUF5QkMsV0FBVyxLQUFLQyxJQUFMLENBQVUsZ0JBQVYsRUFBNEJELE9BQTVCLENBQXBDO0FBQ0FGLFlBQUlDLEVBQUosQ0FBTyxlQUFQLEVBQXdCQyxXQUFXLEtBQUtDLElBQUwsQ0FBVSxlQUFWLEVBQTJCRCxPQUEzQixDQUFuQzs7QUFFQUYsWUFBSUksSUFBSixDQUFTLE9BQVQsRUFBa0IsTUFBTTtBQUNwQixnQkFBSSxDQUFDLEtBQUtqQixPQUFWLEVBQW1CO0FBQ2YscUJBQUtBLE9BQUwsR0FBZSxJQUFmO0FBQ0EscUJBQUtnQixJQUFMLENBQVUsT0FBVjtBQUNIO0FBQ0osU0FMRDs7QUFPQUgsWUFBSUksSUFBSixDQUFTLE1BQVQsRUFBaUIsTUFBTTtBQUNuQiw4QkFBTyxLQUFLUCxrQkFBWixFQUFnQ0csR0FBaEM7QUFDQSxpQkFBS0csSUFBTCxDQUFVLGtCQUFWLEVBQThCSCxHQUE5Qjs7QUFFQSxnQkFBSSxDQUFDLEtBQUtILGtCQUFMLENBQXdCRCxNQUE3QixFQUNJLEtBQUtPLElBQUwsQ0FBVSxNQUFWO0FBQ1AsU0FORDtBQU9IOztBQUVETCx1QkFBb0JiLEtBQXBCLEVBQTJCQyxJQUEzQixFQUFpQztBQUM3QixlQUFPLEtBQUtGLHVCQUFMLENBQTZCcUIsR0FBN0IsQ0FBaUNDLDBCQUEwQjtBQUM5RCxnQkFBSU4sTUFBTSxJQUFJTyxvQkFBSixDQUFlLEtBQUt4QixLQUFwQixFQUEyQnVCLHNCQUEzQixFQUFtRHJCLEtBQW5ELEVBQTBELEtBQUtHLFdBQS9ELEVBQTRFLEtBQUtJLFVBQWpGLEVBQTZGLEtBQUtFLHFCQUFsRyxFQUF5SFIsSUFBekgsQ0FBVjs7QUFFQSxpQkFBS2EsOEJBQUwsQ0FBb0NDLEdBQXBDO0FBQ0FNLG1DQUF1QkQsR0FBdkIsQ0FBMkJHLE1BQU1BLEdBQUdDLE1BQUgsQ0FBVVQsR0FBVixDQUFqQzs7QUFFQSxtQkFBT0EsR0FBUDtBQUNILFNBUE0sQ0FBUDtBQVFIOztBQUVEO0FBQ0FVLFlBQVM7QUFDTCxhQUFLYixrQkFBTCxDQUF3QmMsT0FBeEIsQ0FBZ0NYLE9BQU9BLElBQUlVLEtBQUosRUFBdkM7QUFDSDtBQWhEMEM7a0JBQTFCOUIsSSIsImZpbGUiOiJydW5uZXIvdGFzay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBwdWxsIGFzIHJlbW92ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQnJvd3NlckpvYiBmcm9tICcuL2Jyb3dzZXItam9iJztcbmltcG9ydCBTY3JlZW5zaG90cyBmcm9tICcuLi9zY3JlZW5zaG90cyc7XG5pbXBvcnQgV2FybmluZ0xvZyBmcm9tICcuLi9ub3RpZmljYXRpb25zL3dhcm5pbmctbG9nJztcbmltcG9ydCBGaXh0dXJlSG9va0NvbnRyb2xsZXIgZnJvbSAnLi9maXh0dXJlLWhvb2stY29udHJvbGxlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yICh0ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMsIHByb3h5LCBvcHRzKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5ydW5uaW5nICAgICAgICAgICAgICAgICA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJyb3dzZXJDb25uZWN0aW9uR3JvdXBzID0gYnJvd3NlckNvbm5lY3Rpb25Hcm91cHM7XG4gICAgICAgIHRoaXMudGVzdHMgICAgICAgICAgICAgICAgICAgPSB0ZXN0cztcbiAgICAgICAgdGhpcy5zY3JlZW5zaG90cyAgICAgICAgICAgICA9IG5ldyBTY3JlZW5zaG90cyhvcHRzLnNjcmVlbnNob3RQYXRoLCBvcHRzLnNjcmVlbnNob3RQYXRoUGF0dGVybik7XG4gICAgICAgIHRoaXMud2FybmluZ0xvZyAgICAgICAgICAgICAgPSBuZXcgV2FybmluZ0xvZygpO1xuXG4gICAgICAgIHRoaXMuZml4dHVyZUhvb2tDb250cm9sbGVyID0gbmV3IEZpeHR1cmVIb29rQ29udHJvbGxlcih0ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cHMubGVuZ3RoKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nQnJvd3NlckpvYnMgICAgPSB0aGlzLl9jcmVhdGVCcm93c2VySm9icyhwcm94eSwgb3B0cyk7XG4gICAgfVxuXG4gICAgX2Fzc2lnbkJyb3dzZXJKb2JFdmVudEhhbmRsZXJzIChqb2IpIHtcbiAgICAgICAgam9iLm9uKCd0ZXN0LXJ1bi1zdGFydCcsIHRlc3RSdW4gPT4gdGhpcy5lbWl0KCd0ZXN0LXJ1bi1zdGFydCcsIHRlc3RSdW4pKTtcbiAgICAgICAgam9iLm9uKCd0ZXN0LXJ1bi1kb25lJywgdGVzdFJ1biA9PiB0aGlzLmVtaXQoJ3Rlc3QtcnVuLWRvbmUnLCB0ZXN0UnVuKSk7XG5cbiAgICAgICAgam9iLm9uY2UoJ3N0YXJ0JywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhcnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgam9iLm9uY2UoJ2RvbmUnLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmUodGhpcy5wZW5kaW5nQnJvd3NlckpvYnMsIGpvYik7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Jyb3dzZXItam9iLWRvbmUnLCBqb2IpO1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMucGVuZGluZ0Jyb3dzZXJKb2JzLmxlbmd0aClcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2RvbmUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUJyb3dzZXJKb2JzIChwcm94eSwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5icm93c2VyQ29ubmVjdGlvbkdyb3Vwcy5tYXAoYnJvd3NlckNvbm5lY3Rpb25Hcm91cCA9PiB7XG4gICAgICAgICAgICB2YXIgam9iID0gbmV3IEJyb3dzZXJKb2IodGhpcy50ZXN0cywgYnJvd3NlckNvbm5lY3Rpb25Hcm91cCwgcHJveHksIHRoaXMuc2NyZWVuc2hvdHMsIHRoaXMud2FybmluZ0xvZywgdGhpcy5maXh0dXJlSG9va0NvbnRyb2xsZXIsIG9wdHMpO1xuXG4gICAgICAgICAgICB0aGlzLl9hc3NpZ25Ccm93c2VySm9iRXZlbnRIYW5kbGVycyhqb2IpO1xuICAgICAgICAgICAgYnJvd3NlckNvbm5lY3Rpb25Hcm91cC5tYXAoYmMgPT4gYmMuYWRkSm9iKGpvYikpO1xuXG4gICAgICAgICAgICByZXR1cm4gam9iO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBUElcbiAgICBhYm9ydCAoKSB7XG4gICAgICAgIHRoaXMucGVuZGluZ0Jyb3dzZXJKb2JzLmZvckVhY2goam9iID0+IGpvYi5hYm9ydCgpKTtcbiAgICB9XG59XG4iXX0=
