'use strict';

exports.__esModule = true;
exports.removeTTYColors = removeTTYColors;
exports.wordWrap = wordWrap;
exports.splitQuotedText = splitQuotedText;

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rtrim(str) {
    return str.replace(/\s+$/, '');
}

function removeTTYColors(str) {
    return str.replace(/\033\[[0-9;]*m/g, '');
}

function wordWrap(str, indent, width) {
    var curStr = '';
    var wrappedMsg = '';

    if (removeTTYColors(str).length <= width - indent) return (0, _indentString2.default)(str, ' ', indent);

    str = str.replace(/(\r\n)/gm, '\n').split(/(\S+[ \t]+)|(\S+(?:\n))|(\n)/m)
    //NOTE: cut empty elements
    .filter(elm => !!elm);

    str.forEach(word => {
        var newStr = curStr + word;

        if (removeTTYColors(newStr).length > width - indent) {
            wrappedMsg += `${rtrim(curStr)}\n`;
            curStr = word;
        } else {
            if (curStr[curStr.length - 1] === '\n') {
                wrappedMsg += `${rtrim(curStr)}\n`;
                curStr = '';
            }

            curStr += word;
        }
    });

    return (0, _indentString2.default)(wrappedMsg + curStr, ' ', indent);
}

function splitQuotedText(str, splitChar, quotes = '"\'') {
    var currentPart = '';
    var parts = [];
    var quoteChar = null;

    for (var i = 0; i < str.length; i++) {
        var currentChar = str[i];

        if (currentChar === splitChar) {
            if (quoteChar) currentPart += currentChar;else {
                parts.push(currentPart);
                currentPart = '';
            }
        } else if (quotes.indexOf(currentChar) > -1) {
            if (quoteChar === currentChar) quoteChar = null;else if (!quoteChar) quoteChar = currentChar;else currentPart += currentChar;
        } else currentPart += currentChar;
    }

    if (currentPart) parts.push(currentPart);

    return parts;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdHJpbmcuanMiXSwibmFtZXMiOlsicmVtb3ZlVFRZQ29sb3JzIiwid29yZFdyYXAiLCJzcGxpdFF1b3RlZFRleHQiLCJydHJpbSIsInN0ciIsInJlcGxhY2UiLCJpbmRlbnQiLCJ3aWR0aCIsImN1clN0ciIsIndyYXBwZWRNc2ciLCJsZW5ndGgiLCJzcGxpdCIsImZpbHRlciIsImVsbSIsImZvckVhY2giLCJ3b3JkIiwibmV3U3RyIiwic3BsaXRDaGFyIiwicXVvdGVzIiwiY3VycmVudFBhcnQiLCJwYXJ0cyIsInF1b3RlQ2hhciIsImkiLCJjdXJyZW50Q2hhciIsInB1c2giLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOzs7UUFNZ0JBLGUsR0FBQUEsZTtRQUlBQyxRLEdBQUFBLFE7UUFnQ0FDLGUsR0FBQUEsZTs7QUExQ2hCOzs7Ozs7QUFFQSxTQUFTQyxLQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNqQixXQUFPQSxJQUFJQyxPQUFKLENBQVksTUFBWixFQUFvQixFQUFwQixDQUFQO0FBQ0g7O0FBRU0sU0FBU0wsZUFBVCxDQUEwQkksR0FBMUIsRUFBK0I7QUFDbEMsV0FBT0EsSUFBSUMsT0FBSixDQUFZLGlCQUFaLEVBQStCLEVBQS9CLENBQVA7QUFDSDs7QUFFTSxTQUFTSixRQUFULENBQW1CRyxHQUFuQixFQUF3QkUsTUFBeEIsRUFBZ0NDLEtBQWhDLEVBQXVDO0FBQzFDLFFBQUlDLFNBQWEsRUFBakI7QUFDQSxRQUFJQyxhQUFhLEVBQWpCOztBQUVBLFFBQUlULGdCQUFnQkksR0FBaEIsRUFBcUJNLE1BQXJCLElBQStCSCxRQUFRRCxNQUEzQyxFQUNJLE9BQU8sNEJBQWFGLEdBQWIsRUFBa0IsR0FBbEIsRUFBdUJFLE1BQXZCLENBQVA7O0FBRUpGLFVBQU1BLElBQUlDLE9BQUosQ0FBWSxVQUFaLEVBQXdCLElBQXhCLEVBQ0RNLEtBREMsQ0FDSywrQkFETDtBQUVGO0FBRkUsS0FHREMsTUFIQyxDQUdNQyxPQUFPLENBQUMsQ0FBQ0EsR0FIZixDQUFOOztBQUtBVCxRQUFJVSxPQUFKLENBQVlDLFFBQVE7QUFDaEIsWUFBSUMsU0FBU1IsU0FBU08sSUFBdEI7O0FBRUEsWUFBSWYsZ0JBQWdCZ0IsTUFBaEIsRUFBd0JOLE1BQXhCLEdBQWlDSCxRQUFRRCxNQUE3QyxFQUFxRDtBQUNqREcsMEJBQWUsR0FBRU4sTUFBTUssTUFBTixDQUFjLElBQS9CO0FBQ0FBLHFCQUFTTyxJQUFUO0FBQ0gsU0FIRCxNQUlLO0FBQ0QsZ0JBQUlQLE9BQU9BLE9BQU9FLE1BQVAsR0FBZ0IsQ0FBdkIsTUFBOEIsSUFBbEMsRUFBd0M7QUFDcENELDhCQUFlLEdBQUVOLE1BQU1LLE1BQU4sQ0FBYyxJQUEvQjtBQUNBQSx5QkFBUyxFQUFUO0FBQ0g7O0FBRURBLHNCQUFVTyxJQUFWO0FBQ0g7QUFDSixLQWZEOztBQWlCQSxXQUFPLDRCQUFhTixhQUFhRCxNQUExQixFQUFrQyxHQUFsQyxFQUF1Q0YsTUFBdkMsQ0FBUDtBQUNIOztBQUVNLFNBQVNKLGVBQVQsQ0FBMEJFLEdBQTFCLEVBQStCYSxTQUEvQixFQUEwQ0MsU0FBUyxLQUFuRCxFQUEwRDtBQUM3RCxRQUFJQyxjQUFjLEVBQWxCO0FBQ0EsUUFBSUMsUUFBYyxFQUFsQjtBQUNBLFFBQUlDLFlBQWMsSUFBbEI7O0FBRUEsU0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlsQixJQUFJTSxNQUF4QixFQUFnQ1ksR0FBaEMsRUFBcUM7QUFDakMsWUFBSUMsY0FBY25CLElBQUlrQixDQUFKLENBQWxCOztBQUVBLFlBQUlDLGdCQUFnQk4sU0FBcEIsRUFBK0I7QUFDM0IsZ0JBQUlJLFNBQUosRUFDSUYsZUFBZUksV0FBZixDQURKLEtBRUs7QUFDREgsc0JBQU1JLElBQU4sQ0FBV0wsV0FBWDtBQUNBQSw4QkFBYyxFQUFkO0FBQ0g7QUFDSixTQVBELE1BUUssSUFBSUQsT0FBT08sT0FBUCxDQUFlRixXQUFmLElBQThCLENBQUMsQ0FBbkMsRUFBc0M7QUFDdkMsZ0JBQUlGLGNBQWNFLFdBQWxCLEVBQ0lGLFlBQVksSUFBWixDQURKLEtBRUssSUFBSSxDQUFDQSxTQUFMLEVBQ0RBLFlBQVlFLFdBQVosQ0FEQyxLQUdESixlQUFlSSxXQUFmO0FBQ1AsU0FQSSxNQVNESixlQUFlSSxXQUFmO0FBQ1A7O0FBRUQsUUFBSUosV0FBSixFQUNJQyxNQUFNSSxJQUFOLENBQVdMLFdBQVg7O0FBRUosV0FBT0MsS0FBUDtBQUNIIiwiZmlsZSI6InV0aWxzL3N0cmluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbmRlbnRTdHJpbmcgZnJvbSAnaW5kZW50LXN0cmluZyc7XG5cbmZ1bmN0aW9uIHJ0cmltIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xccyskLywgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVFRZQ29sb3JzIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcMDMzXFxbWzAtOTtdKm0vZywgJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd29yZFdyYXAgKHN0ciwgaW5kZW50LCB3aWR0aCkge1xuICAgIHZhciBjdXJTdHIgICAgID0gJyc7XG4gICAgdmFyIHdyYXBwZWRNc2cgPSAnJztcblxuICAgIGlmIChyZW1vdmVUVFlDb2xvcnMoc3RyKS5sZW5ndGggPD0gd2lkdGggLSBpbmRlbnQpXG4gICAgICAgIHJldHVybiBpbmRlbnRTdHJpbmcoc3RyLCAnICcsIGluZGVudCk7XG5cbiAgICBzdHIgPSBzdHIucmVwbGFjZSgvKFxcclxcbikvZ20sICdcXG4nKVxuICAgICAgICAuc3BsaXQoLyhcXFMrWyBcXHRdKyl8KFxcUysoPzpcXG4pKXwoXFxuKS9tKVxuICAgICAgICAvL05PVEU6IGN1dCBlbXB0eSBlbGVtZW50c1xuICAgICAgICAuZmlsdGVyKGVsbSA9PiAhIWVsbSk7XG5cbiAgICBzdHIuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgICAgdmFyIG5ld1N0ciA9IGN1clN0ciArIHdvcmQ7XG5cbiAgICAgICAgaWYgKHJlbW92ZVRUWUNvbG9ycyhuZXdTdHIpLmxlbmd0aCA+IHdpZHRoIC0gaW5kZW50KSB7XG4gICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgIGN1clN0ciA9IHdvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3VyU3RyW2N1clN0ci5sZW5ndGggLSAxXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICB3cmFwcGVkTXNnICs9IGAke3J0cmltKGN1clN0cil9XFxuYDtcbiAgICAgICAgICAgICAgICBjdXJTdHIgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VyU3RyICs9IHdvcmQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpbmRlbnRTdHJpbmcod3JhcHBlZE1zZyArIGN1clN0ciwgJyAnLCBpbmRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRRdW90ZWRUZXh0IChzdHIsIHNwbGl0Q2hhciwgcXVvdGVzID0gJ1wiXFwnJykge1xuICAgIHZhciBjdXJyZW50UGFydCA9ICcnO1xuICAgIHZhciBwYXJ0cyAgICAgICA9IFtdO1xuICAgIHZhciBxdW90ZUNoYXIgICA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudENoYXIgPSBzdHJbaV07XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDaGFyID09PSBzcGxpdENoYXIpIHtcbiAgICAgICAgICAgIGlmIChxdW90ZUNoYXIpXG4gICAgICAgICAgICAgICAgY3VycmVudFBhcnQgKz0gY3VycmVudENoYXI7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKGN1cnJlbnRQYXJ0KTtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFydCA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1b3Rlcy5pbmRleE9mKGN1cnJlbnRDaGFyKSA+IC0xKSB7XG4gICAgICAgICAgICBpZiAocXVvdGVDaGFyID09PSBjdXJyZW50Q2hhcilcbiAgICAgICAgICAgICAgICBxdW90ZUNoYXIgPSBudWxsO1xuICAgICAgICAgICAgZWxzZSBpZiAoIXF1b3RlQ2hhcilcbiAgICAgICAgICAgICAgICBxdW90ZUNoYXIgPSBjdXJyZW50Q2hhcjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFydCArPSBjdXJyZW50Q2hhcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjdXJyZW50UGFydCArPSBjdXJyZW50Q2hhcjtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFBhcnQpXG4gICAgICAgIHBhcnRzLnB1c2goY3VycmVudFBhcnQpO1xuXG4gICAgcmV0dXJuIHBhcnRzO1xufVxuIl19
