'use strict';

exports.__esModule = true;

var _testcafeHammerhead = require('testcafe-hammerhead');

var _lodash = require('lodash');

class RequestHook {
    constructor(requestFilterRules, responseEventConfigureOpts) {
        this.requestFilterRules = this._prepareRequestFilterRules(requestFilterRules);
        this._instantiatedRequestFilterRules = [];
        this.responseEventConfigureOpts = responseEventConfigureOpts;

        this.warningLog = null;
    }

    _prepareRequestFilterRules(rules) {
        if (rules) return (0, _lodash.castArray)(rules);

        return [_testcafeHammerhead.RequestFilterRule.ANY];
    }

    _instantiateRequestFilterRules() {
        this.requestFilterRules.forEach(rule => {
            if (rule instanceof _testcafeHammerhead.RequestFilterRule) this._instantiatedRequestFilterRules.push(rule);else this._instantiatedRequestFilterRules.push(new _testcafeHammerhead.RequestFilterRule(rule));
        });
    }

    onRequest() /*RequestEvent event*/{
        throw new Error('Not implemented');
    }

    _onConfigureResponse(event) {
        if (!this.responseEventConfigureOpts) return;

        event.opts.includeHeaders = this.responseEventConfigureOpts.includeHeaders;
        event.opts.includeBody = this.responseEventConfigureOpts.includeBody;
    }

    onResponse() /*ResponseEvent event*/{
        throw new Error('Not implemented');
    }
}
exports.default = RequestHook;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9ob29rLmpzIl0sIm5hbWVzIjpbIlJlcXVlc3RIb29rIiwiY29uc3RydWN0b3IiLCJyZXF1ZXN0RmlsdGVyUnVsZXMiLCJyZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyIsIl9wcmVwYXJlUmVxdWVzdEZpbHRlclJ1bGVzIiwiX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcyIsIndhcm5pbmdMb2ciLCJydWxlcyIsIlJlcXVlc3RGaWx0ZXJSdWxlIiwiQU5ZIiwiX2luc3RhbnRpYXRlUmVxdWVzdEZpbHRlclJ1bGVzIiwiZm9yRWFjaCIsInJ1bGUiLCJwdXNoIiwib25SZXF1ZXN0IiwiRXJyb3IiLCJfb25Db25maWd1cmVSZXNwb25zZSIsImV2ZW50Iiwib3B0cyIsImluY2x1ZGVIZWFkZXJzIiwiaW5jbHVkZUJvZHkiLCJvblJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBRWUsTUFBTUEsV0FBTixDQUFrQjtBQUM3QkMsZ0JBQWFDLGtCQUFiLEVBQWlDQywwQkFBakMsRUFBNkQ7QUFDekQsYUFBS0Qsa0JBQUwsR0FBdUMsS0FBS0UsMEJBQUwsQ0FBZ0NGLGtCQUFoQyxDQUF2QztBQUNBLGFBQUtHLCtCQUFMLEdBQXVDLEVBQXZDO0FBQ0EsYUFBS0YsMEJBQUwsR0FBdUNBLDBCQUF2Qzs7QUFFQSxhQUFLRyxVQUFMLEdBQWtCLElBQWxCO0FBQ0g7O0FBRURGLCtCQUE0QkcsS0FBNUIsRUFBbUM7QUFDL0IsWUFBSUEsS0FBSixFQUNJLE9BQU8sdUJBQVVBLEtBQVYsQ0FBUDs7QUFFSixlQUFPLENBQUNDLHNDQUFrQkMsR0FBbkIsQ0FBUDtBQUNIOztBQUVEQyxxQ0FBa0M7QUFDOUIsYUFBS1Isa0JBQUwsQ0FBd0JTLE9BQXhCLENBQWdDQyxRQUFRO0FBQ3BDLGdCQUFJQSxnQkFBZ0JKLHFDQUFwQixFQUNJLEtBQUtILCtCQUFMLENBQXFDUSxJQUFyQyxDQUEwQ0QsSUFBMUMsRUFESixLQUdJLEtBQUtQLCtCQUFMLENBQXFDUSxJQUFyQyxDQUEwQyxJQUFJTCxxQ0FBSixDQUFzQkksSUFBdEIsQ0FBMUM7QUFDUCxTQUxEO0FBTUg7O0FBRURFLGdCQUFXLHNCQUF3QjtBQUMvQixjQUFNLElBQUlDLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0g7O0FBRURDLHlCQUFzQkMsS0FBdEIsRUFBNkI7QUFDekIsWUFBSSxDQUFDLEtBQUtkLDBCQUFWLEVBQ0k7O0FBRUpjLGNBQU1DLElBQU4sQ0FBV0MsY0FBWCxHQUE0QixLQUFLaEIsMEJBQUwsQ0FBZ0NnQixjQUE1RDtBQUNBRixjQUFNQyxJQUFOLENBQVdFLFdBQVgsR0FBNEIsS0FBS2pCLDBCQUFMLENBQWdDaUIsV0FBNUQ7QUFDSDs7QUFFREMsaUJBQVksdUJBQXlCO0FBQ2pDLGNBQU0sSUFBSU4sS0FBSixDQUFVLGlCQUFWLENBQU47QUFDSDtBQXZDNEI7a0JBQVpmLFciLCJmaWxlIjoiYXBpL3JlcXVlc3QtaG9va3MvaG9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3RGaWx0ZXJSdWxlIH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBjYXN0QXJyYXkgfSBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0SG9vayB7XG4gICAgY29uc3RydWN0b3IgKHJlcXVlc3RGaWx0ZXJSdWxlcywgcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RmlsdGVyUnVsZXMgICAgICAgICAgICAgID0gdGhpcy5fcHJlcGFyZVJlcXVlc3RGaWx0ZXJSdWxlcyhyZXF1ZXN0RmlsdGVyUnVsZXMpO1xuICAgICAgICB0aGlzLl9pbnN0YW50aWF0ZWRSZXF1ZXN0RmlsdGVyUnVsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50Q29uZmlndXJlT3B0cyAgICAgID0gcmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHM7XG5cbiAgICAgICAgdGhpcy53YXJuaW5nTG9nID0gbnVsbDtcbiAgICB9XG5cbiAgICBfcHJlcGFyZVJlcXVlc3RGaWx0ZXJSdWxlcyAocnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVzKVxuICAgICAgICAgICAgcmV0dXJuIGNhc3RBcnJheShydWxlcyk7XG5cbiAgICAgICAgcmV0dXJuIFtSZXF1ZXN0RmlsdGVyUnVsZS5BTlldO1xuICAgIH1cblxuICAgIF9pbnN0YW50aWF0ZVJlcXVlc3RGaWx0ZXJSdWxlcyAoKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdEZpbHRlclJ1bGVzLmZvckVhY2gocnVsZSA9PiB7XG4gICAgICAgICAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFJlcXVlc3RGaWx0ZXJSdWxlKVxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbnRpYXRlZFJlcXVlc3RGaWx0ZXJSdWxlcy5wdXNoKG5ldyBSZXF1ZXN0RmlsdGVyUnVsZShydWxlKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uUmVxdWVzdCAoLypSZXF1ZXN0RXZlbnQgZXZlbnQqLykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cblxuICAgIF9vbkNvbmZpZ3VyZVJlc3BvbnNlIChldmVudCkge1xuICAgICAgICBpZiAoIXRoaXMucmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgZXZlbnQub3B0cy5pbmNsdWRlSGVhZGVycyA9IHRoaXMucmVzcG9uc2VFdmVudENvbmZpZ3VyZU9wdHMuaW5jbHVkZUhlYWRlcnM7XG4gICAgICAgIGV2ZW50Lm9wdHMuaW5jbHVkZUJvZHkgICAgPSB0aGlzLnJlc3BvbnNlRXZlbnRDb25maWd1cmVPcHRzLmluY2x1ZGVCb2R5O1xuICAgIH1cblxuICAgIG9uUmVzcG9uc2UgKC8qUmVzcG9uc2VFdmVudCBldmVudCovKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfVxufVxuIl19
