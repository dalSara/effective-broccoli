'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let removeDirectory = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (dirPath) {
        if (!DIRECTORIES_TO_CLEANUP[dirPath]) return;

        let delPromise = DIRECTORIES_TO_CLEANUP[dirPath].delPromise;

        if (!delPromise) {
            delPromise = (0, _killBrowserProcess2.default)(_path2.default.basename(dirPath)).then(function () {
                return (0, _del2.default)(dirPath, { force: true });
            });

            DIRECTORIES_TO_CLEANUP[dirPath].delPromise = delPromise;
        }

        yield DIRECTORIES_TO_CLEANUP[dirPath].delPromise;

        delete DIRECTORIES_TO_CLEANUP[dirPath].delPromise;
    });

    return function removeDirectory(_x) {
        return _ref.apply(this, arguments);
    };
})();

let dispatchCommand = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (message) {
        switch (message.command) {
            case _commands2.default.init:
                return;
            case _commands2.default.add:
                addDirectory(message.path);
                return;
            case _commands2.default.remove:
                addDirectory(message.path);
                yield removeDirectory(message.path);
                return;
        }
    });

    return function dispatchCommand(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _util = require('util');

var _del = require('del');

var _del2 = _interopRequireDefault(_del);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _killBrowserProcess = require('../../kill-browser-process');

var _killBrowserProcess2 = _interopRequireDefault(_killBrowserProcess);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DIRECTORIES_TO_CLEANUP = {};

function addDirectory(dirPath) {
    if (!DIRECTORIES_TO_CLEANUP[dirPath]) DIRECTORIES_TO_CLEANUP[dirPath] = {};
}

process.on('message', (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (message) {
        let error = '';

        try {
            yield dispatchCommand(message);
        } catch (e) {
            error = (0, _util.inspect)(e);
        }

        process.send({ id: message.id, error });
    });

    return function (_x3) {
        return _ref3.apply(this, arguments);
    };
})());

process.on('disconnect', (0, _asyncToGenerator3.default)(function* () {
    const removePromises = (0, _keys2.default)(DIRECTORIES_TO_CLEANUP).map(function (dirPath) {
        return removeDirectory(dirPath).catch(_lodash.noop);
    });

    yield _pinkie2.default.all(removePromises);

    process.exit(0); //eslint-disable-line no-process-exit
}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy91dGlscy90ZW1wLWRpcmVjdG9yeS9jbGVhbnVwLXByb2Nlc3Mvd29ya2VyLmpzIl0sIm5hbWVzIjpbImRpclBhdGgiLCJESVJFQ1RPUklFU19UT19DTEVBTlVQIiwiZGVsUHJvbWlzZSIsInBhdGgiLCJiYXNlbmFtZSIsInRoZW4iLCJmb3JjZSIsInJlbW92ZURpcmVjdG9yeSIsIm1lc3NhZ2UiLCJjb21tYW5kIiwiQ09NTUFORFMiLCJpbml0IiwiYWRkIiwiYWRkRGlyZWN0b3J5IiwicmVtb3ZlIiwiZGlzcGF0Y2hDb21tYW5kIiwicHJvY2VzcyIsIm9uIiwiZXJyb3IiLCJlIiwic2VuZCIsImlkIiwicmVtb3ZlUHJvbWlzZXMiLCJtYXAiLCJjYXRjaCIsIm5vb3AiLCJQcm9taXNlIiwiYWxsIiwiZXhpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7K0NBZ0JBLFdBQWdDQSxPQUFoQyxFQUF5QztBQUNyQyxZQUFJLENBQUNDLHVCQUF1QkQsT0FBdkIsQ0FBTCxFQUNJOztBQUVKLFlBQUlFLGFBQWFELHVCQUF1QkQsT0FBdkIsRUFBZ0NFLFVBQWpEOztBQUVBLFlBQUksQ0FBQ0EsVUFBTCxFQUFpQjtBQUNiQSx5QkFBYSxrQ0FBbUJDLGVBQUtDLFFBQUwsQ0FBY0osT0FBZCxDQUFuQixFQUNSSyxJQURRLENBQ0g7QUFBQSx1QkFBTSxtQkFBSUwsT0FBSixFQUFhLEVBQUVNLE9BQU8sSUFBVCxFQUFiLENBQU47QUFBQSxhQURHLENBQWI7O0FBR0FMLG1DQUF1QkQsT0FBdkIsRUFBZ0NFLFVBQWhDLEdBQTZDQSxVQUE3QztBQUNIOztBQUVELGNBQU1ELHVCQUF1QkQsT0FBdkIsRUFBZ0NFLFVBQXRDOztBQUVBLGVBQU9ELHVCQUF1QkQsT0FBdkIsRUFBZ0NFLFVBQXZDO0FBQ0gsSzs7b0JBaEJjSyxlOzs7Ozs7Z0RBa0JmLFdBQWdDQyxPQUFoQyxFQUF5QztBQUNyQyxnQkFBUUEsUUFBUUMsT0FBaEI7QUFDSSxpQkFBS0MsbUJBQVNDLElBQWQ7QUFDSTtBQUNKLGlCQUFLRCxtQkFBU0UsR0FBZDtBQUNJQyw2QkFBYUwsUUFBUUwsSUFBckI7QUFDQTtBQUNKLGlCQUFLTyxtQkFBU0ksTUFBZDtBQUNJRCw2QkFBYUwsUUFBUUwsSUFBckI7QUFDQSxzQkFBTUksZ0JBQWdCQyxRQUFRTCxJQUF4QixDQUFOO0FBQ0E7QUFUUjtBQVdILEs7O29CQVpjWSxlOzs7OztBQWxDZjs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFHQSxNQUFNZCx5QkFBeUIsRUFBL0I7O0FBRUEsU0FBU1ksWUFBVCxDQUF1QmIsT0FBdkIsRUFBZ0M7QUFDNUIsUUFBSSxDQUFDQyx1QkFBdUJELE9BQXZCLENBQUwsRUFDSUMsdUJBQXVCRCxPQUF2QixJQUFrQyxFQUFsQztBQUNQOztBQWtDRGdCLFFBQVFDLEVBQVIsQ0FBVyxTQUFYO0FBQUEsZ0RBQXNCLFdBQU1ULE9BQU4sRUFBaUI7QUFDbkMsWUFBSVUsUUFBUSxFQUFaOztBQUVBLFlBQUk7QUFDQSxrQkFBTUgsZ0JBQWdCUCxPQUFoQixDQUFOO0FBQ0gsU0FGRCxDQUdBLE9BQU9XLENBQVAsRUFBVTtBQUNORCxvQkFBUSxtQkFBUUMsQ0FBUixDQUFSO0FBQ0g7O0FBRURILGdCQUFRSSxJQUFSLENBQWEsRUFBRUMsSUFBSWIsUUFBUWEsRUFBZCxFQUFrQkgsS0FBbEIsRUFBYjtBQUNILEtBWEQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBYUFGLFFBQVFDLEVBQVIsQ0FBVyxZQUFYLGtDQUF5QixhQUFZO0FBQ2pDLFVBQU1LLGlCQUFpQixvQkFDYnJCLHNCQURhLEVBRWxCc0IsR0FGa0IsQ0FFZDtBQUFBLGVBQVdoQixnQkFBZ0JQLE9BQWhCLEVBQXlCd0IsS0FBekIsQ0FBK0JDLFlBQS9CLENBQVg7QUFBQSxLQUZjLENBQXZCOztBQUlBLFVBQU1DLGlCQUFRQyxHQUFSLENBQVlMLGNBQVosQ0FBTjs7QUFFQU4sWUFBUVksSUFBUixDQUFhLENBQWIsRUFQaUMsQ0FPaEI7QUFDcEIsQ0FSRCIsImZpbGUiOiJ1dGlscy90ZW1wLWRpcmVjdG9yeS9jbGVhbnVwLXByb2Nlc3Mvd29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAndXRpbCc7XG5pbXBvcnQgZGVsIGZyb20gJ2RlbCc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQga2lsbEJyb3dzZXJQcm9jZXNzIGZyb20gJy4uLy4uL2tpbGwtYnJvd3Nlci1wcm9jZXNzJztcbmltcG9ydCBDT01NQU5EUyBmcm9tICcuL2NvbW1hbmRzJztcblxuXG5jb25zdCBESVJFQ1RPUklFU19UT19DTEVBTlVQID0ge307XG5cbmZ1bmN0aW9uIGFkZERpcmVjdG9yeSAoZGlyUGF0aCkge1xuICAgIGlmICghRElSRUNUT1JJRVNfVE9fQ0xFQU5VUFtkaXJQYXRoXSlcbiAgICAgICAgRElSRUNUT1JJRVNfVE9fQ0xFQU5VUFtkaXJQYXRoXSA9IHt9O1xufVxuXG5hc3luYyBmdW5jdGlvbiByZW1vdmVEaXJlY3RvcnkgKGRpclBhdGgpIHtcbiAgICBpZiAoIURJUkVDVE9SSUVTX1RPX0NMRUFOVVBbZGlyUGF0aF0pXG4gICAgICAgIHJldHVybjtcblxuICAgIGxldCBkZWxQcm9taXNlID0gRElSRUNUT1JJRVNfVE9fQ0xFQU5VUFtkaXJQYXRoXS5kZWxQcm9taXNlO1xuXG4gICAgaWYgKCFkZWxQcm9taXNlKSB7XG4gICAgICAgIGRlbFByb21pc2UgPSBraWxsQnJvd3NlclByb2Nlc3MocGF0aC5iYXNlbmFtZShkaXJQYXRoKSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IGRlbChkaXJQYXRoLCB7IGZvcmNlOiB0cnVlIH0pKTtcblxuICAgICAgICBESVJFQ1RPUklFU19UT19DTEVBTlVQW2RpclBhdGhdLmRlbFByb21pc2UgPSBkZWxQcm9taXNlO1xuICAgIH1cblxuICAgIGF3YWl0IERJUkVDVE9SSUVTX1RPX0NMRUFOVVBbZGlyUGF0aF0uZGVsUHJvbWlzZTtcblxuICAgIGRlbGV0ZSBESVJFQ1RPUklFU19UT19DTEVBTlVQW2RpclBhdGhdLmRlbFByb21pc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRpc3BhdGNoQ29tbWFuZCAobWVzc2FnZSkge1xuICAgIHN3aXRjaCAobWVzc2FnZS5jb21tYW5kKSB7XG4gICAgICAgIGNhc2UgQ09NTUFORFMuaW5pdDpcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBDT01NQU5EUy5hZGQ6XG4gICAgICAgICAgICBhZGREaXJlY3RvcnkobWVzc2FnZS5wYXRoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY2FzZSBDT01NQU5EUy5yZW1vdmU6XG4gICAgICAgICAgICBhZGREaXJlY3RvcnkobWVzc2FnZS5wYXRoKTtcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZURpcmVjdG9yeShtZXNzYWdlLnBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cblxucHJvY2Vzcy5vbignbWVzc2FnZScsIGFzeW5jIG1lc3NhZ2UgPT4ge1xuICAgIGxldCBlcnJvciA9ICcnO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZGlzcGF0Y2hDb21tYW5kKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvciA9IGluc3BlY3QoZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5zZW5kKHsgaWQ6IG1lc3NhZ2UuaWQsIGVycm9yIH0pO1xufSk7XG5cbnByb2Nlc3Mub24oJ2Rpc2Nvbm5lY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVtb3ZlUHJvbWlzZXMgPSBPYmplY3RcbiAgICAgICAgLmtleXMoRElSRUNUT1JJRVNfVE9fQ0xFQU5VUClcbiAgICAgICAgLm1hcChkaXJQYXRoID0+IHJlbW92ZURpcmVjdG9yeShkaXJQYXRoKS5jYXRjaChub29wKSk7XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChyZW1vdmVQcm9taXNlcyk7XG5cbiAgICBwcm9jZXNzLmV4aXQoMCk7IC8vZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm9jZXNzLWV4aXRcbn0pO1xuIl19
