'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

require('core-js/modules/es7.array.includes');

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SuppressEntryChunksPlugin = function () {
  function SuppressEntryChunksPlugin(files) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { filter: null, keep: false },
        filter = _ref.filter,
        keep = _ref.keep;

    _classCallCheck(this, SuppressEntryChunksPlugin);

    var fileList = Array.isArray(files) ? files : [files];
    this.filter = filter;
    this.files = fileList.map(function (file) {
      if (typeof file === 'string') {
        return { name: file, match: null, keep: false };
      }
      return _extends({ match: null, keep: false }, file);
    });
    this.keep = keep;
  }

  _createClass(SuppressEntryChunksPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var _this = this;

      compiler.plugin('emit', function (compilation, callback) {
        compilation.chunks.forEach(function (chunk) {
          if (_this.files.map(function (file) {
            return file.name;
          }).includes(chunk.name)) {
            (function () {
              var _find = (0, _find3.default)(_this.files, { name: chunk.name }),
                  match = _find.match,
                  keep = _find.keep;

              chunk.files.filter(function (file) {
                if (match !== null) {
                  var regexp = new RegExp(match);
                  return keep ? !regexp.test(file) : regexp.test(file);
                } else if (_this.filter !== null) {
                  var _regexp = new RegExp(_this.filter);
                  return _this.keep ? !_regexp.test(file) : _regexp.test(file);
                }
                return true;
              }).forEach(function (file) {
                // eslint-disable-next-line no-param-reassign
                chunk.files = chunk.files.filter(function (f) {
                  return f !== file;
                });
                // eslint-disable-next-line no-param-reassign
                delete compilation.assets[file];
              });
            })();
          }
        });
        callback();
      });
    }
  }]);

  return SuppressEntryChunksPlugin;
}();

exports.default = SuppressEntryChunksPlugin;