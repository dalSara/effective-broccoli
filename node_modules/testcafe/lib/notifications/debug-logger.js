'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _lodash = require('lodash');

var _logUpdateAsyncHook = require('log-update-async-hook');

var _logUpdateAsyncHook2 = _interopRequireDefault(_logUpdateAsyncHook);

var _createStackFilter = require('../errors/create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    messages: [],

    debugLogging: false,

    streamsOverridden: false,

    _overrideStream(stream) {
        var initialWrite = stream.write;

        stream.write = (chunk, encoding, cb) => {
            if (this.debugLogging) initialWrite.call(stream, chunk, encoding, cb);else {
                this.debugLogging = true;

                _logUpdateAsyncHook2.default.clear();
                _logUpdateAsyncHook2.default.done();

                initialWrite.call(stream, chunk, encoding, cb);

                setTimeout(() => this._showAllBreakpoints(), 0);

                this.debugLogging = false;
            }
        };
    },

    _overrideStreams() {
        this._overrideStream(process.stdout);
        this._overrideStream(process.stderr);

        this.streamsOverridden = true;
    },

    _getMessageAsString() {
        var string = '';

        for (var _iterator = this.messages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var message = _ref;

            string += message.frame;
        }return string;
    },

    _showAllBreakpoints() {
        if (!this.messages.length) return;

        this.debugLogging = true;
        (0, _logUpdateAsyncHook2.default)(this._getMessageAsString());
        this.debugLogging = false;
    },

    showBreakpoint(testRunId, userAgent, callsite, testError) {
        if (!this.streamsOverridden) this._overrideStreams();

        // NOTE: Raw API does not have callsite.
        var hasCallsite = callsite && callsite.renderSync;

        var callsiteStr = hasCallsite ? callsite.renderSync({
            frameSize: 1,
            stackFilter: (0, _createStackFilter2.default)(Error.stackTraceLimit),
            stack: false
        }) : '';

        var frame = `\n` + `----\n` + `${userAgent}\n` + _chalk2.default.yellow(testError ? 'DEBUGGER PAUSE ON FAILED TEST:' : 'DEBUGGER PAUSE:') + `\n` + `${testError ? testError : callsiteStr}\n` + `----\n`;

        var message = { testRunId, frame };
        var index = (0, _lodash.findIndex)(this.messages, { testRunId });

        if (index === -1) this.messages.push(message);else this.messages[index] = message;

        this._showAllBreakpoints();
    },

    hideBreakpoint(testRunId) {
        var index = (0, _lodash.findIndex)(this.messages, { testRunId });

        if (index !== -1) this.messages.splice(index, 1);

        this._showAllBreakpoints();
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpZmljYXRpb25zL2RlYnVnLWxvZ2dlci5qcyJdLCJuYW1lcyI6WyJtZXNzYWdlcyIsImRlYnVnTG9nZ2luZyIsInN0cmVhbXNPdmVycmlkZGVuIiwiX292ZXJyaWRlU3RyZWFtIiwic3RyZWFtIiwiaW5pdGlhbFdyaXRlIiwid3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2IiLCJjYWxsIiwibG9nVXBkYXRlIiwiY2xlYXIiLCJkb25lIiwic2V0VGltZW91dCIsIl9zaG93QWxsQnJlYWtwb2ludHMiLCJfb3ZlcnJpZGVTdHJlYW1zIiwicHJvY2VzcyIsInN0ZG91dCIsInN0ZGVyciIsIl9nZXRNZXNzYWdlQXNTdHJpbmciLCJzdHJpbmciLCJtZXNzYWdlIiwiZnJhbWUiLCJsZW5ndGgiLCJzaG93QnJlYWtwb2ludCIsInRlc3RSdW5JZCIsInVzZXJBZ2VudCIsImNhbGxzaXRlIiwidGVzdEVycm9yIiwiaGFzQ2FsbHNpdGUiLCJyZW5kZXJTeW5jIiwiY2FsbHNpdGVTdHIiLCJmcmFtZVNpemUiLCJzdGFja0ZpbHRlciIsIkVycm9yIiwic3RhY2tUcmFjZUxpbWl0Iiwic3RhY2siLCJjaGFsayIsInllbGxvdyIsImluZGV4IiwicHVzaCIsImhpZGVCcmVha3BvaW50Iiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O2tCQUVlO0FBQ1hBLGNBQVUsRUFEQzs7QUFHWEMsa0JBQWMsS0FISDs7QUFLWEMsdUJBQW1CLEtBTFI7O0FBT1hDLG9CQUFpQkMsTUFBakIsRUFBeUI7QUFDckIsWUFBSUMsZUFBZUQsT0FBT0UsS0FBMUI7O0FBRUFGLGVBQU9FLEtBQVAsR0FBZSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsRUFBa0JDLEVBQWxCLEtBQXlCO0FBQ3BDLGdCQUFJLEtBQUtSLFlBQVQsRUFDSUksYUFBYUssSUFBYixDQUFrQk4sTUFBbEIsRUFBMEJHLEtBQTFCLEVBQWlDQyxRQUFqQyxFQUEyQ0MsRUFBM0MsRUFESixLQUVLO0FBQ0QscUJBQUtSLFlBQUwsR0FBb0IsSUFBcEI7O0FBRUFVLDZDQUFVQyxLQUFWO0FBQ0FELDZDQUFVRSxJQUFWOztBQUVBUiw2QkFBYUssSUFBYixDQUFrQk4sTUFBbEIsRUFBMEJHLEtBQTFCLEVBQWlDQyxRQUFqQyxFQUEyQ0MsRUFBM0M7O0FBRUFLLDJCQUFXLE1BQU0sS0FBS0MsbUJBQUwsRUFBakIsRUFBNkMsQ0FBN0M7O0FBRUEscUJBQUtkLFlBQUwsR0FBb0IsS0FBcEI7QUFDSDtBQUNKLFNBZkQ7QUFnQkgsS0ExQlU7O0FBNEJYZSx1QkFBb0I7QUFDaEIsYUFBS2IsZUFBTCxDQUFxQmMsUUFBUUMsTUFBN0I7QUFDQSxhQUFLZixlQUFMLENBQXFCYyxRQUFRRSxNQUE3Qjs7QUFFQSxhQUFLakIsaUJBQUwsR0FBeUIsSUFBekI7QUFDSCxLQWpDVTs7QUFtQ1hrQiwwQkFBdUI7QUFDbkIsWUFBSUMsU0FBUyxFQUFiOztBQUVBLDZCQUFvQixLQUFLckIsUUFBekI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQUFTc0IsT0FBVDs7QUFDSUQsc0JBQVVDLFFBQVFDLEtBQWxCO0FBREosU0FHQSxPQUFPRixNQUFQO0FBQ0gsS0ExQ1U7O0FBNENYTiwwQkFBdUI7QUFDbkIsWUFBSSxDQUFDLEtBQUtmLFFBQUwsQ0FBY3dCLE1BQW5CLEVBQ0k7O0FBRUosYUFBS3ZCLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSwwQ0FBVSxLQUFLbUIsbUJBQUwsRUFBVjtBQUNBLGFBQUtuQixZQUFMLEdBQW9CLEtBQXBCO0FBQ0gsS0FuRFU7O0FBcURYd0IsbUJBQWdCQyxTQUFoQixFQUEyQkMsU0FBM0IsRUFBc0NDLFFBQXRDLEVBQWdEQyxTQUFoRCxFQUEyRDtBQUN2RCxZQUFJLENBQUMsS0FBSzNCLGlCQUFWLEVBQ0ksS0FBS2MsZ0JBQUw7O0FBRUo7QUFDQSxZQUFJYyxjQUFjRixZQUFZQSxTQUFTRyxVQUF2Qzs7QUFFQSxZQUFJQyxjQUFjRixjQUFjRixTQUFTRyxVQUFULENBQW9CO0FBQ2hERSx1QkFBYSxDQURtQztBQUVoREMseUJBQWEsaUNBQWtCQyxNQUFNQyxlQUF4QixDQUZtQztBQUdoREMsbUJBQWE7QUFIbUMsU0FBcEIsQ0FBZCxHQUliLEVBSkw7O0FBTUEsWUFBSWQsUUFBUyxJQUFELEdBQ0MsUUFERCxHQUVDLEdBQUVJLFNBQVUsSUFGYixHQUdBVyxnQkFBTUMsTUFBTixDQUFhVixZQUFZLGdDQUFaLEdBQStDLGlCQUE1RCxDQUhBLEdBR2tGLElBSGxGLEdBSUMsR0FBRUEsWUFBWUEsU0FBWixHQUF3QkcsV0FBWSxJQUp2QyxHQUtDLFFBTGI7O0FBT0EsWUFBSVYsVUFBVSxFQUFFSSxTQUFGLEVBQWFILEtBQWIsRUFBZDtBQUNBLFlBQUlpQixRQUFVLHVCQUFVLEtBQUt4QyxRQUFmLEVBQXlCLEVBQUUwQixTQUFGLEVBQXpCLENBQWQ7O0FBRUEsWUFBSWMsVUFBVSxDQUFDLENBQWYsRUFDSSxLQUFLeEMsUUFBTCxDQUFjeUMsSUFBZCxDQUFtQm5CLE9BQW5CLEVBREosS0FHSSxLQUFLdEIsUUFBTCxDQUFjd0MsS0FBZCxJQUF1QmxCLE9BQXZCOztBQUVKLGFBQUtQLG1CQUFMO0FBQ0gsS0FsRlU7O0FBb0ZYMkIsbUJBQWdCaEIsU0FBaEIsRUFBMkI7QUFDdkIsWUFBSWMsUUFBUSx1QkFBVSxLQUFLeEMsUUFBZixFQUF5QixFQUFFMEIsU0FBRixFQUF6QixDQUFaOztBQUVBLFlBQUljLFVBQVUsQ0FBQyxDQUFmLEVBQ0ksS0FBS3hDLFFBQUwsQ0FBYzJDLE1BQWQsQ0FBcUJILEtBQXJCLEVBQTRCLENBQTVCOztBQUVKLGFBQUt6QixtQkFBTDtBQUNIO0FBM0ZVLEMiLCJmaWxlIjoibm90aWZpY2F0aW9ucy9kZWJ1Zy1sb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgZmluZEluZGV4IH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2dVcGRhdGUgZnJvbSAnbG9nLXVwZGF0ZS1hc3luYy1ob29rJztcbmltcG9ydCBjcmVhdGVTdGFja0ZpbHRlciBmcm9tICcuLi9lcnJvcnMvY3JlYXRlLXN0YWNrLWZpbHRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBtZXNzYWdlczogW10sXG5cbiAgICBkZWJ1Z0xvZ2dpbmc6IGZhbHNlLFxuXG4gICAgc3RyZWFtc092ZXJyaWRkZW46IGZhbHNlLFxuXG4gICAgX292ZXJyaWRlU3RyZWFtIChzdHJlYW0pIHtcbiAgICAgICAgdmFyIGluaXRpYWxXcml0ZSA9IHN0cmVhbS53cml0ZTtcblxuICAgICAgICBzdHJlYW0ud3JpdGUgPSAoY2h1bmssIGVuY29kaW5nLCBjYikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVidWdMb2dnaW5nKVxuICAgICAgICAgICAgICAgIGluaXRpYWxXcml0ZS5jYWxsKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlYnVnTG9nZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBsb2dVcGRhdGUuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICBsb2dVcGRhdGUuZG9uZSgpO1xuXG4gICAgICAgICAgICAgICAgaW5pdGlhbFdyaXRlLmNhbGwoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5fc2hvd0FsbEJyZWFrcG9pbnRzKCksIDApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z0xvZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgX292ZXJyaWRlU3RyZWFtcyAoKSB7XG4gICAgICAgIHRoaXMuX292ZXJyaWRlU3RyZWFtKHByb2Nlc3Muc3Rkb3V0KTtcbiAgICAgICAgdGhpcy5fb3ZlcnJpZGVTdHJlYW0ocHJvY2Vzcy5zdGRlcnIpO1xuXG4gICAgICAgIHRoaXMuc3RyZWFtc092ZXJyaWRkZW4gPSB0cnVlO1xuICAgIH0sXG5cbiAgICBfZ2V0TWVzc2FnZUFzU3RyaW5nICgpIHtcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnO1xuXG4gICAgICAgIGZvciAodmFyIG1lc3NhZ2Ugb2YgdGhpcy5tZXNzYWdlcylcbiAgICAgICAgICAgIHN0cmluZyArPSBtZXNzYWdlLmZyYW1lO1xuXG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfSxcblxuICAgIF9zaG93QWxsQnJlYWtwb2ludHMgKCkge1xuICAgICAgICBpZiAoIXRoaXMubWVzc2FnZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMuZGVidWdMb2dnaW5nID0gdHJ1ZTtcbiAgICAgICAgbG9nVXBkYXRlKHRoaXMuX2dldE1lc3NhZ2VBc1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZ2dpbmcgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgc2hvd0JyZWFrcG9pbnQgKHRlc3RSdW5JZCwgdXNlckFnZW50LCBjYWxsc2l0ZSwgdGVzdEVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5zdHJlYW1zT3ZlcnJpZGRlbilcbiAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlU3RyZWFtcygpO1xuXG4gICAgICAgIC8vIE5PVEU6IFJhdyBBUEkgZG9lcyBub3QgaGF2ZSBjYWxsc2l0ZS5cbiAgICAgICAgdmFyIGhhc0NhbGxzaXRlID0gY2FsbHNpdGUgJiYgY2FsbHNpdGUucmVuZGVyU3luYztcblxuICAgICAgICB2YXIgY2FsbHNpdGVTdHIgPSBoYXNDYWxsc2l0ZSA/IGNhbGxzaXRlLnJlbmRlclN5bmMoe1xuICAgICAgICAgICAgZnJhbWVTaXplOiAgIDEsXG4gICAgICAgICAgICBzdGFja0ZpbHRlcjogY3JlYXRlU3RhY2tGaWx0ZXIoRXJyb3Iuc3RhY2tUcmFjZUxpbWl0KSxcbiAgICAgICAgICAgIHN0YWNrOiAgICAgICBmYWxzZVxuICAgICAgICB9KSA6ICcnO1xuXG4gICAgICAgIHZhciBmcmFtZSA9IGBcXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYC0tLS1cXG5gICtcbiAgICAgICAgICAgICAgICAgICAgYCR7dXNlckFnZW50fVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBjaGFsay55ZWxsb3codGVzdEVycm9yID8gJ0RFQlVHR0VSIFBBVVNFIE9OIEZBSUxFRCBURVNUOicgOiAnREVCVUdHRVIgUEFVU0U6JykgKyBgXFxuYCArXG4gICAgICAgICAgICAgICAgICAgIGAke3Rlc3RFcnJvciA/IHRlc3RFcnJvciA6IGNhbGxzaXRlU3RyfVxcbmAgK1xuICAgICAgICAgICAgICAgICAgICBgLS0tLVxcbmA7XG5cbiAgICAgICAgdmFyIG1lc3NhZ2UgPSB7IHRlc3RSdW5JZCwgZnJhbWUgfTtcbiAgICAgICAgdmFyIGluZGV4ICAgPSBmaW5kSW5kZXgodGhpcy5tZXNzYWdlcywgeyB0ZXN0UnVuSWQgfSk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSlcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc1tpbmRleF0gPSBtZXNzYWdlO1xuXG4gICAgICAgIHRoaXMuX3Nob3dBbGxCcmVha3BvaW50cygpO1xuICAgIH0sXG5cbiAgICBoaWRlQnJlYWtwb2ludCAodGVzdFJ1bklkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLm1lc3NhZ2VzLCB7IHRlc3RSdW5JZCB9KTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlcy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgIHRoaXMuX3Nob3dBbGxCcmVha3BvaW50cygpO1xuICAgIH1cbn07XG4iXX0=
