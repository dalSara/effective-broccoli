'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _phase = require('../test-run/phase');

var _phase2 = _interopRequireDefault(_phase);

var _processTestFnError = require('../errors/process-test-fn-error');

var _processTestFnError2 = _interopRequireDefault(_processTestFnError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FixtureHookController {
    constructor(tests, browserConnectionCount) {
        this.fixtureMap = FixtureHookController._createFixtureMap(tests, browserConnectionCount);
    }

    static _ensureFixtureMapItem(fixtureMap, fixture) {
        if (!fixtureMap.has(fixture)) {
            var item = {
                started: false,
                runningFixtureBeforeHook: false,
                fixtureBeforeHookErr: null,
                pendingTestRunCount: 0,
                fixtureCtx: (0, _create2.default)(null)
            };

            fixtureMap.set(fixture, item);
        }
    }

    static _createFixtureMap(tests, browserConnectionCount) {
        return tests.reduce((fixtureMap, test) => {
            var fixture = test.fixture;

            if (!test.skip) {
                FixtureHookController._ensureFixtureMapItem(fixtureMap, fixture);

                var item = fixtureMap.get(fixture);

                item.pendingTestRunCount += browserConnectionCount;
            }

            return fixtureMap;
        }, new _map2.default());
    }

    _getFixtureMapItem(test) {
        return test.skip ? null : this.fixtureMap.get(test.fixture);
    }

    isTestBlocked(test) {
        var item = this._getFixtureMapItem(test);

        return item && item.runningFixtureBeforeHook;
    }

    runFixtureBeforeHookIfNecessary(testRun) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var fixture = testRun.test.fixture;
            var item = _this._getFixtureMapItem(testRun.test);

            if (item) {
                var shouldRunBeforeHook = !item.started && fixture.beforeFn;

                item.started = true;

                if (shouldRunBeforeHook) {
                    item.runningFixtureBeforeHook = true;

                    try {
                        yield fixture.beforeFn(item.fixtureCtx);
                    } catch (err) {
                        item.fixtureBeforeHookErr = (0, _processTestFnError2.default)(err);
                    }

                    item.runningFixtureBeforeHook = false;
                }

                // NOTE: fail all tests in fixture if fixture.before hook has error
                if (item.fixtureBeforeHookErr) {
                    testRun.phase = _phase2.default.inFixtureBeforeHook;

                    testRun.addError(item.fixtureBeforeHookErr);

                    return false;
                }

                testRun.fixtureCtx = item.fixtureCtx;
            }

            return true;
        })();
    }

    runFixtureAfterHookIfNecessary(testRun) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var fixture = testRun.test.fixture;
            var item = _this2._getFixtureMapItem(testRun.test);

            if (item) {
                item.pendingTestRunCount--;

                if (item.pendingTestRunCount === 0 && fixture.afterFn) {
                    testRun.phase = _phase2.default.inFixtureAfterHook;

                    try {
                        yield fixture.afterFn(item.fixtureCtx);
                    } catch (err) {
                        testRun.addError((0, _processTestFnError2.default)(err));
                    }
                }
            }
        })();
    }
}
exports.default = FixtureHookController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
