'use strict';

exports.__esModule = true;
exports.default = selectorTextFilter;
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------

/* eslint-disable no-undef */
function selectorTextFilter(node, index, originNode, textFilter) {

    function hasChildrenWithText(parentNode) {
        var cnCount = parentNode.childNodes.length;

        for (var i = 0; i < cnCount; i++) {
            if (selectorTextFilter(parentNode.childNodes[i], index, originNode, textFilter)) return true;
        }

        return false;
    }

    function checkNodeText(text) {
        if (textFilter instanceof RegExp) return textFilter.test(text);
        return textFilter === text.trim();
    }

    // Element
    if (node.nodeType === 1) {
        var text = node.innerText;

        // NOTE: In Firefox, <option> elements don't have `innerText`.
        // So, we fallback to `textContent` in that case (see GH-861).
        if (node.tagName.toLowerCase() === 'option') {
            var textContent = node.textContent;

            if (!text && textContent) text = textContent;
        }

        return checkNodeText(text);
    }

    // Document
    if (node.nodeType === 9) {
        // NOTE: latest version of Edge doesn't have `innerText` for `document`,
        // `html` and `body`. So we check their children instead.
        var head = node.querySelector('head');
        var body = node.querySelector('body');

        return hasChildrenWithText(head, textFilter) || hasChildrenWithText(body, textFilter);
    }

    // DocumentFragment
    if (node.nodeType === 11) return hasChildrenWithText(node, textFilter);

    return checkNodeText(node.textContent);
}
/* eslint-enable no-undef */

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9ycy9zZWxlY3Rvci10ZXh0LWZpbHRlci5qcyJdLCJuYW1lcyI6WyJzZWxlY3RvclRleHRGaWx0ZXIiLCJub2RlIiwiaW5kZXgiLCJvcmlnaW5Ob2RlIiwidGV4dEZpbHRlciIsImhhc0NoaWxkcmVuV2l0aFRleHQiLCJwYXJlbnROb2RlIiwiY25Db3VudCIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJpIiwiY2hlY2tOb2RlVGV4dCIsInRleHQiLCJSZWdFeHAiLCJ0ZXN0IiwidHJpbSIsIm5vZGVUeXBlIiwiaW5uZXJUZXh0IiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwidGV4dENvbnRlbnQiLCJoZWFkIiwicXVlcnlTZWxlY3RvciIsImJvZHkiXSwibWFwcGluZ3MiOiI7OztrQkFNd0JBLGtCO0FBTnhCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ2UsU0FBU0Esa0JBQVQsQ0FBNkJDLElBQTdCLEVBQW1DQyxLQUFuQyxFQUEwQ0MsVUFBMUMsRUFBc0RDLFVBQXRELEVBQWtFOztBQUU3RSxhQUFTQyxtQkFBVCxDQUE4QkMsVUFBOUIsRUFBMEM7QUFDdEMsWUFBSUMsVUFBVUQsV0FBV0UsVUFBWCxDQUFzQkMsTUFBcEM7O0FBRUEsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILE9BQXBCLEVBQTZCRyxHQUE3QixFQUFrQztBQUM5QixnQkFBSVYsbUJBQW1CTSxXQUFXRSxVQUFYLENBQXNCRSxDQUF0QixDQUFuQixFQUE2Q1IsS0FBN0MsRUFBb0RDLFVBQXBELEVBQWdFQyxVQUFoRSxDQUFKLEVBQ0ksT0FBTyxJQUFQO0FBQ1A7O0FBRUQsZUFBTyxLQUFQO0FBQ0g7O0FBRUQsYUFBU08sYUFBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDMUIsWUFBSVIsc0JBQXNCUyxNQUExQixFQUNJLE9BQU9ULFdBQVdVLElBQVgsQ0FBZ0JGLElBQWhCLENBQVA7QUFDSixlQUFPUixlQUFlUSxLQUFLRyxJQUFMLEVBQXRCO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJZCxLQUFLZSxRQUFMLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLFlBQUlKLE9BQU9YLEtBQUtnQixTQUFoQjs7QUFFQTtBQUNBO0FBQ0EsWUFBSWhCLEtBQUtpQixPQUFMLENBQWFDLFdBQWIsT0FBK0IsUUFBbkMsRUFBNkM7QUFDekMsZ0JBQUlDLGNBQWNuQixLQUFLbUIsV0FBdkI7O0FBRUEsZ0JBQUksQ0FBQ1IsSUFBRCxJQUFTUSxXQUFiLEVBQ0lSLE9BQU9RLFdBQVA7QUFDUDs7QUFFRCxlQUFPVCxjQUFjQyxJQUFkLENBQVA7QUFDSDs7QUFFRDtBQUNBLFFBQUlYLEtBQUtlLFFBQUwsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDckI7QUFDQTtBQUNBLFlBQUlLLE9BQU9wQixLQUFLcUIsYUFBTCxDQUFtQixNQUFuQixDQUFYO0FBQ0EsWUFBSUMsT0FBT3RCLEtBQUtxQixhQUFMLENBQW1CLE1BQW5CLENBQVg7O0FBRUEsZUFBT2pCLG9CQUFvQmdCLElBQXBCLEVBQTBCakIsVUFBMUIsS0FBeUNDLG9CQUFvQmtCLElBQXBCLEVBQTBCbkIsVUFBMUIsQ0FBaEQ7QUFDSDs7QUFFRDtBQUNBLFFBQUlILEtBQUtlLFFBQUwsS0FBa0IsRUFBdEIsRUFDSSxPQUFPWCxvQkFBb0JKLElBQXBCLEVBQTBCRyxVQUExQixDQUFQOztBQUVKLFdBQU9PLGNBQWNWLEtBQUttQixXQUFuQixDQUFQO0FBQ0g7QUFDRCIsImZpbGUiOiJjbGllbnQtZnVuY3Rpb25zL3NlbGVjdG9ycy9zZWxlY3Rvci10ZXh0LWZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFdBUk5JTkc6IHRoaXMgZmlsZSBpcyB1c2VkIGJ5IGJvdGggdGhlIGNsaWVudCBhbmQgdGhlIHNlcnZlci5cbi8vIERvIG5vdCB1c2UgYW55IGJyb3dzZXIgb3Igbm9kZS1zcGVjaWZpYyBBUEkhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZWxlY3RvclRleHRGaWx0ZXIgKG5vZGUsIGluZGV4LCBvcmlnaW5Ob2RlLCB0ZXh0RmlsdGVyKSB7XG5cbiAgICBmdW5jdGlvbiBoYXNDaGlsZHJlbldpdGhUZXh0IChwYXJlbnROb2RlKSB7XG4gICAgICAgIHZhciBjbkNvdW50ID0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNuQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yVGV4dEZpbHRlcihwYXJlbnROb2RlLmNoaWxkTm9kZXNbaV0sIGluZGV4LCBvcmlnaW5Ob2RlLCB0ZXh0RmlsdGVyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja05vZGVUZXh0ICh0ZXh0KSB7XG4gICAgICAgIGlmICh0ZXh0RmlsdGVyIGluc3RhbmNlb2YgUmVnRXhwKVxuICAgICAgICAgICAgcmV0dXJuIHRleHRGaWx0ZXIudGVzdCh0ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRleHRGaWx0ZXIgPT09IHRleHQudHJpbSgpO1xuICAgIH1cblxuICAgIC8vIEVsZW1lbnRcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICB2YXIgdGV4dCA9IG5vZGUuaW5uZXJUZXh0O1xuXG4gICAgICAgIC8vIE5PVEU6IEluIEZpcmVmb3gsIDxvcHRpb24+IGVsZW1lbnRzIGRvbid0IGhhdmUgYGlubmVyVGV4dGAuXG4gICAgICAgIC8vIFNvLCB3ZSBmYWxsYmFjayB0byBgdGV4dENvbnRlbnRgIGluIHRoYXQgY2FzZSAoc2VlIEdILTg2MSkuXG4gICAgICAgIGlmIChub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29wdGlvbicpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0Q29udGVudCA9IG5vZGUudGV4dENvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICghdGV4dCAmJiB0ZXh0Q29udGVudClcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dENvbnRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hlY2tOb2RlVGV4dCh0ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBEb2N1bWVudFxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgICAgIC8vIE5PVEU6IGxhdGVzdCB2ZXJzaW9uIG9mIEVkZ2UgZG9lc24ndCBoYXZlIGBpbm5lclRleHRgIGZvciBgZG9jdW1lbnRgLFxuICAgICAgICAvLyBgaHRtbGAgYW5kIGBib2R5YC4gU28gd2UgY2hlY2sgdGhlaXIgY2hpbGRyZW4gaW5zdGVhZC5cbiAgICAgICAgdmFyIGhlYWQgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbiAgICAgICAgdmFyIGJvZHkgPSBub2RlLnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICAgICAgICByZXR1cm4gaGFzQ2hpbGRyZW5XaXRoVGV4dChoZWFkLCB0ZXh0RmlsdGVyKSB8fCBoYXNDaGlsZHJlbldpdGhUZXh0KGJvZHksIHRleHRGaWx0ZXIpO1xuICAgIH1cblxuICAgIC8vIERvY3VtZW50RnJhZ21lbnRcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMTEpXG4gICAgICAgIHJldHVybiBoYXNDaGlsZHJlbldpdGhUZXh0KG5vZGUsIHRleHRGaWx0ZXIpO1xuXG4gICAgcmV0dXJuIGNoZWNrTm9kZVRleHQobm9kZS50ZXh0Q29udGVudCk7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG4iXX0=
