'use strict';

exports.__esModule = true;
exports.resizeWindow = exports.takeScreenshot = exports.updateMobileViewportSize = exports.closeTab = exports.createClient = undefined;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let getActiveTab = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (cdpPort, browserId) {
        var tabs = yield _chromeRemoteInterface2.default.listTabs({ port: cdpPort });
        var tab = tabs.filter(function (t) {
            return t.type === 'page' && t.url.indexOf(browserId) > -1;
        })[0];

        return tab;
    });

    return function getActiveTab(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let setEmulationBounds = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* ({ client, config, viewportSize, emulatedDevicePixelRatio }) {
        yield client.Emulation.setDeviceMetricsOverride({
            width: viewportSize.width,
            height: viewportSize.height,
            deviceScaleFactor: emulatedDevicePixelRatio,
            mobile: config.mobile,
            fitWindow: false
        });

        yield client.Emulation.setVisibleSize({ width: viewportSize.width, height: viewportSize.height });
    });

    return function setEmulationBounds(_x3) {
        return _ref2.apply(this, arguments);
    };
})();

let setEmulation = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        var client = runtimeInfo.client,
            config = runtimeInfo.config;


        if (config.userAgent !== void 0) yield client.Network.setUserAgentOverride({ userAgent: config.userAgent });

        if (config.touch !== void 0) {
            const touchConfig = {
                enabled: config.touch,
                configuration: config.mobile ? 'mobile' : 'desktop',
                maxTouchPoints: 1
            };

            if (client.Emulation.setEmitTouchEventsForMouse) yield client.Emulation.setEmitTouchEventsForMouse(touchConfig);

            if (client.Emulation.setTouchEmulationEnabled) yield client.Emulation.setTouchEmulationEnabled(touchConfig);
        }

        yield resizeWindow({ width: config.width, height: config.height }, runtimeInfo);
    });

    return function setEmulation(_x4) {
        return _ref3.apply(this, arguments);
    };
})();

let createClient = exports.createClient = (() => {
    var _ref4 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        var browserId = runtimeInfo.browserId,
            config = runtimeInfo.config,
            cdpPort = runtimeInfo.cdpPort;


        try {
            var tab = yield getActiveTab(cdpPort, browserId);

            if (!tab) return;

            var client = yield (0, _chromeRemoteInterface2.default)({ target: tab, port: cdpPort });
        } catch (e) {
            return;
        }

        runtimeInfo.tab = tab;
        runtimeInfo.client = client;

        yield client.Page.enable();
        yield client.Network.enable();
        yield client.Runtime.enable();

        var devicePixelRatioQueryResult = yield client.Runtime.evaluate({ expression: 'window.devicePixelRatio' });

        runtimeInfo.originalDevicePixelRatio = devicePixelRatioQueryResult.result.value;
        runtimeInfo.emulatedDevicePixelRatio = config.scaleFactor || runtimeInfo.originalDevicePixelRatio;

        if (config.emulation) yield setEmulation(runtimeInfo);
    });

    return function createClient(_x5) {
        return _ref4.apply(this, arguments);
    };
})();

let closeTab = exports.closeTab = (() => {
    var _ref5 = (0, _asyncToGenerator3.default)(function* ({ tab, cdpPort }) {
        yield _chromeRemoteInterface2.default.closeTab({ id: tab.id, port: cdpPort });
    });

    return function closeTab(_x6) {
        return _ref5.apply(this, arguments);
    };
})();

let updateMobileViewportSize = exports.updateMobileViewportSize = (() => {
    var _ref6 = (0, _asyncToGenerator3.default)(function* (runtimeInfo) {
        const windowDimensionsQueryResult = yield runtimeInfo.client.Runtime.evaluate({
            expression: `(${_clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT})()`,
            returnByValue: true
        });

        const windowDimensions = windowDimensionsQueryResult.result.value;

        runtimeInfo.viewportSize.width = windowDimensions.outerWidth;
        runtimeInfo.viewportSize.height = windowDimensions.outerHeight;
    });

    return function updateMobileViewportSize(_x7) {
        return _ref6.apply(this, arguments);
    };
})();

let takeScreenshot = exports.takeScreenshot = (() => {
    var _ref7 = (0, _asyncToGenerator3.default)(function* (path, { client }) {
        var _ref8 = yield client.Page.getLayoutMetrics();

        const visualViewport = _ref8.visualViewport;


        const clipRegion = {
            x: visualViewport.pageX,
            y: visualViewport.pageY,
            width: visualViewport.clientWidth,
            height: visualViewport.clientHeight,
            scale: visualViewport.scale
        };

        const screenshot = yield client.Page.captureScreenshot({ fromSurface: true, clip: clipRegion });

        yield (0, _promisifiedFunctions.writeFile)(path, screenshot.data, { encoding: 'base64' });
    });

    return function takeScreenshot(_x8, _x9) {
        return _ref7.apply(this, arguments);
    };
})();

let resizeWindow = exports.resizeWindow = (() => {
    var _ref9 = (0, _asyncToGenerator3.default)(function* (newDimensions, runtimeInfo) {
        var browserId = runtimeInfo.browserId,
            config = runtimeInfo.config,
            viewportSize = runtimeInfo.viewportSize,
            providerMethods = runtimeInfo.providerMethods;


        var currentWidth = viewportSize.width;
        var currentHeight = viewportSize.height;
        var newWidth = newDimensions.width || currentWidth;
        var newHeight = newDimensions.height || currentHeight;

        if (!config.headless) yield providerMethods.resizeLocalBrowserWindow(browserId, newWidth, newHeight, currentWidth, currentHeight);

        viewportSize.width = newWidth;
        viewportSize.height = newHeight;

        if (config.emulation) yield setEmulationBounds(runtimeInfo);
    });

    return function resizeWindow(_x10, _x11) {
        return _ref9.apply(this, arguments);
    };
})();

exports.isHeadlessTab = isHeadlessTab;

var _chromeRemoteInterface = require('chrome-remote-interface');

var _chromeRemoteInterface2 = _interopRequireDefault(_chromeRemoteInterface);

var _promisifiedFunctions = require('../../../../utils/promisified-functions');

var _clientFunctions = require('../../utils/client-functions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isHeadlessTab({ tab, config }) {
    return tab && config.headless;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
