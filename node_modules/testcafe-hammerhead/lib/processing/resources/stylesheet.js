'use strict';

exports.__esModule = true;

var _resourceProcessorBase = require('./resource-processor-base');

var _resourceProcessorBase2 = _interopRequireDefault(_resourceProcessorBase);

var _style = require('../style');

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StylesheetProcessor = function (_ResourceProcessorBas) {
    _inherits(StylesheetProcessor, _ResourceProcessorBas);

    function StylesheetProcessor() {
        _classCallCheck(this, StylesheetProcessor);

        return _possibleConstructorReturn(this, _ResourceProcessorBas.apply(this, arguments));
    }

    StylesheetProcessor.prototype.processResource = function processResource(stylesheet, ctx, charset, urlReplacer) {
        return _style2.default.process(stylesheet, urlReplacer);
    };

    StylesheetProcessor.prototype.shouldProcessResource = function shouldProcessResource(ctx) {
        return ctx.contentInfo.isCSS;
    };

    return StylesheetProcessor;
}(_resourceProcessorBase2.default);

exports.default = new StylesheetProcessor();
module.exports = exports['default'];