'use strict';

exports.__esModule = true;

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _readFileRelative = require('read-file-relative');

var _events = require('events');

var _url = require('url');

var _cookies = require('./cookies');

var _cookies2 = _interopRequireDefault(_cookies);

var _storage = require('../upload/storage');

var _storage2 = _interopRequireDefault(_storage);

var _command = require('./command');

var _command2 = _interopRequireDefault(_command);

var _url2 = require('../utils/url');

var _generateUniqueId = require('../utils/generate-unique-id');

var _generateUniqueId2 = _interopRequireDefault(_generateUniqueId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Const
var TASK_TEMPLATE = (0, _readFileRelative.readSync)('../client/task.js.mustache');

// Session

var Session = function (_EventEmitter) {
    _inherits(Session, _EventEmitter);

    function Session(uploadsRoot) {
        _classCallCheck(this, Session);

        var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

        _this.uploadStorage = new _storage2.default(uploadsRoot);

        _this.id = (0, _generateUniqueId2.default)();
        _this.cookies = new _cookies2.default();
        _this.proxy = null;
        _this.externalProxySettings = null;
        _this.pageLoadCount = 0;

        _this.requireStateSwitch = false;
        _this.pendingStateSnapshot = null;

        _this.injectable = {
            scripts: ['/hammerhead.js'],
            styles: []
        };

        _this.requestEventListeners = new Map();
        _this.mocks = new Map();
        return _this;
    }

    // State


    Session.prototype.getStateSnapshot = function getStateSnapshot() {
        return {
            cookies: this.cookies.serializeJar(),
            storages: null
        };
    };

    Session.prototype.useStateSnapshot = function useStateSnapshot(snapshot) {
        // NOTE: we don't perform state switch immediately, since there might be
        // pending requests from current page. Therefore, we perform switch in
        // onPageRequest handler when new page is requested.
        this.requireStateSwitch = true;
        this.pendingStateSnapshot = snapshot || {
            cookies: null,
            storages: {
                localStorage: '[[],[]]',
                sessionStorage: '[[],[]]'
            }
        };
    };

    Session.prototype.handleServiceMessage = function () {
        var _ref = _asyncToGenerator(function* (msg, serverInfo) {
            if (this[msg.cmd]) return yield this[msg.cmd](msg, serverInfo);

            throw new Error('Malformed service message or message handler is not implemented');
        });

        function handleServiceMessage(_x, _x2) {
            return _ref.apply(this, arguments);
        }

        return handleServiceMessage;
    }();

    Session.prototype._fillTaskScriptTemplate = function _fillTaskScriptTemplate(serverInfo, isFirstPageLoad, referer, cookie, iframeTaskScriptTemplate, payloadScript) {
        referer = referer === null ? '{{{referer}}}' : referer;
        cookie = cookie === null ? '{{{cookie}}}' : cookie;

        iframeTaskScriptTemplate = iframeTaskScriptTemplate === null ? '{{{iframeTaskScriptTemplate}}}' : iframeTaskScriptTemplate;

        return _mustache2.default.render(TASK_TEMPLATE, {
            sessionId: this.id,
            serviceMsgUrl: serverInfo.domain + '/messaging',
            cookieSyncUrl: serverInfo.domain + '/cookie-sync',
            crossDomainPort: serverInfo.crossDomainPort,
            isFirstPageLoad: isFirstPageLoad,
            referer: referer,
            cookie: cookie,
            forceProxySrcForImage: this.hasRequestEventListeners(),
            iframeTaskScriptTemplate: iframeTaskScriptTemplate,
            payloadScript: payloadScript
        });
    };

    Session.prototype.getIframeTaskScriptTemplate = function getIframeTaskScriptTemplate(serverInfo) {
        return JSON.stringify(this._fillTaskScriptTemplate(serverInfo, false, null, null, null, this._getIframePayloadScript(true)));
    };

    Session.prototype.getTaskScript = function getTaskScript(referer, cookieUrl, serverInfo, isIframe, withPayload) {
        var cookies = JSON.stringify(this.cookies.getClientString(cookieUrl));
        var payloadScript = '';

        if (withPayload) payloadScript = isIframe ? this._getIframePayloadScript() : this._getPayloadScript();

        var taskScript = this._fillTaskScriptTemplate(serverInfo, this.pageLoadCount === 0, referer, cookies, this.getIframeTaskScriptTemplate(serverInfo), payloadScript);

        this.pageLoadCount++;

        return taskScript;
    };

    Session.prototype.setExternalProxySettings = function setExternalProxySettings(proxySettings) {
        if (typeof proxySettings === 'string') proxySettings = { url: proxySettings };

        var _ref2 = proxySettings || {},
            url = _ref2.url,
            bypassRules = _ref2.bypassRules;

        var parsedUrl = typeof url === 'string' ? (0, _url.parse)('http://' + url) : null;
        var settings = null;

        if (parsedUrl && parsedUrl.host) {
            settings = {
                host: parsedUrl.host,
                hostname: parsedUrl.hostname
            };

            if (bypassRules) settings.bypassRules = bypassRules;

            if (parsedUrl.port) settings.port = parsedUrl.port;

            if (parsedUrl.auth) {
                settings.proxyAuth = parsedUrl.auth;
                settings.authHeader = 'Basic ' + Buffer.from(parsedUrl.auth).toString('base64');
            }
        }

        this.externalProxySettings = settings;
    };

    Session.prototype.onPageRequest = function onPageRequest(ctx) {
        if (this.requireStateSwitch) {
            this.cookies.setJar(this.pendingStateSnapshot.cookies);
            ctx.restoringStorages = this.pendingStateSnapshot.storages;
            this.requireStateSwitch = false;
            this.pendingStateSnapshot = null;
        }
    };

    Session.prototype.setCookie = function setCookie(queue) {
        for (var _iterator = queue, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref3 = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref3 = _i.value;
            }

            var msg = _ref3;

            var parsedUrl = (0, _url2.parseProxyUrl)(msg.url);
            var cookieUrl = parsedUrl ? parsedUrl.destUrl : msg.url;

            this.cookies.setByClient(cookieUrl, msg.cookie);
        }
    };

    // Request hooks


    Session.prototype.hasRequestEventListeners = function hasRequestEventListeners() {
        return !!this.requestEventListeners.size;
    };

    Session.prototype.addRequestEventListeners = function addRequestEventListeners(requestFilterRule, eventListeners) {
        this.requestEventListeners.set(requestFilterRule, eventListeners);
    };

    Session.prototype.removeRequestEventListeners = function removeRequestEventListeners(requestFilterRule) {
        this.requestEventListeners.delete(requestFilterRule);
    };

    Session.prototype.getRequestFilterRules = function getRequestFilterRules(requestInfo) {
        var rulesArray = Array.from(this.requestEventListeners.keys());

        return rulesArray.filter(function (rule) {
            return rule.match(requestInfo);
        });
    };

    Session.prototype.callRequestEventCallback = function callRequestEventCallback(eventName, requestFilterRule, eventData) {
        var eventListeners = this.requestEventListeners.get(requestFilterRule);
        var targetRequestEventCallback = eventListeners[eventName];

        if (typeof targetRequestEventCallback === 'function') targetRequestEventCallback(eventData);
    };

    Session.prototype.setMock = function setMock(requestFilterRule, mock) {
        this.mocks.set(requestFilterRule, mock);
    };

    Session.prototype.getMock = function getMock(requestFilterRule) {
        return this.mocks.get(requestFilterRule);
    };

    Session.prototype._getIframePayloadScript = function _getIframePayloadScript() /* iframeWithoutSrc */{
        throw new Error('Not implemented');
    };

    Session.prototype._getPayloadScript = function _getPayloadScript() {
        throw new Error('Not implemented');
    };

    Session.prototype.handleFileDownload = function handleFileDownload() /* ctx */{
        throw new Error('Not implemented');
    };

    Session.prototype.handlePageError = function handlePageError() /* ctx, err */{
        throw new Error('Not implemented');
    };

    Session.prototype.getAuthCredentials = function getAuthCredentials() {
        throw new Error('Not implemented');
    };

    return Session;
}(_events.EventEmitter);

// Service message handlers


exports.default = Session;
var ServiceMessages = Session.prototype;

ServiceMessages[_command2.default.uploadFiles] = function () {
    var _ref4 = _asyncToGenerator(function* (msg) {
        return yield this.uploadStorage.store(msg.fileNames, msg.data);
    });

    return function (_x3) {
        return _ref4.apply(this, arguments);
    };
}();

ServiceMessages[_command2.default.getUploadedFiles] = function () {
    var _ref5 = _asyncToGenerator(function* (msg) {
        return yield this.uploadStorage.get(msg.filePaths);
    });

    return function (_x4) {
        return _ref5.apply(this, arguments);
    };
}();
module.exports = exports['default'];