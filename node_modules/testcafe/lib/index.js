'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// Validations
let getValidHostname = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (hostname) {
        if (hostname) {
            var valid = yield endpointUtils.isMyHostname(hostname);

            if (!valid) throw new _runtime.GeneralError(_message2.default.invalidHostname, hostname);
        } else hostname = endpointUtils.getIPAddress();

        return hostname;
    });

    return function getValidHostname(_x) {
        return _ref.apply(this, arguments);
    };
})();

let getValidPort = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* (port) {
        if (port) {
            var isFree = yield endpointUtils.isFreePort(port);

            if (!isFree) throw new _runtime.GeneralError(_message2.default.portIsNotFree, port);
        } else port = yield endpointUtils.getFreePort();

        return port;
    });

    return function getValidPort(_x2) {
        return _ref2.apply(this, arguments);
    };
})();

// API


let createTestCafe = (() => {
    var _ref3 = (0, _asyncToGenerator3.default)(function* (hostname, port1, port2, sslOptions, developmentMode) {
        var _ref4 = yield _pinkie2.default.all([getValidHostname(hostname), getValidPort(port1), getValidPort(port2)]);

        hostname = _ref4[0];
        port1 = _ref4[1];
        port2 = _ref4[2];


        const testcafe = new _testcafe2.default(hostname, port1, port2, sslOptions, developmentMode);

        (0, _asyncExitHook2.default)(function (cb) {
            return testcafe.close().then(cb);
        });

        return testcafe;
    });

    return function createTestCafe(_x3, _x4, _x5, _x6, _x7) {
        return _ref3.apply(this, arguments);
    };
})();

// Embedding utils


var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _testcafe = require('./testcafe');

var _testcafe2 = _interopRequireDefault(_testcafe);

var _endpointUtils = require('endpoint-utils');

var endpointUtils = _interopRequireWildcard(_endpointUtils);

var _asyncExitHook = require('async-exit-hook');

var _asyncExitHook2 = _interopRequireDefault(_asyncExitHook);

var _runtime = require('./errors/runtime');

var _message = require('./errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _embeddingUtils = require('./embedding-utils');

var _embeddingUtils2 = _interopRequireDefault(_embeddingUtils);

var _exportableLib = require('./api/exportable-lib');

var _exportableLib2 = _interopRequireDefault(_exportableLib);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

createTestCafe.embeddingUtils = _embeddingUtils2.default;

// Common API
(0, _keys2.default)(_exportableLib2.default).forEach(key => {
    createTestCafe[key] = _exportableLib2.default[key];
});

exports.default = createTestCafe;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJob3N0bmFtZSIsInZhbGlkIiwiZW5kcG9pbnRVdGlscyIsImlzTXlIb3N0bmFtZSIsIkdlbmVyYWxFcnJvciIsIk1FU1NBR0UiLCJpbnZhbGlkSG9zdG5hbWUiLCJnZXRJUEFkZHJlc3MiLCJnZXRWYWxpZEhvc3RuYW1lIiwicG9ydCIsImlzRnJlZSIsImlzRnJlZVBvcnQiLCJwb3J0SXNOb3RGcmVlIiwiZ2V0RnJlZVBvcnQiLCJnZXRWYWxpZFBvcnQiLCJwb3J0MSIsInBvcnQyIiwic3NsT3B0aW9ucyIsImRldmVsb3BtZW50TW9kZSIsIlByb21pc2UiLCJhbGwiLCJ0ZXN0Y2FmZSIsIlRlc3RDYWZlIiwiY2xvc2UiLCJ0aGVuIiwiY2IiLCJjcmVhdGVUZXN0Q2FmZSIsImVtYmVkZGluZ1V0aWxzIiwiZXhwb3J0YWJsZUxpYiIsImZvckVhY2giLCJrZXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVVBOzsrQ0FDQSxXQUFpQ0EsUUFBakMsRUFBMkM7QUFDdkMsWUFBSUEsUUFBSixFQUFjO0FBQ1YsZ0JBQUlDLFFBQVEsTUFBTUMsY0FBY0MsWUFBZCxDQUEyQkgsUUFBM0IsQ0FBbEI7O0FBRUEsZ0JBQUksQ0FBQ0MsS0FBTCxFQUNJLE1BQU0sSUFBSUcscUJBQUosQ0FBaUJDLGtCQUFRQyxlQUF6QixFQUEwQ04sUUFBMUMsQ0FBTjtBQUNQLFNBTEQsTUFPSUEsV0FBV0UsY0FBY0ssWUFBZCxFQUFYOztBQUVKLGVBQU9QLFFBQVA7QUFDSCxLOztvQkFYY1EsZ0I7Ozs7OztnREFhZixXQUE2QkMsSUFBN0IsRUFBbUM7QUFDL0IsWUFBSUEsSUFBSixFQUFVO0FBQ04sZ0JBQUlDLFNBQVMsTUFBTVIsY0FBY1MsVUFBZCxDQUF5QkYsSUFBekIsQ0FBbkI7O0FBRUEsZ0JBQUksQ0FBQ0MsTUFBTCxFQUNJLE1BQU0sSUFBSU4scUJBQUosQ0FBaUJDLGtCQUFRTyxhQUF6QixFQUF3Q0gsSUFBeEMsQ0FBTjtBQUNQLFNBTEQsTUFPSUEsT0FBTyxNQUFNUCxjQUFjVyxXQUFkLEVBQWI7O0FBRUosZUFBT0osSUFBUDtBQUNILEs7O29CQVhjSyxZOzs7OztBQWFmOzs7O2dEQUNBLFdBQStCZCxRQUEvQixFQUF5Q2UsS0FBekMsRUFBZ0RDLEtBQWhELEVBQXVEQyxVQUF2RCxFQUFtRUMsZUFBbkUsRUFBb0Y7QUFBQSxvQkFDckQsTUFBTUMsaUJBQVFDLEdBQVIsQ0FBWSxDQUN6Q1osaUJBQWlCUixRQUFqQixDQUR5QyxFQUV6Q2MsYUFBYUMsS0FBYixDQUZ5QyxFQUd6Q0QsYUFBYUUsS0FBYixDQUh5QyxDQUFaLENBRCtDOztBQUMvRWhCLGdCQUQrRTtBQUNyRWUsYUFEcUU7QUFDOURDLGFBRDhEOzs7QUFPaEYsY0FBTUssV0FBVyxJQUFJQyxrQkFBSixDQUFhdEIsUUFBYixFQUF1QmUsS0FBdkIsRUFBOEJDLEtBQTlCLEVBQXFDQyxVQUFyQyxFQUFpREMsZUFBakQsQ0FBakI7O0FBRUEscUNBQWM7QUFBQSxtQkFBTUcsU0FBU0UsS0FBVCxHQUFpQkMsSUFBakIsQ0FBc0JDLEVBQXRCLENBQU47QUFBQSxTQUFkOztBQUVBLGVBQU9KLFFBQVA7QUFDSCxLOztvQkFaY0ssYzs7Ozs7QUFjZjs7O0FBcERBOzs7O0FBQ0E7Ozs7QUFDQTs7SUFBWXhCLGE7O0FBQ1o7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0FBOENBd0IsZUFBZUMsY0FBZixHQUFnQ0Esd0JBQWhDOztBQUVBO0FBQ0Esb0JBQVlDLHVCQUFaLEVBQTJCQyxPQUEzQixDQUFtQ0MsT0FBTztBQUN0Q0osbUJBQWVJLEdBQWYsSUFBc0JGLHdCQUFjRSxHQUFkLENBQXRCO0FBQ0gsQ0FGRDs7a0JBSWVKLGMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IFRlc3RDYWZlIGZyb20gJy4vdGVzdGNhZmUnO1xuaW1wb3J0ICogYXMgZW5kcG9pbnRVdGlscyBmcm9tICdlbmRwb2ludC11dGlscyc7XG5pbXBvcnQgc2V0dXBFeGl0SG9vayBmcm9tICdhc3luYy1leGl0LWhvb2snO1xuaW1wb3J0IHsgR2VuZXJhbEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgTUVTU0FHRSBmcm9tICcuL2Vycm9ycy9ydW50aW1lL21lc3NhZ2UnO1xuaW1wb3J0IGVtYmVkZGluZ1V0aWxzIGZyb20gJy4vZW1iZWRkaW5nLXV0aWxzJztcbmltcG9ydCBleHBvcnRhYmxlTGliIGZyb20gJy4vYXBpL2V4cG9ydGFibGUtbGliJztcblxuXG4vLyBWYWxpZGF0aW9uc1xuYXN5bmMgZnVuY3Rpb24gZ2V0VmFsaWRIb3N0bmFtZSAoaG9zdG5hbWUpIHtcbiAgICBpZiAoaG9zdG5hbWUpIHtcbiAgICAgICAgdmFyIHZhbGlkID0gYXdhaXQgZW5kcG9pbnRVdGlscy5pc015SG9zdG5hbWUoaG9zdG5hbWUpO1xuXG4gICAgICAgIGlmICghdmFsaWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKE1FU1NBR0UuaW52YWxpZEhvc3RuYW1lLCBob3N0bmFtZSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgaG9zdG5hbWUgPSBlbmRwb2ludFV0aWxzLmdldElQQWRkcmVzcygpO1xuXG4gICAgcmV0dXJuIGhvc3RuYW1lO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRWYWxpZFBvcnQgKHBvcnQpIHtcbiAgICBpZiAocG9ydCkge1xuICAgICAgICB2YXIgaXNGcmVlID0gYXdhaXQgZW5kcG9pbnRVdGlscy5pc0ZyZWVQb3J0KHBvcnQpO1xuXG4gICAgICAgIGlmICghaXNGcmVlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihNRVNTQUdFLnBvcnRJc05vdEZyZWUsIHBvcnQpO1xuICAgIH1cbiAgICBlbHNlXG4gICAgICAgIHBvcnQgPSBhd2FpdCBlbmRwb2ludFV0aWxzLmdldEZyZWVQb3J0KCk7XG5cbiAgICByZXR1cm4gcG9ydDtcbn1cblxuLy8gQVBJXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0Q2FmZSAoaG9zdG5hbWUsIHBvcnQxLCBwb3J0Miwgc3NsT3B0aW9ucywgZGV2ZWxvcG1lbnRNb2RlKSB7XG4gICAgW2hvc3RuYW1lLCBwb3J0MSwgcG9ydDJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRWYWxpZEhvc3RuYW1lKGhvc3RuYW1lKSxcbiAgICAgICAgZ2V0VmFsaWRQb3J0KHBvcnQxKSxcbiAgICAgICAgZ2V0VmFsaWRQb3J0KHBvcnQyKVxuICAgIF0pO1xuXG4gICAgY29uc3QgdGVzdGNhZmUgPSBuZXcgVGVzdENhZmUoaG9zdG5hbWUsIHBvcnQxLCBwb3J0Miwgc3NsT3B0aW9ucywgZGV2ZWxvcG1lbnRNb2RlKTtcblxuICAgIHNldHVwRXhpdEhvb2soY2IgPT4gdGVzdGNhZmUuY2xvc2UoKS50aGVuKGNiKSk7XG5cbiAgICByZXR1cm4gdGVzdGNhZmU7XG59XG5cbi8vIEVtYmVkZGluZyB1dGlsc1xuY3JlYXRlVGVzdENhZmUuZW1iZWRkaW5nVXRpbHMgPSBlbWJlZGRpbmdVdGlscztcblxuLy8gQ29tbW9uIEFQSVxuT2JqZWN0LmtleXMoZXhwb3J0YWJsZUxpYikuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNyZWF0ZVRlc3RDYWZlW2tleV0gPSBleHBvcnRhYmxlTGliW2tleV07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGVzdENhZmU7XG4iXX0=
