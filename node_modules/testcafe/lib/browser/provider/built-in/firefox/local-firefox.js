'use strict';

exports.__esModule = true;
exports.stop = exports.start = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

let start = exports.start = (() => {
    var _ref = (0, _asyncToGenerator3.default)(function* (pageUrl, runtimeInfo) {
        const browserName = runtimeInfo.browserName,
              config = runtimeInfo.config;


        const firefoxInfo = yield _testcafeBrowserTools2.default.getBrowserInfo(config.path || browserName);
        const firefoxOpenParameters = (0, _assign2.default)({}, firefoxInfo);

        if (_osFamily2.default.mac && !config.userProfile) correctOpenParametersForMac(firefoxOpenParameters);

        firefoxOpenParameters.cmd = buildFirefoxArgs(config, firefoxOpenParameters.cmd, runtimeInfo, runtimeInfo.newInstance);

        yield browserStarter.startBrowser(firefoxOpenParameters, pageUrl);
    });

    return function start(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();

let stop = exports.stop = (() => {
    var _ref2 = (0, _asyncToGenerator3.default)(function* ({ browserId }) {
        yield (0, _killBrowserProcess2.default)(browserId);
    });

    return function stop(_x3) {
        return _ref2.apply(this, arguments);
    };
})();

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _testcafeBrowserTools = require('testcafe-browser-tools');

var _testcafeBrowserTools2 = _interopRequireDefault(_testcafeBrowserTools);

var _killBrowserProcess = require('../../../../utils/kill-browser-process');

var _killBrowserProcess2 = _interopRequireDefault(_killBrowserProcess);

var _browserStarter = require('../../utils/browser-starter');

var _browserStarter2 = _interopRequireDefault(_browserStarter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const browserStarter = new _browserStarter2.default();

function correctOpenParametersForMac(parameters) {
    parameters.macOpenCmdTemplate = parameters.macOpenCmdTemplate.replace('open', 'open -n').replace(' {{{pageUrl}}}', '');

    parameters.macOpenCmdTemplate += ' {{{pageUrl}}}';
}

function buildFirefoxArgs(config, platformArgs, { marionettePort, tempProfileDir }) {
    return [].concat(marionettePort ? ['-marionette'] : [], !config.userProfile ? ['-no-remote', '-new-instance', `-profile "${tempProfileDir.path}"`] : [], config.headless ? ['-headless'] : [], config.userArgs ? [config.userArgs] : [], platformArgs ? [platformArgs] : []).join(' ');
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3Byb3ZpZGVyL2J1aWx0LWluL2ZpcmVmb3gvbG9jYWwtZmlyZWZveC5qcyJdLCJuYW1lcyI6WyJwYWdlVXJsIiwicnVudGltZUluZm8iLCJicm93c2VyTmFtZSIsImNvbmZpZyIsImZpcmVmb3hJbmZvIiwiYnJvd3NlclRvb2xzIiwiZ2V0QnJvd3NlckluZm8iLCJwYXRoIiwiZmlyZWZveE9wZW5QYXJhbWV0ZXJzIiwiT1MiLCJtYWMiLCJ1c2VyUHJvZmlsZSIsImNvcnJlY3RPcGVuUGFyYW1ldGVyc0Zvck1hYyIsImNtZCIsImJ1aWxkRmlyZWZveEFyZ3MiLCJuZXdJbnN0YW5jZSIsImJyb3dzZXJTdGFydGVyIiwic3RhcnRCcm93c2VyIiwic3RhcnQiLCJicm93c2VySWQiLCJzdG9wIiwiQnJvd3NlclN0YXJ0ZXIiLCJwYXJhbWV0ZXJzIiwibWFjT3BlbkNtZFRlbXBsYXRlIiwicmVwbGFjZSIsInBsYXRmb3JtQXJncyIsIm1hcmlvbmV0dGVQb3J0IiwidGVtcFByb2ZpbGVEaXIiLCJjb25jYXQiLCJoZWFkbGVzcyIsInVzZXJBcmdzIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7K0NBNEJPLFdBQXNCQSxPQUF0QixFQUErQkMsV0FBL0IsRUFBNEM7QUFBQSxjQUN2Q0MsV0FEdUMsR0FDZkQsV0FEZSxDQUN2Q0MsV0FEdUM7QUFBQSxjQUMxQkMsTUFEMEIsR0FDZkYsV0FEZSxDQUMxQkUsTUFEMEI7OztBQUcvQyxjQUFNQyxjQUF3QixNQUFNQywrQkFBYUMsY0FBYixDQUE0QkgsT0FBT0ksSUFBUCxJQUFlTCxXQUEzQyxDQUFwQztBQUNBLGNBQU1NLHdCQUF3QixzQkFBYyxFQUFkLEVBQWtCSixXQUFsQixDQUE5Qjs7QUFFQSxZQUFJSyxtQkFBR0MsR0FBSCxJQUFVLENBQUNQLE9BQU9RLFdBQXRCLEVBQ0lDLDRCQUE0QkoscUJBQTVCOztBQUVKQSw4QkFBc0JLLEdBQXRCLEdBQTRCQyxpQkFBaUJYLE1BQWpCLEVBQXlCSyxzQkFBc0JLLEdBQS9DLEVBQW9EWixXQUFwRCxFQUFpRUEsWUFBWWMsV0FBN0UsQ0FBNUI7O0FBRUEsY0FBTUMsZUFBZUMsWUFBZixDQUE0QlQscUJBQTVCLEVBQW1EUixPQUFuRCxDQUFOO0FBQ0gsSzs7b0JBWnFCa0IsSzs7Ozs7O2dEQWNmLFdBQXFCLEVBQUVDLFNBQUYsRUFBckIsRUFBb0M7QUFDdkMsY0FBTSxrQ0FBbUJBLFNBQW5CLENBQU47QUFDSCxLOztvQkFGcUJDLEk7Ozs7O0FBMUN0Qjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBR0EsTUFBTUosaUJBQWlCLElBQUlLLHdCQUFKLEVBQXZCOztBQUVBLFNBQVNULDJCQUFULENBQXNDVSxVQUF0QyxFQUFrRDtBQUM5Q0EsZUFBV0Msa0JBQVgsR0FBZ0NELFdBQVdDLGtCQUFYLENBQzNCQyxPQUQyQixDQUNuQixNQURtQixFQUNYLFNBRFcsRUFFM0JBLE9BRjJCLENBRW5CLGdCQUZtQixFQUVELEVBRkMsQ0FBaEM7O0FBSUFGLGVBQVdDLGtCQUFYLElBQWlDLGdCQUFqQztBQUNIOztBQUVELFNBQVNULGdCQUFULENBQTJCWCxNQUEzQixFQUFtQ3NCLFlBQW5DLEVBQWlELEVBQUVDLGNBQUYsRUFBa0JDLGNBQWxCLEVBQWpELEVBQXFGO0FBQ2pGLFdBQU8sR0FDRkMsTUFERSxDQUVDRixpQkFBaUIsQ0FBQyxhQUFELENBQWpCLEdBQW1DLEVBRnBDLEVBR0MsQ0FBQ3ZCLE9BQU9RLFdBQVIsR0FBc0IsQ0FBQyxZQUFELEVBQWUsZUFBZixFQUFpQyxhQUFZZ0IsZUFBZXBCLElBQUssR0FBakUsQ0FBdEIsR0FBNkYsRUFIOUYsRUFJQ0osT0FBTzBCLFFBQVAsR0FBa0IsQ0FBQyxXQUFELENBQWxCLEdBQWtDLEVBSm5DLEVBS0MxQixPQUFPMkIsUUFBUCxHQUFrQixDQUFDM0IsT0FBTzJCLFFBQVIsQ0FBbEIsR0FBc0MsRUFMdkMsRUFNQ0wsZUFBZSxDQUFDQSxZQUFELENBQWYsR0FBZ0MsRUFOakMsRUFRRk0sSUFSRSxDQVFHLEdBUkgsQ0FBUDtBQVNIIiwiZmlsZSI6ImJyb3dzZXIvcHJvdmlkZXIvYnVpbHQtaW4vZmlyZWZveC9sb2NhbC1maXJlZm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgYnJvd3NlclRvb2xzIGZyb20gJ3Rlc3RjYWZlLWJyb3dzZXItdG9vbHMnO1xuaW1wb3J0IGtpbGxCcm93c2VyUHJvY2VzcyBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9raWxsLWJyb3dzZXItcHJvY2Vzcyc7XG5pbXBvcnQgQnJvd3NlclN0YXJ0ZXIgZnJvbSAnLi4vLi4vdXRpbHMvYnJvd3Nlci1zdGFydGVyJztcblxuXG5jb25zdCBicm93c2VyU3RhcnRlciA9IG5ldyBCcm93c2VyU3RhcnRlcigpO1xuXG5mdW5jdGlvbiBjb3JyZWN0T3BlblBhcmFtZXRlcnNGb3JNYWMgKHBhcmFtZXRlcnMpIHtcbiAgICBwYXJhbWV0ZXJzLm1hY09wZW5DbWRUZW1wbGF0ZSA9IHBhcmFtZXRlcnMubWFjT3BlbkNtZFRlbXBsYXRlXG4gICAgICAgIC5yZXBsYWNlKCdvcGVuJywgJ29wZW4gLW4nKVxuICAgICAgICAucmVwbGFjZSgnIHt7e3BhZ2VVcmx9fX0nLCAnJyk7XG5cbiAgICBwYXJhbWV0ZXJzLm1hY09wZW5DbWRUZW1wbGF0ZSArPSAnIHt7e3BhZ2VVcmx9fX0nO1xufVxuXG5mdW5jdGlvbiBidWlsZEZpcmVmb3hBcmdzIChjb25maWcsIHBsYXRmb3JtQXJncywgeyBtYXJpb25ldHRlUG9ydCwgdGVtcFByb2ZpbGVEaXIgfSkge1xuICAgIHJldHVybiBbXVxuICAgICAgICAuY29uY2F0KFxuICAgICAgICAgICAgbWFyaW9uZXR0ZVBvcnQgPyBbJy1tYXJpb25ldHRlJ10gOiBbXSxcbiAgICAgICAgICAgICFjb25maWcudXNlclByb2ZpbGUgPyBbJy1uby1yZW1vdGUnLCAnLW5ldy1pbnN0YW5jZScsIGAtcHJvZmlsZSBcIiR7dGVtcFByb2ZpbGVEaXIucGF0aH1cImBdIDogW10sXG4gICAgICAgICAgICBjb25maWcuaGVhZGxlc3MgPyBbJy1oZWFkbGVzcyddIDogW10sXG4gICAgICAgICAgICBjb25maWcudXNlckFyZ3MgPyBbY29uZmlnLnVzZXJBcmdzXSA6IFtdLFxuICAgICAgICAgICAgcGxhdGZvcm1BcmdzID8gW3BsYXRmb3JtQXJnc10gOiBbXVxuICAgICAgICApXG4gICAgICAgIC5qb2luKCcgJyk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGFydCAocGFnZVVybCwgcnVudGltZUluZm8pIHtcbiAgICBjb25zdCB7IGJyb3dzZXJOYW1lLCBjb25maWcgfSA9IHJ1bnRpbWVJbmZvO1xuXG4gICAgY29uc3QgZmlyZWZveEluZm8gICAgICAgICAgID0gYXdhaXQgYnJvd3NlclRvb2xzLmdldEJyb3dzZXJJbmZvKGNvbmZpZy5wYXRoIHx8IGJyb3dzZXJOYW1lKTtcbiAgICBjb25zdCBmaXJlZm94T3BlblBhcmFtZXRlcnMgPSBPYmplY3QuYXNzaWduKHt9LCBmaXJlZm94SW5mbyk7XG5cbiAgICBpZiAoT1MubWFjICYmICFjb25maWcudXNlclByb2ZpbGUpXG4gICAgICAgIGNvcnJlY3RPcGVuUGFyYW1ldGVyc0Zvck1hYyhmaXJlZm94T3BlblBhcmFtZXRlcnMpO1xuXG4gICAgZmlyZWZveE9wZW5QYXJhbWV0ZXJzLmNtZCA9IGJ1aWxkRmlyZWZveEFyZ3MoY29uZmlnLCBmaXJlZm94T3BlblBhcmFtZXRlcnMuY21kLCBydW50aW1lSW5mbywgcnVudGltZUluZm8ubmV3SW5zdGFuY2UpO1xuXG4gICAgYXdhaXQgYnJvd3NlclN0YXJ0ZXIuc3RhcnRCcm93c2VyKGZpcmVmb3hPcGVuUGFyYW1ldGVycywgcGFnZVVybCk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdG9wICh7IGJyb3dzZXJJZCB9KSB7XG4gICAgYXdhaXQga2lsbEJyb3dzZXJQcm9jZXNzKGJyb3dzZXJJZCk7XG59XG4iXX0=
