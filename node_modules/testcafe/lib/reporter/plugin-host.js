'use strict';

exports.__esModule = true;

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _indentString = require('indent-string');

var _indentString2 = _interopRequireDefault(_indentString);

var _lodash = require('lodash');

var _momentLoader = require('../utils/moment-loader');

var _momentLoader2 = _interopRequireDefault(_momentLoader);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _string = require('../utils/string');

var _getViewportWidth = require('../utils/get-viewport-width');

var _getViewportWidth2 = _interopRequireDefault(_getViewportWidth);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: we should not expose internal state to
// the plugin, to avoid accidental rewrites.
// Therefore we use symbols to store them.

/*global Symbol*/
var stream = (0, _symbol2.default)();
var wordWrapEnabled = (0, _symbol2.default)();
var indent = (0, _symbol2.default)();
var errorDecorator = (0, _symbol2.default)();

class ReporterPluginHost {
    constructor(plugin, outStream) {
        this[stream] = outStream || process.stdout;
        this[wordWrapEnabled] = false;
        this[indent] = 0;

        var useColors = this[stream] === process.stdout && _chalk2.default.enabled && !plugin.noColors;

        this.chalk = new _chalk2.default.constructor({ enabled: useColors });
        this.moment = _momentLoader2.default;
        this.viewportWidth = (0, _getViewportWidth2.default)(this[stream]);

        this.symbols = _osFamily2.default.win ? { ok: '√', err: '×' } : { ok: '✓', err: '✖' };

        (0, _lodash.assignIn)(this, plugin);

        this[errorDecorator] = this.createErrorDecorator();
    }

    // Error decorator
    createErrorDecorator() {
        return {
            'span user-agent': str => this.chalk.grey(str),

            'span subtitle': str => `- ${this.chalk.bold.red(str)} -`,
            'div message': str => this.chalk.bold.red(str),

            'div screenshot-info': _lodash.identity,
            'a screenshot-path': str => this.chalk.grey.underline(str),

            'code': _lodash.identity,

            'span syntax-string': str => this.chalk.green(str),
            'span syntax-punctuator': str => this.chalk.grey(str),
            'span syntax-keyword': str => this.chalk.cyan(str),
            'span syntax-number': str => this.chalk.magenta(str),
            'span syntax-regex': str => this.chalk.magenta(str),
            'span syntax-comment': str => this.chalk.grey.bold(str),
            'span syntax-invalid': str => this.chalk.inverse(str),

            'div code-frame': _lodash.identity,
            'div code-line': str => str + '\n',
            'div code-line-last': _lodash.identity,
            'div code-line-num': str => `   ${str} |`,
            'div code-line-num-base': str => this.chalk.bgRed(` > ${str} `) + '|',
            'div code-line-src': _lodash.identity,

            'div stack': str => '\n\n' + str,
            'div stack-line': str => str + '\n',
            'div stack-line-last': _lodash.identity,
            'div stack-line-name': str => `   at ${this.chalk.bold(str)}`,
            'div stack-line-location': str => ` (${this.chalk.grey.underline(str)})`,

            'strong': str => this.chalk.bold(str),
            'a': str => `"${this.chalk.underline(str)}"`
        };
    }

    // String helpers
    indentString(str, indentVal) {
        return (0, _indentString2.default)(str, ' ', indentVal);
    }

    wordWrap(str, indentVal, width) {
        return (0, _string.wordWrap)(str, indentVal, width);
    }

    escapeHtml(str) {
        return (0, _lodash.escape)(str);
    }

    formatError(err, prefix = '') {
        var prefixLengthWithoutColors = (0, _string.removeTTYColors)(prefix).length;
        var maxMsgLength = this.viewportWidth - this[indent] - prefixLengthWithoutColors;
        var msg = err.formatMessage(this[errorDecorator], maxMsgLength);

        if (this[wordWrapEnabled]) msg = this.wordWrap(msg, prefixLengthWithoutColors, maxMsgLength);else msg = this.indentString(msg, prefixLengthWithoutColors);

        return prefix + msg.substr(prefixLengthWithoutColors);
    }

    // Writing helpers
    newline() {
        this[stream].write('\n');

        return this;
    }

    write(text) {
        if (this[wordWrapEnabled]) text = this.wordWrap(text, this[indent], this.viewportWidth);else text = this.indentString(text, this[indent]);

        this[stream].write(text);

        return this;
    }

    useWordWrap(use) {
        this[wordWrapEnabled] = use;

        return this;
    }

    setIndent(val) {
        this[indent] = val;

        return this;
    }

    // Abstract methods implemented in plugin
    reportTaskStart() /* startTime, userAgents, testCount */{
        throw new Error('Not implemented');
    }

    reportFixtureStart() /* name, path */{
        throw new Error('Not implemented');
    }

    reportTestDone() /* name, testRunInfo */{
        throw new Error('Not implemented');
    }

    reportTaskDone() /* endTime, passed, warnings */{
        throw new Error('Not implemented');
    }
}
exports.default = ReporterPluginHost;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
