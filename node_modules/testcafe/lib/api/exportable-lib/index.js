'use strict';

exports.__esModule = true;

var _clientFunctionBuilder = require('../../client-functions/client-function-builder');

var _clientFunctionBuilder2 = _interopRequireDefault(_clientFunctionBuilder);

var _selectorBuilder = require('../../client-functions/selectors/selector-builder');

var _selectorBuilder2 = _interopRequireDefault(_selectorBuilder);

var _role = require('../../role');

var _proxy = require('../test-controller/proxy');

var _proxy2 = _interopRequireDefault(_proxy);

var _requestLogger = require('../request-hooks/request-logger');

var _requestLogger2 = _interopRequireDefault(_requestLogger);

var _requestMock = require('../request-hooks/request-mock');

var _requestMock2 = _interopRequireDefault(_requestMock);

var _hook = require('../request-hooks/hook');

var _hook2 = _interopRequireDefault(_hook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Role(loginPage, initFn, options) {
    return (0, _role.createRole)(loginPage, initFn, options);
}

function RequestMock() {
    return (0, _requestMock2.default)();
}

function RequestLogger(requestFilterRuleInit, logOptions) {
    return (0, _requestLogger2.default)(requestFilterRuleInit, logOptions);
}

function ClientFunction(fn, options) {
    const builder = new _clientFunctionBuilder2.default(fn, options, { instantiation: 'ClientFunction' });

    return builder.getFunction();
}

function Selector(fn, options) {
    const builder = new _selectorBuilder2.default(fn, options, { instantiation: 'Selector' });

    return builder.getFunction();
}

Role.anonymous = _role.createAnonymousRole;

exports.default = {
    Role,

    ClientFunction,

    Selector,

    RequestLogger,

    RequestMock,

    RequestHook: _hook2.default,

    t: _proxy2.default
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvZXhwb3J0YWJsZS1saWIvaW5kZXguanMiXSwibmFtZXMiOlsiUm9sZSIsImxvZ2luUGFnZSIsImluaXRGbiIsIm9wdGlvbnMiLCJSZXF1ZXN0TW9jayIsIlJlcXVlc3RMb2dnZXIiLCJyZXF1ZXN0RmlsdGVyUnVsZUluaXQiLCJsb2dPcHRpb25zIiwiQ2xpZW50RnVuY3Rpb24iLCJmbiIsImJ1aWxkZXIiLCJDbGllbnRGdW5jdGlvbkJ1aWxkZXIiLCJpbnN0YW50aWF0aW9uIiwiZ2V0RnVuY3Rpb24iLCJTZWxlY3RvciIsIlNlbGVjdG9yQnVpbGRlciIsImFub255bW91cyIsImNyZWF0ZUFub255bW91c1JvbGUiLCJSZXF1ZXN0SG9vayIsInQiLCJ0ZXN0Q29udHJvbGxlclByb3h5Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxTQUFTQSxJQUFULENBQWVDLFNBQWYsRUFBMEJDLE1BQTFCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUN2QyxXQUFPLHNCQUFXRixTQUFYLEVBQXNCQyxNQUF0QixFQUE4QkMsT0FBOUIsQ0FBUDtBQUNIOztBQUVELFNBQVNDLFdBQVQsR0FBd0I7QUFDcEIsV0FBTyw0QkFBUDtBQUNIOztBQUVELFNBQVNDLGFBQVQsQ0FBd0JDLHFCQUF4QixFQUErQ0MsVUFBL0MsRUFBMkQ7QUFDdkQsV0FBTyw2QkFBb0JELHFCQUFwQixFQUEyQ0MsVUFBM0MsQ0FBUDtBQUNIOztBQUVELFNBQVNDLGNBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCTixPQUE3QixFQUFzQztBQUNsQyxVQUFNTyxVQUFVLElBQUlDLCtCQUFKLENBQTBCRixFQUExQixFQUE4Qk4sT0FBOUIsRUFBdUMsRUFBRVMsZUFBZSxnQkFBakIsRUFBdkMsQ0FBaEI7O0FBRUEsV0FBT0YsUUFBUUcsV0FBUixFQUFQO0FBQ0g7O0FBRUQsU0FBU0MsUUFBVCxDQUFtQkwsRUFBbkIsRUFBdUJOLE9BQXZCLEVBQWdDO0FBQzVCLFVBQU1PLFVBQVUsSUFBSUsseUJBQUosQ0FBb0JOLEVBQXBCLEVBQXdCTixPQUF4QixFQUFpQyxFQUFFUyxlQUFlLFVBQWpCLEVBQWpDLENBQWhCOztBQUVBLFdBQU9GLFFBQVFHLFdBQVIsRUFBUDtBQUNIOztBQUVEYixLQUFLZ0IsU0FBTCxHQUFpQkMseUJBQWpCOztrQkFFZTtBQUNYakIsUUFEVzs7QUFHWFEsa0JBSFc7O0FBS1hNLFlBTFc7O0FBT1hULGlCQVBXOztBQVNYRCxlQVRXOztBQVdYYywrQkFYVzs7QUFhWEMsT0FBR0M7QUFiUSxDIiwiZmlsZSI6ImFwaS9leHBvcnRhYmxlLWxpYi9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGllbnRGdW5jdGlvbkJ1aWxkZXIgZnJvbSAnLi4vLi4vY2xpZW50LWZ1bmN0aW9ucy9jbGllbnQtZnVuY3Rpb24tYnVpbGRlcic7XG5pbXBvcnQgU2VsZWN0b3JCdWlsZGVyIGZyb20gJy4uLy4uL2NsaWVudC1mdW5jdGlvbnMvc2VsZWN0b3JzL3NlbGVjdG9yLWJ1aWxkZXInO1xuaW1wb3J0IHsgY3JlYXRlUm9sZSwgY3JlYXRlQW5vbnltb3VzUm9sZSB9IGZyb20gJy4uLy4uL3JvbGUnO1xuaW1wb3J0IHRlc3RDb250cm9sbGVyUHJveHkgZnJvbSAnLi4vdGVzdC1jb250cm9sbGVyL3Byb3h5JztcbmltcG9ydCBjcmVhdGVSZXF1ZXN0TG9nZ2VyIGZyb20gJy4uL3JlcXVlc3QtaG9va3MvcmVxdWVzdC1sb2dnZXInO1xuaW1wb3J0IGNyZWF0ZVJlcXVlc3RNb2NrIGZyb20gJy4uL3JlcXVlc3QtaG9va3MvcmVxdWVzdC1tb2NrJztcbmltcG9ydCBSZXF1ZXN0SG9vayBmcm9tICcuLi9yZXF1ZXN0LWhvb2tzL2hvb2snO1xuXG5mdW5jdGlvbiBSb2xlIChsb2dpblBhZ2UsIGluaXRGbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBjcmVhdGVSb2xlKGxvZ2luUGFnZSwgaW5pdEZuLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gUmVxdWVzdE1vY2sgKCkge1xuICAgIHJldHVybiBjcmVhdGVSZXF1ZXN0TW9jaygpO1xufVxuXG5mdW5jdGlvbiBSZXF1ZXN0TG9nZ2VyIChyZXF1ZXN0RmlsdGVyUnVsZUluaXQsIGxvZ09wdGlvbnMpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVxdWVzdExvZ2dlcihyZXF1ZXN0RmlsdGVyUnVsZUluaXQsIGxvZ09wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBDbGllbnRGdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBidWlsZGVyID0gbmV3IENsaWVudEZ1bmN0aW9uQnVpbGRlcihmbiwgb3B0aW9ucywgeyBpbnN0YW50aWF0aW9uOiAnQ2xpZW50RnVuY3Rpb24nIH0pO1xuXG4gICAgcmV0dXJuIGJ1aWxkZXIuZ2V0RnVuY3Rpb24oKTtcbn1cblxuZnVuY3Rpb24gU2VsZWN0b3IgKGZuLCBvcHRpb25zKSB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBTZWxlY3RvckJ1aWxkZXIoZm4sIG9wdGlvbnMsIHsgaW5zdGFudGlhdGlvbjogJ1NlbGVjdG9yJyB9KTtcblxuICAgIHJldHVybiBidWlsZGVyLmdldEZ1bmN0aW9uKCk7XG59XG5cblJvbGUuYW5vbnltb3VzID0gY3JlYXRlQW5vbnltb3VzUm9sZTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIFJvbGUsXG5cbiAgICBDbGllbnRGdW5jdGlvbixcblxuICAgIFNlbGVjdG9yLFxuXG4gICAgUmVxdWVzdExvZ2dlcixcblxuICAgIFJlcXVlc3RNb2NrLFxuXG4gICAgUmVxdWVzdEhvb2ssXG5cbiAgICB0OiB0ZXN0Q29udHJvbGxlclByb3h5XG59O1xuIl19
