'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _promisifyEvent = require('promisify-event');

var _promisifyEvent2 = _interopRequireDefault(_promisifyEvent);

var _browserJobResult = require('../../runner/browser-job-result');

var _browserJobResult2 = _interopRequireDefault(_browserJobResult);

var _connection = require('../connection');

var _connection2 = _interopRequireDefault(_connection);

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global Symbol */
const name = (0, _symbol2.default)();

class BrowserProviderPluginHost {
    constructor(providerObject, providerName) {
        this.JOB_RESULT = (0, _lodash.assignIn)({}, _browserJobResult2.default);

        (0, _lodash.assignIn)(this, providerObject);

        this[name] = providerName;
    }

    // Helpers
    get providerName() {
        return this[name];
    }

    runInitScript(browserId, code) {
        var connection = _connection2.default.getById(browserId);

        return connection.runInitScript(`(${code})()`);
    }

    waitForConnectionReady(browserId) {
        var connection = _connection2.default.getById(browserId);

        if (connection.ready) return _pinkie2.default.resolve();

        return (0, _promisifyEvent2.default)(connection, 'ready');
    }

    reportWarning(browserId, ...args) {
        var connection = _connection2.default.getById(browserId);

        connection.addWarning(...args);
    }

    setUserAgentMetaInfo(browserId, message) {
        var connection = _connection2.default.getById(browserId);

        connection.setProviderMetaInfo(message);
    }

    closeLocalBrowser(browserId) {
        return (0, _asyncToGenerator3.default)(function* () {
            var connection = _connection2.default.getById(browserId);

            yield connection.provider._ensureBrowserWindowDescriptor(browserId);
            yield connection.provider._closeLocalBrowser(browserId);
        })();
    }

    resizeLocalBrowserWindow(browserId, width, height, currentWidth, currentHeight) {
        return (0, _asyncToGenerator3.default)(function* () {
            var connection = _connection2.default.getById(browserId);

            yield connection.provider._ensureBrowserWindowParameters(browserId);
            yield connection.provider._resizeLocalBrowserWindow(browserId, width, height, currentWidth, currentHeight);
        })();
    }

    // API
    // Browser control
    openBrowser() /* browserId, pageUrl, browserName */{
        return (0, _asyncToGenerator3.default)(function* () {
            throw new Error('Not implemented!');
        })();
    }

    closeBrowser() /* browserId */{
        return (0, _asyncToGenerator3.default)(function* () {
            throw new Error('Not implemented!');
        })();
    }

    // Initialization
    init() {
        return (0, _asyncToGenerator3.default)(function* () {
            return;
        })();
    }

    dispose() {
        return (0, _asyncToGenerator3.default)(function* () {
            return;
        })();
    }

    // Browser names handling
    getBrowserList() {
        return (0, _asyncToGenerator3.default)(function* () {
            throw new Error('Not implemented!');
        })();
    }

    isValidBrowserName() /* browserName */{
        return (0, _asyncToGenerator3.default)(function* () {
            return true;
        })();
    }

    // Extra functions
    isLocalBrowser() /* browserId, browserName */{
        return (0, _asyncToGenerator3.default)(function* () {
            return false;
        })();
    }

    hasCustomActionForBrowser() /* browserId */{
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            return {
                hasCloseBrowser: _this.hasOwnProperty('closeBrowser'),
                hasResizeWindow: _this.hasOwnProperty('resizeWindow'),
                hasTakeScreenshot: _this.hasOwnProperty('takeScreenshot'),
                hasCanResizeWindowToDimensions: _this.hasOwnProperty('canResizeWindowToDimensions'),
                hasMaximizeWindow: _this.hasOwnProperty('maximizeWindow'),
                hasChromelessScreenshots: false
            };
        })();
    }

    resizeWindow(browserId /*, width, height, currentWidth, currentHeight */) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this2.reportWarning(browserId, _warningMessage2.default.resizeNotSupportedByBrowserProvider, _this2[name]);
        })();
    }

    canResizeWindowToDimensions() /* browserId, width, height */{
        return (0, _asyncToGenerator3.default)(function* () {
            return true;
        })();
    }

    takeScreenshot(browserId /*, screenshotPath, pageWidth, pageHeight */) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this3.reportWarning(browserId, _warningMessage2.default.screenshotNotSupportedByBrowserProvider, _this3[name]);
        })();
    }

    maximizeWindow(browserId) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            _this4.reportWarning(browserId, _warningMessage2.default.maximizeNotSupportedByBrowserProvider, _this4[name]);
        })();
    }

    reportJobResult() /*browserId, status, data*/{
        return (0, _asyncToGenerator3.default)(function* () {
            return;
        })();
    }
}
exports.default = BrowserProviderPluginHost;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
