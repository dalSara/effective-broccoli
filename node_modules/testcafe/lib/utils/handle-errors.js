'use strict';

exports.__esModule = true;

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

exports.registerErrorHandlers = registerErrorHandlers;
exports.addRunningTest = addRunningTest;
exports.removeRunningTest = removeRunningTest;
exports.startHandlingTestErrors = startHandlingTestErrors;
exports.stopHandlingTestErrors = stopHandlingTestErrors;

var _testRun = require('../errors/test-run');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const runningTests = {};
let handlingTestErrors = false;

function handleError(ErrorCtor, message) {
    if (handlingTestErrors) {
        (0, _values2.default)(runningTests).forEach(testRun => {
            testRun.addError(new ErrorCtor(message));

            removeRunningTest(testRun);
        });
    } else {
        /* eslint-disable no-process-exit */
        /* eslint-disable no-console */
        console.log(message);

        setTimeout(() => process.exit(1), 0);
        /* eslint-enable no-process-exit */
        /* eslint-enable no-console */
    }
}

function formatUnhandledRejectionReason(reason) {
    const reasonType = typeof reason;
    const isPrimitiveType = reasonType !== 'object' && reasonType !== 'function';

    if (isPrimitiveType) return String(reason);

    if (reason instanceof Error) return reason.stack;

    return Object.prototype.toString.call(reason);
}

function onUnhandledRejection(reason) {
    if (reason && reason.isRejectedDriverTask) return;

    const message = formatUnhandledRejectionReason(reason);

    handleError(_testRun.UnhandledPromiseRejectionError, message);
}

function onUncaughtException(err) {
    handleError(_testRun.UncaughtExceptionError, err.stack);
}

function registerErrorHandlers() {
    process.on('unhandledRejection', onUnhandledRejection);
    process.on('uncaughtException', onUncaughtException);
}

function addRunningTest(testRun) {
    runningTests[testRun.id] = testRun;
}

function removeRunningTest(testRun) {
    delete runningTests[testRun.id];
}

function startHandlingTestErrors() {
    handlingTestErrors = true;
}

function stopHandlingTestErrors() {
    handlingTestErrors = false;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oYW5kbGUtZXJyb3JzLmpzIl0sIm5hbWVzIjpbInJlZ2lzdGVyRXJyb3JIYW5kbGVycyIsImFkZFJ1bm5pbmdUZXN0IiwicmVtb3ZlUnVubmluZ1Rlc3QiLCJzdGFydEhhbmRsaW5nVGVzdEVycm9ycyIsInN0b3BIYW5kbGluZ1Rlc3RFcnJvcnMiLCJydW5uaW5nVGVzdHMiLCJoYW5kbGluZ1Rlc3RFcnJvcnMiLCJoYW5kbGVFcnJvciIsIkVycm9yQ3RvciIsIm1lc3NhZ2UiLCJmb3JFYWNoIiwidGVzdFJ1biIsImFkZEVycm9yIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJwcm9jZXNzIiwiZXhpdCIsImZvcm1hdFVuaGFuZGxlZFJlamVjdGlvblJlYXNvbiIsInJlYXNvbiIsInJlYXNvblR5cGUiLCJpc1ByaW1pdGl2ZVR5cGUiLCJTdHJpbmciLCJFcnJvciIsInN0YWNrIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwib25VbmhhbmRsZWRSZWplY3Rpb24iLCJpc1JlamVjdGVkRHJpdmVyVGFzayIsIlVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25FcnJvciIsIm9uVW5jYXVnaHRFeGNlcHRpb24iLCJlcnIiLCJVbmNhdWdodEV4Y2VwdGlvbkVycm9yIiwib24iLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7UUFrRGdCQSxxQixHQUFBQSxxQjtRQUtBQyxjLEdBQUFBLGM7UUFJQUMsaUIsR0FBQUEsaUI7UUFJQUMsdUIsR0FBQUEsdUI7UUFJQUMsc0IsR0FBQUEsc0I7O0FBbkVoQjs7OztBQUVBLE1BQU1DLGVBQW1CLEVBQXpCO0FBQ0EsSUFBSUMscUJBQXFCLEtBQXpCOztBQUVBLFNBQVNDLFdBQVQsQ0FBc0JDLFNBQXRCLEVBQWlDQyxPQUFqQyxFQUEwQztBQUN0QyxRQUFJSCxrQkFBSixFQUF3QjtBQUNwQiw4QkFBY0QsWUFBZCxFQUE0QkssT0FBNUIsQ0FBb0NDLFdBQVc7QUFDM0NBLG9CQUFRQyxRQUFSLENBQWlCLElBQUlKLFNBQUosQ0FBY0MsT0FBZCxDQUFqQjs7QUFFQVAsOEJBQWtCUyxPQUFsQjtBQUNILFNBSkQ7QUFLSCxLQU5ELE1BT0s7QUFDRDtBQUNBO0FBQ0FFLGdCQUFRQyxHQUFSLENBQVlMLE9BQVo7O0FBRUFNLG1CQUFXLE1BQU1DLFFBQVFDLElBQVIsQ0FBYSxDQUFiLENBQWpCLEVBQWtDLENBQWxDO0FBQ0E7QUFDQTtBQUNIO0FBQ0o7O0FBRUQsU0FBU0MsOEJBQVQsQ0FBeUNDLE1BQXpDLEVBQWlEO0FBQzdDLFVBQU1DLGFBQWtCLE9BQU9ELE1BQS9CO0FBQ0EsVUFBTUUsa0JBQWtCRCxlQUFlLFFBQWYsSUFBMkJBLGVBQWUsVUFBbEU7O0FBRUEsUUFBSUMsZUFBSixFQUNJLE9BQU9DLE9BQU9ILE1BQVAsQ0FBUDs7QUFFSixRQUFJQSxrQkFBa0JJLEtBQXRCLEVBQ0ksT0FBT0osT0FBT0ssS0FBZDs7QUFFSixXQUFPQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JULE1BQS9CLENBQVA7QUFDSDs7QUFFRCxTQUFTVSxvQkFBVCxDQUErQlYsTUFBL0IsRUFBdUM7QUFDbkMsUUFBSUEsVUFBVUEsT0FBT1csb0JBQXJCLEVBQ0k7O0FBRUosVUFBTXJCLFVBQVVTLCtCQUErQkMsTUFBL0IsQ0FBaEI7O0FBRUFaLGdCQUFZd0IsdUNBQVosRUFBNEN0QixPQUE1QztBQUNIOztBQUVELFNBQVN1QixtQkFBVCxDQUE4QkMsR0FBOUIsRUFBbUM7QUFDL0IxQixnQkFBWTJCLCtCQUFaLEVBQW9DRCxJQUFJVCxLQUF4QztBQUNIOztBQUVNLFNBQVN4QixxQkFBVCxHQUFrQztBQUNyQ2dCLFlBQVFtQixFQUFSLENBQVcsb0JBQVgsRUFBaUNOLG9CQUFqQztBQUNBYixZQUFRbUIsRUFBUixDQUFXLG1CQUFYLEVBQWdDSCxtQkFBaEM7QUFDSDs7QUFFTSxTQUFTL0IsY0FBVCxDQUF5QlUsT0FBekIsRUFBa0M7QUFDckNOLGlCQUFhTSxRQUFReUIsRUFBckIsSUFBMkJ6QixPQUEzQjtBQUNIOztBQUVNLFNBQVNULGlCQUFULENBQTRCUyxPQUE1QixFQUFxQztBQUN4QyxXQUFPTixhQUFhTSxRQUFReUIsRUFBckIsQ0FBUDtBQUNIOztBQUVNLFNBQVNqQyx1QkFBVCxHQUFvQztBQUN2Q0cseUJBQXFCLElBQXJCO0FBQ0g7O0FBRU0sU0FBU0Ysc0JBQVQsR0FBbUM7QUFDdENFLHlCQUFxQixLQUFyQjtBQUNIIiwiZmlsZSI6InV0aWxzL2hhbmRsZS1lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uRXJyb3IsIFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuXG5jb25zdCBydW5uaW5nVGVzdHMgICAgID0ge307XG5sZXQgaGFuZGxpbmdUZXN0RXJyb3JzID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChFcnJvckN0b3IsIG1lc3NhZ2UpIHtcbiAgICBpZiAoaGFuZGxpbmdUZXN0RXJyb3JzKSB7XG4gICAgICAgIE9iamVjdC52YWx1ZXMocnVubmluZ1Rlc3RzKS5mb3JFYWNoKHRlc3RSdW4gPT4ge1xuICAgICAgICAgICAgdGVzdFJ1bi5hZGRFcnJvcihuZXcgRXJyb3JDdG9yKG1lc3NhZ2UpKTtcblxuICAgICAgICAgICAgcmVtb3ZlUnVubmluZ1Rlc3QodGVzdFJ1bik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvY2Vzcy1leGl0ICovXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBwcm9jZXNzLmV4aXQoMSksIDApO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb2Nlc3MtZXhpdCAqL1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaGFuZGxlZFJlamVjdGlvblJlYXNvbiAocmVhc29uKSB7XG4gICAgY29uc3QgcmVhc29uVHlwZSAgICAgID0gdHlwZW9mIHJlYXNvbjtcbiAgICBjb25zdCBpc1ByaW1pdGl2ZVR5cGUgPSByZWFzb25UeXBlICE9PSAnb2JqZWN0JyAmJiByZWFzb25UeXBlICE9PSAnZnVuY3Rpb24nO1xuXG4gICAgaWYgKGlzUHJpbWl0aXZlVHlwZSlcbiAgICAgICAgcmV0dXJuIFN0cmluZyhyZWFzb24pO1xuXG4gICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yKVxuICAgICAgICByZXR1cm4gcmVhc29uLnN0YWNrO1xuXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBvblVuaGFuZGxlZFJlamVjdGlvbiAocmVhc29uKSB7XG4gICAgaWYgKHJlYXNvbiAmJiByZWFzb24uaXNSZWplY3RlZERyaXZlclRhc2spXG4gICAgICAgIHJldHVybjtcblxuICAgIGNvbnN0IG1lc3NhZ2UgPSBmb3JtYXRVbmhhbmRsZWRSZWplY3Rpb25SZWFzb24ocmVhc29uKTtcblxuICAgIGhhbmRsZUVycm9yKFVuaGFuZGxlZFByb21pc2VSZWplY3Rpb25FcnJvciwgbWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIG9uVW5jYXVnaHRFeGNlcHRpb24gKGVycikge1xuICAgIGhhbmRsZUVycm9yKFVuY2F1Z2h0RXhjZXB0aW9uRXJyb3IsIGVyci5zdGFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckVycm9ySGFuZGxlcnMgKCkge1xuICAgIHByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIG9uVW5oYW5kbGVkUmVqZWN0aW9uKTtcbiAgICBwcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIG9uVW5jYXVnaHRFeGNlcHRpb24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkUnVubmluZ1Rlc3QgKHRlc3RSdW4pIHtcbiAgICBydW5uaW5nVGVzdHNbdGVzdFJ1bi5pZF0gPSB0ZXN0UnVuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUnVubmluZ1Rlc3QgKHRlc3RSdW4pIHtcbiAgICBkZWxldGUgcnVubmluZ1Rlc3RzW3Rlc3RSdW4uaWRdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRIYW5kbGluZ1Rlc3RFcnJvcnMgKCkge1xuICAgIGhhbmRsaW5nVGVzdEVycm9ycyA9IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wSGFuZGxpbmdUZXN0RXJyb3JzICgpIHtcbiAgICBoYW5kbGluZ1Rlc3RFcnJvcnMgPSBmYWxzZTtcbn1cbiJdfQ==
