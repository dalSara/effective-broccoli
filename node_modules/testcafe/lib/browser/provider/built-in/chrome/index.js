'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _url = require('url');

var _runtimeInfo = require('./runtime-info');

var _runtimeInfo2 = _interopRequireDefault(_runtimeInfo);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _localChrome = require('./local-chrome');

var _cdp = require('./cdp');

var cdp = _interopRequireWildcard(_cdp);

var _getMaximizedHeadlessWindowSize = require('../../utils/get-maximized-headless-window-size');

var _getMaximizedHeadlessWindowSize2 = _interopRequireDefault(_getMaximizedHeadlessWindowSize);

var _clientFunctions = require('../../utils/client-functions');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    openedBrowsers: {},

    isMultiBrowser: false,

    openBrowser(browserId, pageUrl, configString) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = yield (0, _runtimeInfo2.default)((0, _url.parse)(pageUrl).hostname, configString);
            var browserName = _this.providerName.replace(':', '');

            runtimeInfo.browserId = browserId;
            runtimeInfo.browserName = browserName;

            runtimeInfo.providerMethods = {
                resizeLocalBrowserWindow: function resizeLocalBrowserWindow(...args) {
                    return _this.resizeLocalBrowserWindow(...args);
                }
            };

            yield (0, _localChrome.start)(pageUrl, runtimeInfo);

            yield _this.waitForConnectionReady(browserId);

            runtimeInfo.viewportSize = yield _this.runInitScript(browserId, _clientFunctions.GET_WINDOW_DIMENSIONS_INFO_SCRIPT);

            yield cdp.createClient(runtimeInfo);

            _this.openedBrowsers[browserId] = runtimeInfo;
        })();
    },

    closeBrowser(browserId) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = _this2.openedBrowsers[browserId];

            if (cdp.isHeadlessTab(runtimeInfo)) yield cdp.closeTab(runtimeInfo);else yield _this2.closeLocalBrowser(browserId);

            if (_osFamily2.default.mac || runtimeInfo.config.headless) yield (0, _localChrome.stop)(runtimeInfo);

            if (runtimeInfo.tempProfileDir) yield runtimeInfo.tempProfileDir.dispose();

            delete _this2.openedBrowsers[browserId];
        })();
    },

    isLocalBrowser(browserId, configString) {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var config = _this3.openedBrowsers[browserId] ? _this3.openedBrowsers[browserId].config : (0, _config2.default)(configString);

            return !config.headless;
        })();
    },

    takeScreenshot(browserId, path) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = _this4.openedBrowsers[browserId];

            yield cdp.takeScreenshot(path, runtimeInfo);
        })();
    },

    resizeWindow(browserId, width, height, currentWidth, currentHeight) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var runtimeInfo = _this5.openedBrowsers[browserId];

            if (runtimeInfo.config.mobile) yield cdp.updateMobileViewportSize(runtimeInfo);else {
                runtimeInfo.viewportSize.width = currentWidth;
                runtimeInfo.viewportSize.height = currentHeight;
            }

            yield cdp.resizeWindow({ width, height }, runtimeInfo);
        })();
    },

    maximizeWindow(browserId) {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const maximumSize = (0, _getMaximizedHeadlessWindowSize2.default)();

            yield _this6.resizeWindow(browserId, maximumSize.width, maximumSize.height, maximumSize.width, maximumSize.height);
        })();
    },

    hasCustomActionForBrowser(browserId) {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            var _openedBrowsers$brows = _this7.openedBrowsers[browserId],
                config = _openedBrowsers$brows.config,
                client = _openedBrowsers$brows.client;


            return {
                hasCloseBrowser: true,
                hasResizeWindow: !!client && (config.emulation || config.headless),
                hasMaximizeWindow: !!client && config.headless,
                hasTakeScreenshot: !!client,
                hasChromelessScreenshots: !!client,
                hasCanResizeWindowToDimensions: false
            };
        })();
    }
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
