'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

var _parse = require('parse5');

var _callsiteRecord = require('callsite-record');

var _templates = require('./templates');

var _templates2 = _interopRequireDefault(_templates);

var _createStackFilter = require('../create-stack-filter');

var _createStackFilter2 = _interopRequireDefault(_createStackFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parser = new _parse.Parser();

class TestRunErrorFormattableAdapter {
    constructor(err, metaInfo) {
        this.TEMPLATES = _templates2.default;

        this.userAgent = metaInfo.userAgent;
        this.screenshotPath = metaInfo.screenshotPath;
        this.testRunPhase = metaInfo.testRunPhase;

        (0, _lodash.assignIn)(this, err);

        this.callsite = this.callsite || metaInfo.callsite;
    }

    static _getSelector(node) {
        var classAttr = (0, _lodash.find)(node.attrs, { name: 'class' });
        var cls = classAttr && classAttr.value;

        return cls ? `${node.tagName} ${cls}` : node.tagName;
    }

    static _decorateHtml(node, decorator) {
        var msg = '';

        if (node.nodeName === '#text') msg = node.value;else {
            if (node.childNodes.length) {
                msg += node.childNodes.map(childNode => TestRunErrorFormattableAdapter._decorateHtml(childNode, decorator)).join('');
            }

            if (node.nodeName !== '#document-fragment') {
                var selector = TestRunErrorFormattableAdapter._getSelector(node);

                msg = decorator[selector](msg, node.attrs);
            }
        }

        return msg;
    }

    getErrorMarkup(viewportWidth) {
        return this.TEMPLATES[this.type](this, viewportWidth);
    }

    getCallsiteMarkup() {
        if (!this.callsite) return '';

        // NOTE: for raw API callsites
        if (typeof this.callsite === 'string') return this.callsite;

        try {
            return this.callsite.renderSync({
                renderer: _callsiteRecord.renderers.html,
                stackFilter: (0, _createStackFilter2.default)(Error.stackTraceLimit)
            });
        } catch (err) {
            return '';
        }
    }

    formatMessage(decorator, viewportWidth) {
        var msgHtml = this.getErrorMarkup(viewportWidth);
        var fragment = parser.parseFragment(msgHtml);

        return TestRunErrorFormattableAdapter._decorateHtml(fragment, decorator);
    }
}
exports.default = TestRunErrorFormattableAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lcnJvcnMvdGVzdC1ydW4vZm9ybWF0dGFibGUtYWRhcHRlci5qcyJdLCJuYW1lcyI6WyJwYXJzZXIiLCJQYXJzZXIiLCJUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImVyciIsIm1ldGFJbmZvIiwiVEVNUExBVEVTIiwidXNlckFnZW50Iiwic2NyZWVuc2hvdFBhdGgiLCJ0ZXN0UnVuUGhhc2UiLCJjYWxsc2l0ZSIsIl9nZXRTZWxlY3RvciIsIm5vZGUiLCJjbGFzc0F0dHIiLCJhdHRycyIsIm5hbWUiLCJjbHMiLCJ2YWx1ZSIsInRhZ05hbWUiLCJfZGVjb3JhdGVIdG1sIiwiZGVjb3JhdG9yIiwibXNnIiwibm9kZU5hbWUiLCJjaGlsZE5vZGVzIiwibGVuZ3RoIiwibWFwIiwiY2hpbGROb2RlIiwiam9pbiIsInNlbGVjdG9yIiwiZ2V0RXJyb3JNYXJrdXAiLCJ2aWV3cG9ydFdpZHRoIiwidHlwZSIsImdldENhbGxzaXRlTWFya3VwIiwicmVuZGVyU3luYyIsInJlbmRlcmVyIiwicmVuZGVyZXJzIiwiaHRtbCIsInN0YWNrRmlsdGVyIiwiRXJyb3IiLCJzdGFja1RyYWNlTGltaXQiLCJmb3JtYXRNZXNzYWdlIiwibXNnSHRtbCIsImZyYWdtZW50IiwicGFyc2VGcmFnbWVudCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLFNBQVMsSUFBSUMsYUFBSixFQUFiOztBQUVlLE1BQU1DLDhCQUFOLENBQXFDO0FBQ2hEQyxnQkFBYUMsR0FBYixFQUFrQkMsUUFBbEIsRUFBNEI7QUFDeEIsYUFBS0MsU0FBTCxHQUFpQkEsbUJBQWpCOztBQUVBLGFBQUtDLFNBQUwsR0FBc0JGLFNBQVNFLFNBQS9CO0FBQ0EsYUFBS0MsY0FBTCxHQUFzQkgsU0FBU0csY0FBL0I7QUFDQSxhQUFLQyxZQUFMLEdBQXNCSixTQUFTSSxZQUEvQjs7QUFFQSw4QkFBUyxJQUFULEVBQWVMLEdBQWY7O0FBRUEsYUFBS00sUUFBTCxHQUFnQixLQUFLQSxRQUFMLElBQWlCTCxTQUFTSyxRQUExQztBQUNIOztBQUVELFdBQU9DLFlBQVAsQ0FBcUJDLElBQXJCLEVBQTJCO0FBQ3ZCLFlBQUlDLFlBQVksa0JBQUtELEtBQUtFLEtBQVYsRUFBaUIsRUFBRUMsTUFBTSxPQUFSLEVBQWpCLENBQWhCO0FBQ0EsWUFBSUMsTUFBWUgsYUFBYUEsVUFBVUksS0FBdkM7O0FBRUEsZUFBT0QsTUFBTyxHQUFFSixLQUFLTSxPQUFRLElBQUdGLEdBQUksRUFBN0IsR0FBaUNKLEtBQUtNLE9BQTdDO0FBQ0g7O0FBRUQsV0FBT0MsYUFBUCxDQUFzQlAsSUFBdEIsRUFBNEJRLFNBQTVCLEVBQXVDO0FBQ25DLFlBQUlDLE1BQU0sRUFBVjs7QUFFQSxZQUFJVCxLQUFLVSxRQUFMLEtBQWtCLE9BQXRCLEVBQ0lELE1BQU1ULEtBQUtLLEtBQVgsQ0FESixLQUVLO0FBQ0QsZ0JBQUlMLEtBQUtXLFVBQUwsQ0FBZ0JDLE1BQXBCLEVBQTRCO0FBQ3hCSCx1QkFBT1QsS0FBS1csVUFBTCxDQUNGRSxHQURFLENBQ0VDLGFBQWF4QiwrQkFBK0JpQixhQUEvQixDQUE2Q08sU0FBN0MsRUFBd0ROLFNBQXhELENBRGYsRUFFRk8sSUFGRSxDQUVHLEVBRkgsQ0FBUDtBQUdIOztBQUVELGdCQUFJZixLQUFLVSxRQUFMLEtBQWtCLG9CQUF0QixFQUE0QztBQUN4QyxvQkFBSU0sV0FBVzFCLCtCQUErQlMsWUFBL0IsQ0FBNENDLElBQTVDLENBQWY7O0FBRUFTLHNCQUFNRCxVQUFVUSxRQUFWLEVBQW9CUCxHQUFwQixFQUF5QlQsS0FBS0UsS0FBOUIsQ0FBTjtBQUNIO0FBQ0o7O0FBRUQsZUFBT08sR0FBUDtBQUNIOztBQUVEUSxtQkFBZ0JDLGFBQWhCLEVBQStCO0FBQzNCLGVBQU8sS0FBS3hCLFNBQUwsQ0FBZSxLQUFLeUIsSUFBcEIsRUFBMEIsSUFBMUIsRUFBZ0NELGFBQWhDLENBQVA7QUFDSDs7QUFFREUsd0JBQXFCO0FBQ2pCLFlBQUksQ0FBQyxLQUFLdEIsUUFBVixFQUNJLE9BQU8sRUFBUDs7QUFFSjtBQUNBLFlBQUksT0FBTyxLQUFLQSxRQUFaLEtBQXlCLFFBQTdCLEVBQ0ksT0FBTyxLQUFLQSxRQUFaOztBQUVKLFlBQUk7QUFDQSxtQkFBTyxLQUFLQSxRQUFMLENBQWN1QixVQUFkLENBQXlCO0FBQzVCQywwQkFBYUMsMEJBQVVDLElBREs7QUFFNUJDLDZCQUFhLGlDQUFrQkMsTUFBTUMsZUFBeEI7QUFGZSxhQUF6QixDQUFQO0FBSUgsU0FMRCxDQU1BLE9BQU9uQyxHQUFQLEVBQVk7QUFDUixtQkFBTyxFQUFQO0FBQ0g7QUFDSjs7QUFFRG9DLGtCQUFlcEIsU0FBZixFQUEwQlUsYUFBMUIsRUFBeUM7QUFDckMsWUFBSVcsVUFBVyxLQUFLWixjQUFMLENBQW9CQyxhQUFwQixDQUFmO0FBQ0EsWUFBSVksV0FBVzFDLE9BQU8yQyxhQUFQLENBQXFCRixPQUFyQixDQUFmOztBQUVBLGVBQU92QywrQkFBK0JpQixhQUEvQixDQUE2Q3VCLFFBQTdDLEVBQXVEdEIsU0FBdkQsQ0FBUDtBQUNIO0FBdEUrQztrQkFBL0JsQiw4QiIsImZpbGUiOiJlcnJvcnMvdGVzdC1ydW4vZm9ybWF0dGFibGUtYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmQsIGFzc2lnbkluIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJ3BhcnNlNSc7XG5pbXBvcnQgeyByZW5kZXJlcnMgfSBmcm9tICdjYWxsc2l0ZS1yZWNvcmQnO1xuaW1wb3J0IFRFTVBMQVRFUyBmcm9tICcuL3RlbXBsYXRlcyc7XG5pbXBvcnQgY3JlYXRlU3RhY2tGaWx0ZXIgZnJvbSAnLi4vY3JlYXRlLXN0YWNrLWZpbHRlcic7XG5cbnZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlc3RSdW5FcnJvckZvcm1hdHRhYmxlQWRhcHRlciB7XG4gICAgY29uc3RydWN0b3IgKGVyciwgbWV0YUluZm8pIHtcbiAgICAgICAgdGhpcy5URU1QTEFURVMgPSBURU1QTEFURVM7XG5cbiAgICAgICAgdGhpcy51c2VyQWdlbnQgICAgICA9IG1ldGFJbmZvLnVzZXJBZ2VudDtcbiAgICAgICAgdGhpcy5zY3JlZW5zaG90UGF0aCA9IG1ldGFJbmZvLnNjcmVlbnNob3RQYXRoO1xuICAgICAgICB0aGlzLnRlc3RSdW5QaGFzZSAgID0gbWV0YUluZm8udGVzdFJ1blBoYXNlO1xuXG4gICAgICAgIGFzc2lnbkluKHRoaXMsIGVycik7XG5cbiAgICAgICAgdGhpcy5jYWxsc2l0ZSA9IHRoaXMuY2FsbHNpdGUgfHwgbWV0YUluZm8uY2FsbHNpdGU7XG4gICAgfVxuXG4gICAgc3RhdGljIF9nZXRTZWxlY3RvciAobm9kZSkge1xuICAgICAgICB2YXIgY2xhc3NBdHRyID0gZmluZChub2RlLmF0dHJzLCB7IG5hbWU6ICdjbGFzcycgfSk7XG4gICAgICAgIHZhciBjbHMgICAgICAgPSBjbGFzc0F0dHIgJiYgY2xhc3NBdHRyLnZhbHVlO1xuXG4gICAgICAgIHJldHVybiBjbHMgPyBgJHtub2RlLnRhZ05hbWV9ICR7Y2xzfWAgOiBub2RlLnRhZ05hbWU7XG4gICAgfVxuXG4gICAgc3RhdGljIF9kZWNvcmF0ZUh0bWwgKG5vZGUsIGRlY29yYXRvcikge1xuICAgICAgICB2YXIgbXNnID0gJyc7XG5cbiAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT09ICcjdGV4dCcpXG4gICAgICAgICAgICBtc2cgPSBub2RlLnZhbHVlO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbXNnICs9IG5vZGUuY2hpbGROb2Rlc1xuICAgICAgICAgICAgICAgICAgICAubWFwKGNoaWxkTm9kZSA9PiBUZXN0UnVuRXJyb3JGb3JtYXR0YWJsZUFkYXB0ZXIuX2RlY29yYXRlSHRtbChjaGlsZE5vZGUsIGRlY29yYXRvcikpXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZU5hbWUgIT09ICcjZG9jdW1lbnQtZnJhZ21lbnQnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gVGVzdFJ1bkVycm9yRm9ybWF0dGFibGVBZGFwdGVyLl9nZXRTZWxlY3Rvcihub2RlKTtcblxuICAgICAgICAgICAgICAgIG1zZyA9IGRlY29yYXRvcltzZWxlY3Rvcl0obXNnLCBub2RlLmF0dHJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuXG4gICAgZ2V0RXJyb3JNYXJrdXAgKHZpZXdwb3J0V2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuVEVNUExBVEVTW3RoaXMudHlwZV0odGhpcywgdmlld3BvcnRXaWR0aCk7XG4gICAgfVxuXG4gICAgZ2V0Q2FsbHNpdGVNYXJrdXAgKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2FsbHNpdGUpXG4gICAgICAgICAgICByZXR1cm4gJyc7XG5cbiAgICAgICAgLy8gTk9URTogZm9yIHJhdyBBUEkgY2FsbHNpdGVzXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYWxsc2l0ZSA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxsc2l0ZTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsbHNpdGUucmVuZGVyU3luYyh7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6ICAgIHJlbmRlcmVycy5odG1sLFxuICAgICAgICAgICAgICAgIHN0YWNrRmlsdGVyOiBjcmVhdGVTdGFja0ZpbHRlcihFcnJvci5zdGFja1RyYWNlTGltaXQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3JtYXRNZXNzYWdlIChkZWNvcmF0b3IsIHZpZXdwb3J0V2lkdGgpIHtcbiAgICAgICAgdmFyIG1zZ0h0bWwgID0gdGhpcy5nZXRFcnJvck1hcmt1cCh2aWV3cG9ydFdpZHRoKTtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gcGFyc2VyLnBhcnNlRnJhZ21lbnQobXNnSHRtbCk7XG5cbiAgICAgICAgcmV0dXJuIFRlc3RSdW5FcnJvckZvcm1hdHRhYmxlQWRhcHRlci5fZGVjb3JhdGVIdG1sKGZyYWdtZW50LCBkZWNvcmF0b3IpO1xuICAgIH1cbn1cbiJdfQ==
